//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var bean_ttypes = require('./bean_types');


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var BannerService_insert_args = function(args) {
  this.banner = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
  }
};
BannerService_insert_args.prototype = {};
BannerService_insert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_insert_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_insert_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_insert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
BannerService_insert_result.prototype = {};
BannerService_insert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_insert_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_insert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_update_args = function(args) {
  this.banner = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
  }
};
BannerService_update_args.prototype = {};
BannerService_update_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_update_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_update_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_update_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
BannerService_update_result.prototype = {};
BannerService_update_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_update_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_update_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_remove_args = function(args) {
  this.banner = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
  }
};
BannerService_remove_args.prototype = {};
BannerService_remove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_remove_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_remove_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_remove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
BannerService_remove_result.prototype = {};
BannerService_remove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_remove_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_remove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_findById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
BannerService_findById_args.prototype = {};
BannerService_findById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_findById_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_findById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_findById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.Banner(args.success);
    }
  }
};
BannerService_findById_result.prototype = {};
BannerService_findById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.Banner();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_findById_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_findById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectAll_args = function(args) {
};
BannerService_selectAll_args.prototype = {};
BannerService_selectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectAll_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_selectAll_result.prototype = {};
BannerService_selectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new bean_ttypes.Banner();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectAll_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_select_args = function(args) {
  this.banner = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
  }
};
BannerService_select_args.prototype = {};
BannerService_select_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_select_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_select_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_select_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_select_result.prototype = {};
BannerService_select_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new bean_ttypes.Banner();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_select_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_select_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQuery_args = function(args) {
  this.banner = null;
  this.query = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
  }
};
BannerService_selectQuery_args.prototype = {};
BannerService_selectQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQuery_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQuery_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_selectQuery_result.prototype = {};
BannerService_selectQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new bean_ttypes.Banner();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQuery_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectCustom_args = function(args) {
  this.banner = null;
  this.custom = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = new bean_ttypes.Custom(args.custom);
    }
  }
};
BannerService_selectCustom_args.prototype = {};
BannerService_selectCustom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new bean_ttypes.Custom();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectCustom_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectCustom_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 2);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectCustom_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_selectCustom_result.prototype = {};
BannerService_selectCustom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new bean_ttypes.Banner();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectCustom_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectCustom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQueryCustom_args = function(args) {
  this.banner = null;
  this.query = null;
  this.custom = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = new bean_ttypes.Custom(args.custom);
    }
  }
};
BannerService_selectQueryCustom_args.prototype = {};
BannerService_selectQueryCustom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new bean_ttypes.Custom();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQueryCustom_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQueryCustom_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 3);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQueryCustom_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_selectQueryCustom_result.prototype = {};
BannerService_selectQueryCustom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size80 = 0;
        var _rtmp384;
        this.success = [];
        var _etype83 = 0;
        _rtmp384 = input.readListBegin();
        _etype83 = _rtmp384.etype;
        _size80 = _rtmp384.size;
        for (var _i85 = 0; _i85 < _size80; ++_i85)
        {
          var elem86 = null;
          elem86 = new bean_ttypes.Banner();
          elem86.read(input);
          this.success.push(elem86);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQueryCustom_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQueryCustom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter87 in this.success)
    {
      if (this.success.hasOwnProperty(iter87))
      {
        iter87 = this.success[iter87];
        iter87.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQueryCustomNotCache_args = function(args) {
  this.banner = null;
  this.query = null;
  this.custom = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = new bean_ttypes.Custom(args.custom);
    }
  }
};
BannerService_selectQueryCustomNotCache_args.prototype = {};
BannerService_selectQueryCustomNotCache_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new bean_ttypes.Custom();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQueryCustomNotCache_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQueryCustomNotCache_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 3);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQueryCustomNotCache_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_selectQueryCustomNotCache_result.prototype = {};
BannerService_selectQueryCustomNotCache_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size88 = 0;
        var _rtmp392;
        this.success = [];
        var _etype91 = 0;
        _rtmp392 = input.readListBegin();
        _etype91 = _rtmp392.etype;
        _size88 = _rtmp392.size;
        for (var _i93 = 0; _i93 < _size88; ++_i93)
        {
          var elem94 = null;
          elem94 = new bean_ttypes.Banner();
          elem94.read(input);
          this.success.push(elem94);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQueryCustomNotCache_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQueryCustomNotCache_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter95 in this.success)
    {
      if (this.success.hasOwnProperty(iter95))
      {
        iter95 = this.success[iter95];
        iter95.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQueryNoCache_args = function(args) {
  this.banner = null;
  this.query = null;
  if (args) {
    if (args.banner !== undefined && args.banner !== null) {
      this.banner = new bean_ttypes.Banner(args.banner);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
  }
};
BannerService_selectQueryNoCache_args.prototype = {};
BannerService_selectQueryNoCache_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.banner = new bean_ttypes.Banner();
        this.banner.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQueryNoCache_args.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQueryNoCache_args');
  if (this.banner !== null && this.banner !== undefined) {
    output.writeFieldBegin('banner', Thrift.Type.STRUCT, 1);
    this.banner.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerService_selectQueryNoCache_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Banner]);
    }
  }
};
BannerService_selectQueryNoCache_result.prototype = {};
BannerService_selectQueryNoCache_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new bean_ttypes.Banner();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerService_selectQueryNoCache_result.prototype.write = function(output) {
  output.writeStructBegin('BannerService_selectQueryNoCache_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
BannerServiceClient.prototype = {};
BannerServiceClient.prototype.seqid = function() { return this._seqid; };
BannerServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
BannerServiceClient.prototype.insert = function(banner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_insert(banner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_insert(banner);
  }
};

BannerServiceClient.prototype.send_insert = function(banner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('insert', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_insert_args();
  args.banner = banner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_insert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_insert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('insert failed: unknown result');
};
BannerServiceClient.prototype.update = function(banner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update(banner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update(banner);
  }
};

BannerServiceClient.prototype.send_update = function(banner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('update', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_update_args();
  args.banner = banner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_update = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_update_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update failed: unknown result');
};
BannerServiceClient.prototype.remove = function(banner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove(banner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove(banner);
  }
};

BannerServiceClient.prototype.send_remove = function(banner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('remove', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_remove_args();
  args.banner = banner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_remove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_remove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('remove failed: unknown result');
};
BannerServiceClient.prototype.findById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_findById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_findById(id);
  }
};

BannerServiceClient.prototype.send_findById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('findById', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_findById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_findById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_findById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('findById failed: unknown result');
};
BannerServiceClient.prototype.selectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_selectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_selectAll();
  }
};

BannerServiceClient.prototype.send_selectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('selectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_selectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_selectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_selectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('selectAll failed: unknown result');
};
BannerServiceClient.prototype.select = function(banner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_select(banner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_select(banner);
  }
};

BannerServiceClient.prototype.send_select = function(banner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('select', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_select_args();
  args.banner = banner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_select = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_select_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('select failed: unknown result');
};
BannerServiceClient.prototype.selectQuery = function(banner, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_selectQuery(banner, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_selectQuery(banner, query);
  }
};

BannerServiceClient.prototype.send_selectQuery = function(banner, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('selectQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_selectQuery_args();
  args.banner = banner;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_selectQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_selectQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('selectQuery failed: unknown result');
};
BannerServiceClient.prototype.selectCustom = function(banner, custom, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_selectCustom(banner, custom);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_selectCustom(banner, custom);
  }
};

BannerServiceClient.prototype.send_selectCustom = function(banner, custom) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('selectCustom', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_selectCustom_args();
  args.banner = banner;
  args.custom = custom;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_selectCustom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_selectCustom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('selectCustom failed: unknown result');
};
BannerServiceClient.prototype.selectQueryCustom = function(banner, query, custom, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_selectQueryCustom(banner, query, custom);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_selectQueryCustom(banner, query, custom);
  }
};

BannerServiceClient.prototype.send_selectQueryCustom = function(banner, query, custom) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('selectQueryCustom', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_selectQueryCustom_args();
  args.banner = banner;
  args.query = query;
  args.custom = custom;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_selectQueryCustom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_selectQueryCustom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('selectQueryCustom failed: unknown result');
};
BannerServiceClient.prototype.selectQueryCustomNotCache = function(banner, query, custom, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_selectQueryCustomNotCache(banner, query, custom);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_selectQueryCustomNotCache(banner, query, custom);
  }
};

BannerServiceClient.prototype.send_selectQueryCustomNotCache = function(banner, query, custom) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('selectQueryCustomNotCache', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_selectQueryCustomNotCache_args();
  args.banner = banner;
  args.query = query;
  args.custom = custom;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_selectQueryCustomNotCache = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_selectQueryCustomNotCache_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('selectQueryCustomNotCache failed: unknown result');
};
BannerServiceClient.prototype.selectQueryNoCache = function(banner, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_selectQueryNoCache(banner, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_selectQueryNoCache(banner, query);
  }
};

BannerServiceClient.prototype.send_selectQueryNoCache = function(banner, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('selectQueryNoCache', Thrift.MessageType.CALL, this.seqid());
  var args = new BannerService_selectQueryNoCache_args();
  args.banner = banner;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

BannerServiceClient.prototype.recv_selectQueryNoCache = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new BannerService_selectQueryNoCache_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('selectQueryNoCache failed: unknown result');
};
var BannerServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
BannerServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
BannerServiceProcessor.prototype.process_insert = function(seqid, input, output) {
  var args = new BannerService_insert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.insert.length === 1) {
    Q.fcall(this._handler.insert, args.banner)
      .then(function(result) {
        var result_obj = new BannerService_insert_result({success: result});
        output.writeMessageBegin("insert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.insert(args.banner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_insert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("insert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("insert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_update = function(seqid, input, output) {
  var args = new BannerService_update_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update.length === 1) {
    Q.fcall(this._handler.update, args.banner)
      .then(function(result) {
        var result_obj = new BannerService_update_result({success: result});
        output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.update(args.banner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_update_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_remove = function(seqid, input, output) {
  var args = new BannerService_remove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove.length === 1) {
    Q.fcall(this._handler.remove, args.banner)
      .then(function(result) {
        var result_obj = new BannerService_remove_result({success: result});
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.remove(args.banner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_remove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_findById = function(seqid, input, output) {
  var args = new BannerService_findById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.findById.length === 1) {
    Q.fcall(this._handler.findById, args.id)
      .then(function(result) {
        var result_obj = new BannerService_findById_result({success: result});
        output.writeMessageBegin("findById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.findById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_findById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("findById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("findById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_selectAll = function(seqid, input, output) {
  var args = new BannerService_selectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.selectAll.length === 0) {
    Q.fcall(this._handler.selectAll)
      .then(function(result) {
        var result_obj = new BannerService_selectAll_result({success: result});
        output.writeMessageBegin("selectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.selectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_selectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("selectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_select = function(seqid, input, output) {
  var args = new BannerService_select_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.select.length === 1) {
    Q.fcall(this._handler.select, args.banner)
      .then(function(result) {
        var result_obj = new BannerService_select_result({success: result});
        output.writeMessageBegin("select", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("select", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.select(args.banner, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_select_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("select", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("select", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_selectQuery = function(seqid, input, output) {
  var args = new BannerService_selectQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.selectQuery.length === 2) {
    Q.fcall(this._handler.selectQuery, args.banner, args.query)
      .then(function(result) {
        var result_obj = new BannerService_selectQuery_result({success: result});
        output.writeMessageBegin("selectQuery", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQuery", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.selectQuery(args.banner, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_selectQuery_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("selectQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_selectCustom = function(seqid, input, output) {
  var args = new BannerService_selectCustom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.selectCustom.length === 2) {
    Q.fcall(this._handler.selectCustom, args.banner, args.custom)
      .then(function(result) {
        var result_obj = new BannerService_selectCustom_result({success: result});
        output.writeMessageBegin("selectCustom", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectCustom", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.selectCustom(args.banner, args.custom, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_selectCustom_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("selectCustom", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectCustom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_selectQueryCustom = function(seqid, input, output) {
  var args = new BannerService_selectQueryCustom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.selectQueryCustom.length === 3) {
    Q.fcall(this._handler.selectQueryCustom, args.banner, args.query, args.custom)
      .then(function(result) {
        var result_obj = new BannerService_selectQueryCustom_result({success: result});
        output.writeMessageBegin("selectQueryCustom", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQueryCustom", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.selectQueryCustom(args.banner, args.query, args.custom, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_selectQueryCustom_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("selectQueryCustom", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQueryCustom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_selectQueryCustomNotCache = function(seqid, input, output) {
  var args = new BannerService_selectQueryCustomNotCache_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.selectQueryCustomNotCache.length === 3) {
    Q.fcall(this._handler.selectQueryCustomNotCache, args.banner, args.query, args.custom)
      .then(function(result) {
        var result_obj = new BannerService_selectQueryCustomNotCache_result({success: result});
        output.writeMessageBegin("selectQueryCustomNotCache", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQueryCustomNotCache", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.selectQueryCustomNotCache(args.banner, args.query, args.custom, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_selectQueryCustomNotCache_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("selectQueryCustomNotCache", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQueryCustomNotCache", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
BannerServiceProcessor.prototype.process_selectQueryNoCache = function(seqid, input, output) {
  var args = new BannerService_selectQueryNoCache_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.selectQueryNoCache.length === 2) {
    Q.fcall(this._handler.selectQueryNoCache, args.banner, args.query)
      .then(function(result) {
        var result_obj = new BannerService_selectQueryNoCache_result({success: result});
        output.writeMessageBegin("selectQueryNoCache", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQueryNoCache", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.selectQueryNoCache(args.banner, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new BannerService_selectQueryNoCache_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("selectQueryNoCache", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("selectQueryNoCache", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
