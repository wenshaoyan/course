//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var RequestException = module.exports.RequestException = function(args) {
  Thrift.TException.call(this, "RequestException");
  this.name = "RequestException";
  this.code = null;
  this.message = null;
  this.serverName = null;
  this.methodName = null;
  this.fullMessage = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
    if (args.serverName !== undefined && args.serverName !== null) {
      this.serverName = args.serverName;
    }
    if (args.methodName !== undefined && args.methodName !== null) {
      this.methodName = args.methodName;
    }
    if (args.fullMessage !== undefined && args.fullMessage !== null) {
      this.fullMessage = args.fullMessage;
    }
  }
};
Thrift.inherits(RequestException, Thrift.TException);
RequestException.prototype.name = 'RequestException';
RequestException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.serverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.methodName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.fullMessage = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestException.prototype.write = function(output) {
  output.writeStructBegin('RequestException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  if (this.serverName !== null && this.serverName !== undefined) {
    output.writeFieldBegin('serverName', Thrift.Type.STRING, 3);
    output.writeString(this.serverName);
    output.writeFieldEnd();
  }
  if (this.methodName !== null && this.methodName !== undefined) {
    output.writeFieldBegin('methodName', Thrift.Type.STRING, 4);
    output.writeString(this.methodName);
    output.writeFieldEnd();
  }
  if (this.fullMessage !== null && this.fullMessage !== undefined) {
    output.writeFieldBegin('fullMessage', Thrift.Type.STRING, 5);
    output.writeString(this.fullMessage);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var User = module.exports.User = function(args) {
  this.id = null;
  this.name = null;
  this.head = null;
  this.tel = null;
  this.device_uuid = null;
  this.register_time = null;
  this.create_time = null;
  this.update_time = null;
  this.password = null;
  this.role_id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.head !== undefined && args.head !== null) {
      this.head = args.head;
    }
    if (args.tel !== undefined && args.tel !== null) {
      this.tel = args.tel;
    }
    if (args.device_uuid !== undefined && args.device_uuid !== null) {
      this.device_uuid = args.device_uuid;
    }
    if (args.register_time !== undefined && args.register_time !== null) {
      this.register_time = args.register_time;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
    if (args.role_id !== undefined && args.role_id !== null) {
      this.role_id = args.role_id;
    }
  }
};
User.prototype = {};
User.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.head = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.tel = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.device_uuid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.register_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.role_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

User.prototype.write = function(output) {
  output.writeStructBegin('User');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.head !== null && this.head !== undefined) {
    output.writeFieldBegin('head', Thrift.Type.STRING, 3);
    output.writeString(this.head);
    output.writeFieldEnd();
  }
  if (this.tel !== null && this.tel !== undefined) {
    output.writeFieldBegin('tel', Thrift.Type.STRING, 4);
    output.writeString(this.tel);
    output.writeFieldEnd();
  }
  if (this.device_uuid !== null && this.device_uuid !== undefined) {
    output.writeFieldBegin('device_uuid', Thrift.Type.STRING, 5);
    output.writeString(this.device_uuid);
    output.writeFieldEnd();
  }
  if (this.register_time !== null && this.register_time !== undefined) {
    output.writeFieldBegin('register_time', Thrift.Type.STRING, 6);
    output.writeString(this.register_time);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 7);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 8);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 9);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  if (this.role_id !== null && this.role_id !== undefined) {
    output.writeFieldBegin('role_id', Thrift.Type.I32, 10);
    output.writeI32(this.role_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Role = module.exports.Role = function(args) {
  this.id = null;
  this.name = null;
  this.create_time = null;
  this.update_time = null;
  this.permission = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.permission !== undefined && args.permission !== null) {
      this.permission = args.permission;
    }
  }
};
Role.prototype = {};
Role.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.permission = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Role.prototype.write = function(output) {
  output.writeStructBegin('Role');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 3);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.permission !== null && this.permission !== undefined) {
    output.writeFieldBegin('permission', Thrift.Type.STRING, 5);
    output.writeString(this.permission);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Banner = module.exports.Banner = function(args) {
  this.id = null;
  this.create_time = null;
  this.update_time = null;
  this.user_id = null;
  this.image_url = null;
  this.redirect_url = null;
  this.client_id = null;
  this.location = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.image_url !== undefined && args.image_url !== null) {
      this.image_url = args.image_url;
    }
    if (args.redirect_url !== undefined && args.redirect_url !== null) {
      this.redirect_url = args.redirect_url;
    }
    if (args.client_id !== undefined && args.client_id !== null) {
      this.client_id = args.client_id;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
  }
};
Banner.prototype = {};
Banner.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.user_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.image_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.redirect_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.client_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.location = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Banner.prototype.write = function(output) {
  output.writeStructBegin('Banner');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 2);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 3);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I32, 4);
    output.writeI32(this.user_id);
    output.writeFieldEnd();
  }
  if (this.image_url !== null && this.image_url !== undefined) {
    output.writeFieldBegin('image_url', Thrift.Type.STRING, 5);
    output.writeString(this.image_url);
    output.writeFieldEnd();
  }
  if (this.redirect_url !== null && this.redirect_url !== undefined) {
    output.writeFieldBegin('redirect_url', Thrift.Type.STRING, 6);
    output.writeString(this.redirect_url);
    output.writeFieldEnd();
  }
  if (this.client_id !== null && this.client_id !== undefined) {
    output.writeFieldBegin('client_id', Thrift.Type.I32, 7);
    output.writeI32(this.client_id);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.I32, 8);
    output.writeI32(this.location);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Version = module.exports.Version = function(args) {
  this.id = null;
  this.create_time = null;
  this.update_time = null;
  this.version_name = null;
  this.version_number = null;
  this.client_id = null;
  this.download_url = null;
  this.description = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.version_name !== undefined && args.version_name !== null) {
      this.version_name = args.version_name;
    }
    if (args.version_number !== undefined && args.version_number !== null) {
      this.version_number = args.version_number;
    }
    if (args.client_id !== undefined && args.client_id !== null) {
      this.client_id = args.client_id;
    }
    if (args.download_url !== undefined && args.download_url !== null) {
      this.download_url = args.download_url;
    }
    if (args.description !== undefined && args.description !== null) {
      this.description = args.description;
    }
  }
};
Version.prototype = {};
Version.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.version_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.version_number = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.client_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.download_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.description = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Version.prototype.write = function(output) {
  output.writeStructBegin('Version');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 2);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 3);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.version_name !== null && this.version_name !== undefined) {
    output.writeFieldBegin('version_name', Thrift.Type.STRING, 4);
    output.writeString(this.version_name);
    output.writeFieldEnd();
  }
  if (this.version_number !== null && this.version_number !== undefined) {
    output.writeFieldBegin('version_number', Thrift.Type.I32, 5);
    output.writeI32(this.version_number);
    output.writeFieldEnd();
  }
  if (this.client_id !== null && this.client_id !== undefined) {
    output.writeFieldBegin('client_id', Thrift.Type.I32, 6);
    output.writeI32(this.client_id);
    output.writeFieldEnd();
  }
  if (this.download_url !== null && this.download_url !== undefined) {
    output.writeFieldBegin('download_url', Thrift.Type.STRING, 7);
    output.writeString(this.download_url);
    output.writeFieldEnd();
  }
  if (this.description !== null && this.description !== undefined) {
    output.writeFieldBegin('description', Thrift.Type.STRING, 8);
    output.writeString(this.description);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientSide = module.exports.ClientSide = function(args) {
  this.id = null;
  this.create_time = null;
  this.update_time = null;
  this.name = null;
  this.package_name = null;
  this.versions = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.package_name !== undefined && args.package_name !== null) {
      this.package_name = args.package_name;
    }
    if (args.versions !== undefined && args.versions !== null) {
      this.versions = Thrift.copyList(args.versions, [ttypes.Version]);
    }
  }
};
ClientSide.prototype = {};
ClientSide.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.package_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.versions = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.Version();
          elem6.read(input);
          this.versions.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientSide.prototype.write = function(output) {
  output.writeStructBegin('ClientSide');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 2);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 3);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.package_name !== null && this.package_name !== undefined) {
    output.writeFieldBegin('package_name', Thrift.Type.STRING, 5);
    output.writeString(this.package_name);
    output.writeFieldEnd();
  }
  if (this.versions !== null && this.versions !== undefined) {
    output.writeFieldBegin('versions', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.versions.length);
    for (var iter7 in this.versions)
    {
      if (this.versions.hasOwnProperty(iter7))
      {
        iter7 = this.versions[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var BannerList = module.exports.BannerList = function(args) {
  this.data = null;
  if (args) {
    if (args.data !== undefined && args.data !== null) {
      this.data = Thrift.copyList(args.data, [ttypes.Banner]);
    }
  }
};
BannerList.prototype = {};
BannerList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.data = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Banner();
          elem14.read(input);
          this.data.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BannerList.prototype.write = function(output) {
  output.writeStructBegin('BannerList');
  if (this.data !== null && this.data !== undefined) {
    output.writeFieldBegin('data', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.data.length);
    for (var iter15 in this.data)
    {
      if (this.data.hasOwnProperty(iter15))
      {
        iter15 = this.data[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseType = module.exports.CourseType = function(args) {
  this.id = null;
  this.name = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
CourseType.prototype = {};
CourseType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseType.prototype.write = function(output) {
  output.writeStructBegin('CourseType');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseTypeGroup = module.exports.CourseTypeGroup = function(args) {
  this.id = null;
  this.name = null;
  this.courseTypes = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.courseTypes !== undefined && args.courseTypes !== null) {
      this.courseTypes = Thrift.copyList(args.courseTypes, [ttypes.CourseType]);
    }
  }
};
CourseTypeGroup.prototype = {};
CourseTypeGroup.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.courseTypes = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.CourseType();
          elem22.read(input);
          this.courseTypes.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseTypeGroup.prototype.write = function(output) {
  output.writeStructBegin('CourseTypeGroup');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.courseTypes !== null && this.courseTypes !== undefined) {
    output.writeFieldBegin('courseTypes', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.courseTypes.length);
    for (var iter23 in this.courseTypes)
    {
      if (this.courseTypes.hasOwnProperty(iter23))
      {
        iter23 = this.courseTypes[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseTypeAll = module.exports.CourseTypeAll = function(args) {
  this.id = null;
  this.name = null;
  this.group_id = null;
  this.group_name = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.group_id !== undefined && args.group_id !== null) {
      this.group_id = args.group_id;
    }
    if (args.group_name !== undefined && args.group_name !== null) {
      this.group_name = args.group_name;
    }
  }
};
CourseTypeAll.prototype = {};
CourseTypeAll.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.group_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseTypeAll.prototype.write = function(output) {
  output.writeStructBegin('CourseTypeAll');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.group_id !== null && this.group_id !== undefined) {
    output.writeFieldBegin('group_id', Thrift.Type.I32, 3);
    output.writeI32(this.group_id);
    output.writeFieldEnd();
  }
  if (this.group_name !== null && this.group_name !== undefined) {
    output.writeFieldBegin('group_name', Thrift.Type.STRING, 4);
    output.writeString(this.group_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Course = module.exports.Course = function(args) {
  this.id = null;
  this.title = null;
  this.create_time = null;
  this.update_time = null;
  this.price = null;
  this.describe = null;
  this.status = null;
  this.author_id = null;
  this.courseTypeAll = null;
  this.image_url = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.describe !== undefined && args.describe !== null) {
      this.describe = args.describe;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.author_id !== undefined && args.author_id !== null) {
      this.author_id = args.author_id;
    }
    if (args.courseTypeAll !== undefined && args.courseTypeAll !== null) {
      this.courseTypeAll = new ttypes.CourseTypeAll(args.courseTypeAll);
    }
    if (args.image_url !== undefined && args.image_url !== null) {
      this.image_url = args.image_url;
    }
  }
};
Course.prototype = {};
Course.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.describe = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.author_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.courseTypeAll = new ttypes.CourseTypeAll();
        this.courseTypeAll.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.image_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Course.prototype.write = function(output) {
  output.writeStructBegin('Course');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 3);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 4);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.describe !== null && this.describe !== undefined) {
    output.writeFieldBegin('describe', Thrift.Type.STRING, 6);
    output.writeString(this.describe);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.author_id !== null && this.author_id !== undefined) {
    output.writeFieldBegin('author_id', Thrift.Type.I32, 8);
    output.writeI32(this.author_id);
    output.writeFieldEnd();
  }
  if (this.courseTypeAll !== null && this.courseTypeAll !== undefined) {
    output.writeFieldBegin('courseTypeAll', Thrift.Type.STRUCT, 9);
    this.courseTypeAll.write(output);
    output.writeFieldEnd();
  }
  if (this.image_url !== null && this.image_url !== undefined) {
    output.writeFieldBegin('image_url', Thrift.Type.STRING, 10);
    output.writeString(this.image_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Video = module.exports.Video = function(args) {
  this.id = null;
  this.title = null;
  this.resource_path = null;
  this.resource_time = null;
  this.location = null;
  this.course_id = null;
  this.status = null;
  this.play_number = null;
  this.create_time = null;
  this.update_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.resource_path !== undefined && args.resource_path !== null) {
      this.resource_path = args.resource_path;
    }
    if (args.resource_time !== undefined && args.resource_time !== null) {
      this.resource_time = args.resource_time;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.course_id !== undefined && args.course_id !== null) {
      this.course_id = args.course_id;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.play_number !== undefined && args.play_number !== null) {
      this.play_number = args.play_number;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
  }
};
Video.prototype = {};
Video.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.resource_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.resource_time = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.location = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.course_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.play_number = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Video.prototype.write = function(output) {
  output.writeStructBegin('Video');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.resource_path !== null && this.resource_path !== undefined) {
    output.writeFieldBegin('resource_path', Thrift.Type.STRING, 3);
    output.writeString(this.resource_path);
    output.writeFieldEnd();
  }
  if (this.resource_time !== null && this.resource_time !== undefined) {
    output.writeFieldBegin('resource_time', Thrift.Type.I32, 4);
    output.writeI32(this.resource_time);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.I32, 5);
    output.writeI32(this.location);
    output.writeFieldEnd();
  }
  if (this.course_id !== null && this.course_id !== undefined) {
    output.writeFieldBegin('course_id', Thrift.Type.I32, 6);
    output.writeI32(this.course_id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 7);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  if (this.play_number !== null && this.play_number !== undefined) {
    output.writeFieldBegin('play_number', Thrift.Type.I32, 8);
    output.writeI32(this.play_number);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 9);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 10);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Query = module.exports.Query = function(args) {
  this.create_time_start = null;
  this.create_time_end = null;
  this.update_time_start = null;
  this.update_time_end = null;
  this.page = null;
  this.limit = null;
  this.sort_by = null;
  this.order = null;
  if (args) {
    if (args.create_time_start !== undefined && args.create_time_start !== null) {
      this.create_time_start = args.create_time_start;
    }
    if (args.create_time_end !== undefined && args.create_time_end !== null) {
      this.create_time_end = args.create_time_end;
    }
    if (args.update_time_start !== undefined && args.update_time_start !== null) {
      this.update_time_start = args.update_time_start;
    }
    if (args.update_time_end !== undefined && args.update_time_end !== null) {
      this.update_time_end = args.update_time_end;
    }
    if (args.page !== undefined && args.page !== null) {
      this.page = args.page;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = args.limit;
    }
    if (args.sort_by !== undefined && args.sort_by !== null) {
      this.sort_by = args.sort_by;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
  }
};
Query.prototype = {};
Query.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.create_time_start = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.create_time_end = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.update_time_start = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.update_time_end = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.page = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.sort_by = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Query.prototype.write = function(output) {
  output.writeStructBegin('Query');
  if (this.create_time_start !== null && this.create_time_start !== undefined) {
    output.writeFieldBegin('create_time_start', Thrift.Type.STRING, 1);
    output.writeString(this.create_time_start);
    output.writeFieldEnd();
  }
  if (this.create_time_end !== null && this.create_time_end !== undefined) {
    output.writeFieldBegin('create_time_end', Thrift.Type.STRING, 2);
    output.writeString(this.create_time_end);
    output.writeFieldEnd();
  }
  if (this.update_time_start !== null && this.update_time_start !== undefined) {
    output.writeFieldBegin('update_time_start', Thrift.Type.STRING, 3);
    output.writeString(this.update_time_start);
    output.writeFieldEnd();
  }
  if (this.update_time_end !== null && this.update_time_end !== undefined) {
    output.writeFieldBegin('update_time_end', Thrift.Type.STRING, 4);
    output.writeString(this.update_time_end);
    output.writeFieldEnd();
  }
  if (this.page !== null && this.page !== undefined) {
    output.writeFieldBegin('page', Thrift.Type.I32, 5);
    output.writeI32(this.page);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.I32, 6);
    output.writeI32(this.limit);
    output.writeFieldEnd();
  }
  if (this.sort_by !== null && this.sort_by !== undefined) {
    output.writeFieldBegin('sort_by', Thrift.Type.STRING, 7);
    output.writeString(this.sort_by);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRING, 8);
    output.writeString(this.order);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Custom = module.exports.Custom = function(args) {
  this.tables = null;
  if (args) {
    if (args.tables !== undefined && args.tables !== null) {
      this.tables = Thrift.copyList(args.tables, [null]);
    }
  }
};
Custom.prototype = {};
Custom.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.SET) {
        var _size24 = 0;
        var _rtmp328;
        this.tables = [];
        var _etype27 = 0;
        _rtmp328 = input.readSetBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.tables.push(elem30);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Custom.prototype.write = function(output) {
  output.writeStructBegin('Custom');
  if (this.tables !== null && this.tables !== undefined) {
    output.writeFieldBegin('tables', Thrift.Type.SET, 1);
    output.writeSetBegin(Thrift.Type.STRING, this.tables.length);
    for (var iter31 in this.tables)
    {
      if (this.tables.hasOwnProperty(iter31))
      {
        iter31 = this.tables[iter31];
        output.writeString(iter31);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Where = module.exports.Where = function(args) {
  this.type = null;
  this.eq = null;
  this.ne = null;
  this.gt = null;
  this.gte = null;
  this.lt = null;
  this.lte = null;
  this.between = null;
  this.notBetween = null;
  this.any = null;
  this.notAny = null;
  this.like = null;
  this.notLike = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.eq !== undefined && args.eq !== null) {
      this.eq = args.eq;
    }
    if (args.ne !== undefined && args.ne !== null) {
      this.ne = args.ne;
    }
    if (args.gt !== undefined && args.gt !== null) {
      this.gt = args.gt;
    }
    if (args.gte !== undefined && args.gte !== null) {
      this.gte = args.gte;
    }
    if (args.lt !== undefined && args.lt !== null) {
      this.lt = args.lt;
    }
    if (args.lte !== undefined && args.lte !== null) {
      this.lte = args.lte;
    }
    if (args.between !== undefined && args.between !== null) {
      this.between = Thrift.copyList(args.between, [null]);
    }
    if (args.notBetween !== undefined && args.notBetween !== null) {
      this.notBetween = Thrift.copyList(args.notBetween, [null]);
    }
    if (args.any !== undefined && args.any !== null) {
      this.any = Thrift.copyList(args.any, [null]);
    }
    if (args.notAny !== undefined && args.notAny !== null) {
      this.notAny = Thrift.copyList(args.notAny, [null]);
    }
    if (args.like !== undefined && args.like !== null) {
      this.like = args.like;
    }
    if (args.notLike !== undefined && args.notLike !== null) {
      this.notLike = args.notLike;
    }
  }
};
Where.prototype = {};
Where.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eq = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ne = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.gt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gte = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lte = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.between = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = input.readString();
          this.between.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size39 = 0;
        var _rtmp343;
        this.notBetween = [];
        var _etype42 = 0;
        _rtmp343 = input.readListBegin();
        _etype42 = _rtmp343.etype;
        _size39 = _rtmp343.size;
        for (var _i44 = 0; _i44 < _size39; ++_i44)
        {
          var elem45 = null;
          elem45 = input.readString();
          this.notBetween.push(elem45);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size46 = 0;
        var _rtmp350;
        this.any = [];
        var _etype49 = 0;
        _rtmp350 = input.readListBegin();
        _etype49 = _rtmp350.etype;
        _size46 = _rtmp350.size;
        for (var _i51 = 0; _i51 < _size46; ++_i51)
        {
          var elem52 = null;
          elem52 = input.readString();
          this.any.push(elem52);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size53 = 0;
        var _rtmp357;
        this.notAny = [];
        var _etype56 = 0;
        _rtmp357 = input.readListBegin();
        _etype56 = _rtmp357.etype;
        _size53 = _rtmp357.size;
        for (var _i58 = 0; _i58 < _size53; ++_i58)
        {
          var elem59 = null;
          elem59 = input.readString();
          this.notAny.push(elem59);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.like = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.notLike = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Where.prototype.write = function(output) {
  output.writeStructBegin('Where');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.eq !== null && this.eq !== undefined) {
    output.writeFieldBegin('eq', Thrift.Type.STRING, 2);
    output.writeString(this.eq);
    output.writeFieldEnd();
  }
  if (this.ne !== null && this.ne !== undefined) {
    output.writeFieldBegin('ne', Thrift.Type.STRING, 3);
    output.writeString(this.ne);
    output.writeFieldEnd();
  }
  if (this.gt !== null && this.gt !== undefined) {
    output.writeFieldBegin('gt', Thrift.Type.STRING, 4);
    output.writeString(this.gt);
    output.writeFieldEnd();
  }
  if (this.gte !== null && this.gte !== undefined) {
    output.writeFieldBegin('gte', Thrift.Type.STRING, 5);
    output.writeString(this.gte);
    output.writeFieldEnd();
  }
  if (this.lt !== null && this.lt !== undefined) {
    output.writeFieldBegin('lt', Thrift.Type.STRING, 6);
    output.writeString(this.lt);
    output.writeFieldEnd();
  }
  if (this.lte !== null && this.lte !== undefined) {
    output.writeFieldBegin('lte', Thrift.Type.STRING, 7);
    output.writeString(this.lte);
    output.writeFieldEnd();
  }
  if (this.between !== null && this.between !== undefined) {
    output.writeFieldBegin('between', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.between.length);
    for (var iter60 in this.between)
    {
      if (this.between.hasOwnProperty(iter60))
      {
        iter60 = this.between[iter60];
        output.writeString(iter60);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notBetween !== null && this.notBetween !== undefined) {
    output.writeFieldBegin('notBetween', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.notBetween.length);
    for (var iter61 in this.notBetween)
    {
      if (this.notBetween.hasOwnProperty(iter61))
      {
        iter61 = this.notBetween[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.any !== null && this.any !== undefined) {
    output.writeFieldBegin('any', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.any.length);
    for (var iter62 in this.any)
    {
      if (this.any.hasOwnProperty(iter62))
      {
        iter62 = this.any[iter62];
        output.writeString(iter62);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notAny !== null && this.notAny !== undefined) {
    output.writeFieldBegin('notAny', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.notAny.length);
    for (var iter63 in this.notAny)
    {
      if (this.notAny.hasOwnProperty(iter63))
      {
        iter63 = this.notAny[iter63];
        output.writeString(iter63);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.like !== null && this.like !== undefined) {
    output.writeFieldBegin('like', Thrift.Type.STRING, 12);
    output.writeString(this.like);
    output.writeFieldEnd();
  }
  if (this.notLike !== null && this.notLike !== undefined) {
    output.writeFieldBegin('notLike', Thrift.Type.STRING, 13);
    output.writeString(this.notLike);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AbstractSql = module.exports.AbstractSql = function(args) {
  this.selects = null;
  this.where = null;
  this.order = null;
  this.group = null;
  this.limit = null;
  this.left_join = null;
  this.inner_join = null;
  if (args) {
    if (args.selects !== undefined && args.selects !== null) {
      this.selects = Thrift.copyList(args.selects, [null]);
    }
    if (args.where !== undefined && args.where !== null) {
      this.where = Thrift.copyMap(args.where, [ttypes.Where]);
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = Thrift.copyList(args.limit, [null]);
    }
    if (args.left_join !== undefined && args.left_join !== null) {
      this.left_join = Thrift.copyMap(args.left_join, [Thrift.copyMap, null]);
    }
    if (args.inner_join !== undefined && args.inner_join !== null) {
      this.inner_join = Thrift.copyMap(args.inner_join, [Thrift.copyMap, null]);
    }
  }
};
AbstractSql.prototype = {};
AbstractSql.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.selects = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = input.readString();
          this.selects.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size71 = 0;
        var _rtmp375;
        this.where = {};
        var _ktype72 = 0;
        var _vtype73 = 0;
        _rtmp375 = input.readMapBegin();
        _ktype72 = _rtmp375.ktype;
        _vtype73 = _rtmp375.vtype;
        _size71 = _rtmp375.size;
        for (var _i76 = 0; _i76 < _size71; ++_i76)
        {
          var key77 = null;
          var val78 = null;
          key77 = input.readString();
          val78 = new ttypes.Where();
          val78.read(input);
          this.where[key77] = val78;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size79 = 0;
        var _rtmp383;
        this.limit = [];
        var _etype82 = 0;
        _rtmp383 = input.readListBegin();
        _etype82 = _rtmp383.etype;
        _size79 = _rtmp383.size;
        for (var _i84 = 0; _i84 < _size79; ++_i84)
        {
          var elem85 = null;
          elem85 = input.readI32();
          this.limit.push(elem85);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.MAP) {
        var _size86 = 0;
        var _rtmp390;
        this.left_join = {};
        var _ktype87 = 0;
        var _vtype88 = 0;
        _rtmp390 = input.readMapBegin();
        _ktype87 = _rtmp390.ktype;
        _vtype88 = _rtmp390.vtype;
        _size86 = _rtmp390.size;
        for (var _i91 = 0; _i91 < _size86; ++_i91)
        {
          var key92 = null;
          var val93 = null;
          key92 = input.readString();
          var _size94 = 0;
          var _rtmp398;
          val93 = {};
          var _ktype95 = 0;
          var _vtype96 = 0;
          _rtmp398 = input.readMapBegin();
          _ktype95 = _rtmp398.ktype;
          _vtype96 = _rtmp398.vtype;
          _size94 = _rtmp398.size;
          for (var _i99 = 0; _i99 < _size94; ++_i99)
          {
            var key100 = null;
            var val101 = null;
            key100 = input.readString();
            val101 = input.readString();
            val93[key100] = val101;
          }
          input.readMapEnd();
          this.left_join[key92] = val93;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.MAP) {
        var _size102 = 0;
        var _rtmp3106;
        this.inner_join = {};
        var _ktype103 = 0;
        var _vtype104 = 0;
        _rtmp3106 = input.readMapBegin();
        _ktype103 = _rtmp3106.ktype;
        _vtype104 = _rtmp3106.vtype;
        _size102 = _rtmp3106.size;
        for (var _i107 = 0; _i107 < _size102; ++_i107)
        {
          var key108 = null;
          var val109 = null;
          key108 = input.readString();
          var _size110 = 0;
          var _rtmp3114;
          val109 = {};
          var _ktype111 = 0;
          var _vtype112 = 0;
          _rtmp3114 = input.readMapBegin();
          _ktype111 = _rtmp3114.ktype;
          _vtype112 = _rtmp3114.vtype;
          _size110 = _rtmp3114.size;
          for (var _i115 = 0; _i115 < _size110; ++_i115)
          {
            var key116 = null;
            var val117 = null;
            key116 = input.readString();
            val117 = input.readString();
            val109[key116] = val117;
          }
          input.readMapEnd();
          this.inner_join[key108] = val109;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AbstractSql.prototype.write = function(output) {
  output.writeStructBegin('AbstractSql');
  if (this.selects !== null && this.selects !== undefined) {
    output.writeFieldBegin('selects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.selects.length);
    for (var iter118 in this.selects)
    {
      if (this.selects.hasOwnProperty(iter118))
      {
        iter118 = this.selects[iter118];
        output.writeString(iter118);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.where));
    for (var kiter119 in this.where)
    {
      if (this.where.hasOwnProperty(kiter119))
      {
        var viter120 = this.where[kiter119];
        output.writeString(kiter119);
        viter120.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRING, 3);
    output.writeString(this.order);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 4);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.limit.length);
    for (var iter121 in this.limit)
    {
      if (this.limit.hasOwnProperty(iter121))
      {
        iter121 = this.limit[iter121];
        output.writeI32(iter121);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.left_join !== null && this.left_join !== undefined) {
    output.writeFieldBegin('left_join', Thrift.Type.MAP, 6);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.left_join));
    for (var kiter122 in this.left_join)
    {
      if (this.left_join.hasOwnProperty(kiter122))
      {
        var viter123 = this.left_join[kiter122];
        output.writeString(kiter122);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter123));
        for (var kiter124 in viter123)
        {
          if (viter123.hasOwnProperty(kiter124))
          {
            var viter125 = viter123[kiter124];
            output.writeString(kiter124);
            output.writeString(viter125);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.inner_join !== null && this.inner_join !== undefined) {
    output.writeFieldBegin('inner_join', Thrift.Type.MAP, 7);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.MAP, Thrift.objectLength(this.inner_join));
    for (var kiter126 in this.inner_join)
    {
      if (this.inner_join.hasOwnProperty(kiter126))
      {
        var viter127 = this.inner_join[kiter126];
        output.writeString(kiter126);
        output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(viter127));
        for (var kiter128 in viter127)
        {
          if (viter127.hasOwnProperty(kiter128))
          {
            var viter129 = viter127[kiter128];
            output.writeString(kiter128);
            output.writeString(viter129);
          }
        }
        output.writeMapEnd();
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TopicOption = module.exports.TopicOption = function(args) {
  this.to_id = null;
  this.to_context = null;
  this.to_topic_id = null;
  this.to_create_time = null;
  this.to_update_time = null;
  if (args) {
    if (args.to_id !== undefined && args.to_id !== null) {
      this.to_id = args.to_id;
    }
    if (args.to_context !== undefined && args.to_context !== null) {
      this.to_context = args.to_context;
    }
    if (args.to_topic_id !== undefined && args.to_topic_id !== null) {
      this.to_topic_id = args.to_topic_id;
    }
    if (args.to_create_time !== undefined && args.to_create_time !== null) {
      this.to_create_time = args.to_create_time;
    }
    if (args.to_update_time !== undefined && args.to_update_time !== null) {
      this.to_update_time = args.to_update_time;
    }
  }
};
TopicOption.prototype = {};
TopicOption.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.to_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to_context = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.to_topic_id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.to_create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.to_update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TopicOption.prototype.write = function(output) {
  output.writeStructBegin('TopicOption');
  if (this.to_id !== null && this.to_id !== undefined) {
    output.writeFieldBegin('to_id', Thrift.Type.I32, 1);
    output.writeI32(this.to_id);
    output.writeFieldEnd();
  }
  if (this.to_context !== null && this.to_context !== undefined) {
    output.writeFieldBegin('to_context', Thrift.Type.STRING, 2);
    output.writeString(this.to_context);
    output.writeFieldEnd();
  }
  if (this.to_topic_id !== null && this.to_topic_id !== undefined) {
    output.writeFieldBegin('to_topic_id', Thrift.Type.I32, 3);
    output.writeI32(this.to_topic_id);
    output.writeFieldEnd();
  }
  if (this.to_create_time !== null && this.to_create_time !== undefined) {
    output.writeFieldBegin('to_create_time', Thrift.Type.STRING, 4);
    output.writeString(this.to_create_time);
    output.writeFieldEnd();
  }
  if (this.to_update_time !== null && this.to_update_time !== undefined) {
    output.writeFieldBegin('to_update_time', Thrift.Type.STRING, 5);
    output.writeString(this.to_update_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Topic = module.exports.Topic = function(args) {
  this.id = null;
  this.title = null;
  this.type = null;
  this.analysis = null;
  this.correct_answer = null;
  this.score = null;
  this.create_time = null;
  this.update_time = null;
  this.topicOptions = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.title !== undefined && args.title !== null) {
      this.title = args.title;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.analysis !== undefined && args.analysis !== null) {
      this.analysis = args.analysis;
    }
    if (args.correct_answer !== undefined && args.correct_answer !== null) {
      this.correct_answer = args.correct_answer;
    }
    if (args.score !== undefined && args.score !== null) {
      this.score = args.score;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.topicOptions !== undefined && args.topicOptions !== null) {
      this.topicOptions = Thrift.copyList(args.topicOptions, [ttypes.TopicOption]);
    }
  }
};
Topic.prototype = {};
Topic.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.title = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.analysis = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.correct_answer = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.score = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size130 = 0;
        var _rtmp3134;
        this.topicOptions = [];
        var _etype133 = 0;
        _rtmp3134 = input.readListBegin();
        _etype133 = _rtmp3134.etype;
        _size130 = _rtmp3134.size;
        for (var _i135 = 0; _i135 < _size130; ++_i135)
        {
          var elem136 = null;
          elem136 = new ttypes.TopicOption();
          elem136.read(input);
          this.topicOptions.push(elem136);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Topic.prototype.write = function(output) {
  output.writeStructBegin('Topic');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.title !== null && this.title !== undefined) {
    output.writeFieldBegin('title', Thrift.Type.STRING, 2);
    output.writeString(this.title);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.analysis !== null && this.analysis !== undefined) {
    output.writeFieldBegin('analysis', Thrift.Type.STRING, 4);
    output.writeString(this.analysis);
    output.writeFieldEnd();
  }
  if (this.correct_answer !== null && this.correct_answer !== undefined) {
    output.writeFieldBegin('correct_answer', Thrift.Type.STRING, 5);
    output.writeString(this.correct_answer);
    output.writeFieldEnd();
  }
  if (this.score !== null && this.score !== undefined) {
    output.writeFieldBegin('score', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.score);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 7);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 8);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.topicOptions !== null && this.topicOptions !== undefined) {
    output.writeFieldBegin('topicOptions', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRUCT, this.topicOptions.length);
    for (var iter137 in this.topicOptions)
    {
      if (this.topicOptions.hasOwnProperty(iter137))
      {
        iter137 = this.topicOptions[iter137];
        iter137.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TopicBank = module.exports.TopicBank = function(args) {
  this.id = null;
  this.name = null;
  this.type = null;
  this.create_time = null;
  this.update_time = null;
  this.topics = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.create_time !== undefined && args.create_time !== null) {
      this.create_time = args.create_time;
    }
    if (args.update_time !== undefined && args.update_time !== null) {
      this.update_time = args.update_time;
    }
    if (args.topics !== undefined && args.topics !== null) {
      this.topics = Thrift.copyList(args.topics, [ttypes.Topic]);
    }
  }
};
TopicBank.prototype = {};
TopicBank.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.create_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.update_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size138 = 0;
        var _rtmp3142;
        this.topics = [];
        var _etype141 = 0;
        _rtmp3142 = input.readListBegin();
        _etype141 = _rtmp3142.etype;
        _size138 = _rtmp3142.size;
        for (var _i143 = 0; _i143 < _size138; ++_i143)
        {
          var elem144 = null;
          elem144 = new ttypes.Topic();
          elem144.read(input);
          this.topics.push(elem144);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TopicBank.prototype.write = function(output) {
  output.writeStructBegin('TopicBank');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 3);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.create_time !== null && this.create_time !== undefined) {
    output.writeFieldBegin('create_time', Thrift.Type.STRING, 4);
    output.writeString(this.create_time);
    output.writeFieldEnd();
  }
  if (this.update_time !== null && this.update_time !== undefined) {
    output.writeFieldBegin('update_time', Thrift.Type.STRING, 5);
    output.writeString(this.update_time);
    output.writeFieldEnd();
  }
  if (this.topics !== null && this.topics !== undefined) {
    output.writeFieldBegin('topics', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.topics.length);
    for (var iter145 in this.topics)
    {
      if (this.topics.hasOwnProperty(iter145))
      {
        iter145 = this.topics[iter145];
        iter145.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

