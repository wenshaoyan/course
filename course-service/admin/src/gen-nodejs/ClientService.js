//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var bean_ttypes = require('./bean_types');


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var ClientService_clientInsert_args = function(args) {
  this.clientSide = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
  }
};
ClientService_clientInsert_args.prototype = {};
ClientService_clientInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientInsert_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientInsert_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_clientInsert_result.prototype = {};
ClientService_clientInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientInsert_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientUpdate_args = function(args) {
  this.clientSide = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
  }
};
ClientService_clientUpdate_args.prototype = {};
ClientService_clientUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientUpdate_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientUpdate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_clientUpdate_result.prototype = {};
ClientService_clientUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientRemove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_clientRemove_args.prototype = {};
ClientService_clientRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientRemove_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientRemove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientRemove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_clientRemove_result.prototype = {};
ClientService_clientRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientRemove_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientRemove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientFindById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_clientFindById_args.prototype = {};
ClientService_clientFindById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientFindById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientFindById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientFindById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.ClientSide(args.success);
    }
  }
};
ClientService_clientFindById_result.prototype = {};
ClientService_clientFindById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.ClientSide();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientFindById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientFindById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectAll_args = function(args) {
};
ClientService_clientSelectAll_args.prototype = {};
ClientService_clientSelectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectAll_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelectAll_result.prototype = {};
ClientService_clientSelectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new bean_ttypes.ClientSide();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectAll_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelect_args = function(args) {
  this.clientSide = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
  }
};
ClientService_clientSelect_args.prototype = {};
ClientService_clientSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelect_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelect_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelect_result.prototype = {};
ClientService_clientSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new bean_ttypes.ClientSide();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelect_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectQuery_args = function(args) {
  this.clientSide = null;
  this.query = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
  }
};
ClientService_clientSelectQuery_args.prototype = {};
ClientService_clientSelectQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectQuery_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectQuery_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelectQuery_result.prototype = {};
ClientService_clientSelectQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new bean_ttypes.ClientSide();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectQuery_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectCustom_args = function(args) {
  this.clientSide = null;
  this.custom = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = new bean_ttypes.Custom(args.custom);
    }
  }
};
ClientService_clientSelectCustom_args.prototype = {};
ClientService_clientSelectCustom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new bean_ttypes.Custom();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectCustom_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectCustom_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 2);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectCustom_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelectCustom_result.prototype = {};
ClientService_clientSelectCustom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size128 = 0;
        var _rtmp3132;
        this.success = [];
        var _etype131 = 0;
        _rtmp3132 = input.readListBegin();
        _etype131 = _rtmp3132.etype;
        _size128 = _rtmp3132.size;
        for (var _i133 = 0; _i133 < _size128; ++_i133)
        {
          var elem134 = null;
          elem134 = new bean_ttypes.ClientSide();
          elem134.read(input);
          this.success.push(elem134);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectCustom_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectCustom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter135 in this.success)
    {
      if (this.success.hasOwnProperty(iter135))
      {
        iter135 = this.success[iter135];
        iter135.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectQueryCustom_args = function(args) {
  this.clientSide = null;
  this.query = null;
  this.custom = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
    if (args.custom !== undefined && args.custom !== null) {
      this.custom = new bean_ttypes.Custom(args.custom);
    }
  }
};
ClientService_clientSelectQueryCustom_args.prototype = {};
ClientService_clientSelectQueryCustom_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.custom = new bean_ttypes.Custom();
        this.custom.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectQueryCustom_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectQueryCustom_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  if (this.custom !== null && this.custom !== undefined) {
    output.writeFieldBegin('custom', Thrift.Type.STRUCT, 3);
    this.custom.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectQueryCustom_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelectQueryCustom_result.prototype = {};
ClientService_clientSelectQueryCustom_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size136 = 0;
        var _rtmp3140;
        this.success = [];
        var _etype139 = 0;
        _rtmp3140 = input.readListBegin();
        _etype139 = _rtmp3140.etype;
        _size136 = _rtmp3140.size;
        for (var _i141 = 0; _i141 < _size136; ++_i141)
        {
          var elem142 = null;
          elem142 = new bean_ttypes.ClientSide();
          elem142.read(input);
          this.success.push(elem142);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectQueryCustom_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectQueryCustom_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter143 in this.success)
    {
      if (this.success.hasOwnProperty(iter143))
      {
        iter143 = this.success[iter143];
        iter143.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionInsert_args = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = new bean_ttypes.Version(args.version);
    }
  }
};
ClientService_versionInsert_args.prototype = {};
ClientService_versionInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.version = new bean_ttypes.Version();
        this.version.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionInsert_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionInsert_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRUCT, 1);
    this.version.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionInsert_result.prototype = {};
ClientService_versionInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionInsert_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionUpdate_args = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = new bean_ttypes.Version(args.version);
    }
  }
};
ClientService_versionUpdate_args.prototype = {};
ClientService_versionUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.version = new bean_ttypes.Version();
        this.version.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionUpdate_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRUCT, 1);
    this.version.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionUpdate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionUpdate_result.prototype = {};
ClientService_versionUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionRemove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_versionRemove_args.prototype = {};
ClientService_versionRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionRemove_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionRemove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionRemove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionRemove_result.prototype = {};
ClientService_versionRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionRemove_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionRemove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionFindById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_versionFindById_args.prototype = {};
ClientService_versionFindById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionFindById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionFindById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionFindById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.Version(args.success);
    }
  }
};
ClientService_versionFindById_result.prototype = {};
ClientService_versionFindById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.Version();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionFindById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionFindById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelectAll_args = function(args) {
};
ClientService_versionSelectAll_args.prototype = {};
ClientService_versionSelectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelectAll_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Version]);
    }
  }
};
ClientService_versionSelectAll_result.prototype = {};
ClientService_versionSelectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size144 = 0;
        var _rtmp3148;
        this.success = [];
        var _etype147 = 0;
        _rtmp3148 = input.readListBegin();
        _etype147 = _rtmp3148.etype;
        _size144 = _rtmp3148.size;
        for (var _i149 = 0; _i149 < _size144; ++_i149)
        {
          var elem150 = null;
          elem150 = new bean_ttypes.Version();
          elem150.read(input);
          this.success.push(elem150);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelectAll_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter151 in this.success)
    {
      if (this.success.hasOwnProperty(iter151))
      {
        iter151 = this.success[iter151];
        iter151.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelect_args = function(args) {
  this.version = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = new bean_ttypes.Version(args.version);
    }
  }
};
ClientService_versionSelect_args.prototype = {};
ClientService_versionSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.version = new bean_ttypes.Version();
        this.version.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelect_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelect_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRUCT, 1);
    this.version.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Version]);
    }
  }
};
ClientService_versionSelect_result.prototype = {};
ClientService_versionSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size152 = 0;
        var _rtmp3156;
        this.success = [];
        var _etype155 = 0;
        _rtmp3156 = input.readListBegin();
        _etype155 = _rtmp3156.etype;
        _size152 = _rtmp3156.size;
        for (var _i157 = 0; _i157 < _size152; ++_i157)
        {
          var elem158 = null;
          elem158 = new bean_ttypes.Version();
          elem158.read(input);
          this.success.push(elem158);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelect_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter159 in this.success)
    {
      if (this.success.hasOwnProperty(iter159))
      {
        iter159 = this.success[iter159];
        iter159.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelectQuery_args = function(args) {
  this.version = null;
  this.query = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = new bean_ttypes.Version(args.version);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
  }
};
ClientService_versionSelectQuery_args.prototype = {};
ClientService_versionSelectQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.version = new bean_ttypes.Version();
        this.version.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelectQuery_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelectQuery_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRUCT, 1);
    this.version.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelectQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Version]);
    }
  }
};
ClientService_versionSelectQuery_result.prototype = {};
ClientService_versionSelectQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size160 = 0;
        var _rtmp3164;
        this.success = [];
        var _etype163 = 0;
        _rtmp3164 = input.readListBegin();
        _etype163 = _rtmp3164.etype;
        _size160 = _rtmp3164.size;
        for (var _i165 = 0; _i165 < _size160; ++_i165)
        {
          var elem166 = null;
          elem166 = new bean_ttypes.Version();
          elem166.read(input);
          this.success.push(elem166);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelectQuery_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelectQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter167 in this.success)
    {
      if (this.success.hasOwnProperty(iter167))
      {
        iter167 = this.success[iter167];
        iter167.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionCountSelectQuery_args = function(args) {
  this.version = null;
  this.query = null;
  if (args) {
    if (args.version !== undefined && args.version !== null) {
      this.version = new bean_ttypes.Version(args.version);
    }
    if (args.query !== undefined && args.query !== null) {
      this.query = new bean_ttypes.Query(args.query);
    }
  }
};
ClientService_versionCountSelectQuery_args.prototype = {};
ClientService_versionCountSelectQuery_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.version = new bean_ttypes.Version();
        this.version.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.query = new bean_ttypes.Query();
        this.query.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionCountSelectQuery_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionCountSelectQuery_args');
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.STRUCT, 1);
    this.version.write(output);
    output.writeFieldEnd();
  }
  if (this.query !== null && this.query !== undefined) {
    output.writeFieldBegin('query', Thrift.Type.STRUCT, 2);
    this.query.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionCountSelectQuery_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionCountSelectQuery_result.prototype = {};
ClientService_versionCountSelectQuery_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionCountSelectQuery_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionCountSelectQuery_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ClientServiceClient.prototype = {};
ClientServiceClient.prototype.seqid = function() { return this._seqid; };
ClientServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ClientServiceClient.prototype.clientInsert = function(clientSide, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientInsert(clientSide);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientInsert(clientSide);
  }
};

ClientServiceClient.prototype.send_clientInsert = function(clientSide) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientInsert_args();
  args.clientSide = clientSide;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientInsert failed: unknown result');
};
ClientServiceClient.prototype.clientUpdate = function(clientSide, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientUpdate(clientSide);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientUpdate(clientSide);
  }
};

ClientServiceClient.prototype.send_clientUpdate = function(clientSide) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientUpdate_args();
  args.clientSide = clientSide;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientUpdate failed: unknown result');
};
ClientServiceClient.prototype.clientRemove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientRemove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientRemove(id);
  }
};

ClientServiceClient.prototype.send_clientRemove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientRemove', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientRemove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientRemove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientRemove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientRemove failed: unknown result');
};
ClientServiceClient.prototype.clientFindById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientFindById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientFindById(id);
  }
};

ClientServiceClient.prototype.send_clientFindById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientFindById', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientFindById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientFindById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientFindById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientFindById failed: unknown result');
};
ClientServiceClient.prototype.clientSelectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelectAll();
  }
};

ClientServiceClient.prototype.send_clientSelectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelectAll failed: unknown result');
};
ClientServiceClient.prototype.clientSelect = function(clientSide, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelect(clientSide);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelect(clientSide);
  }
};

ClientServiceClient.prototype.send_clientSelect = function(clientSide) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelect_args();
  args.clientSide = clientSide;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelect failed: unknown result');
};
ClientServiceClient.prototype.clientSelectQuery = function(clientSide, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelectQuery(clientSide, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelectQuery(clientSide, query);
  }
};

ClientServiceClient.prototype.send_clientSelectQuery = function(clientSide, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelectQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelectQuery_args();
  args.clientSide = clientSide;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelectQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelectQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelectQuery failed: unknown result');
};
ClientServiceClient.prototype.clientSelectCustom = function(clientSide, custom, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelectCustom(clientSide, custom);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelectCustom(clientSide, custom);
  }
};

ClientServiceClient.prototype.send_clientSelectCustom = function(clientSide, custom) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelectCustom', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelectCustom_args();
  args.clientSide = clientSide;
  args.custom = custom;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelectCustom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelectCustom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelectCustom failed: unknown result');
};
ClientServiceClient.prototype.clientSelectQueryCustom = function(clientSide, query, custom, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelectQueryCustom(clientSide, query, custom);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelectQueryCustom(clientSide, query, custom);
  }
};

ClientServiceClient.prototype.send_clientSelectQueryCustom = function(clientSide, query, custom) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelectQueryCustom', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelectQueryCustom_args();
  args.clientSide = clientSide;
  args.query = query;
  args.custom = custom;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelectQueryCustom = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelectQueryCustom_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelectQueryCustom failed: unknown result');
};
ClientServiceClient.prototype.versionInsert = function(version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionInsert(version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionInsert(version);
  }
};

ClientServiceClient.prototype.send_versionInsert = function(version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionInsert_args();
  args.version = version;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionInsert failed: unknown result');
};
ClientServiceClient.prototype.versionUpdate = function(version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionUpdate(version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionUpdate(version);
  }
};

ClientServiceClient.prototype.send_versionUpdate = function(version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionUpdate_args();
  args.version = version;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionUpdate failed: unknown result');
};
ClientServiceClient.prototype.versionRemove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionRemove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionRemove(id);
  }
};

ClientServiceClient.prototype.send_versionRemove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionRemove', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionRemove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionRemove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionRemove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionRemove failed: unknown result');
};
ClientServiceClient.prototype.versionFindById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionFindById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionFindById(id);
  }
};

ClientServiceClient.prototype.send_versionFindById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionFindById', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionFindById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionFindById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionFindById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionFindById failed: unknown result');
};
ClientServiceClient.prototype.versionSelectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionSelectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionSelectAll();
  }
};

ClientServiceClient.prototype.send_versionSelectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionSelectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionSelectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionSelectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionSelectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionSelectAll failed: unknown result');
};
ClientServiceClient.prototype.versionSelect = function(version, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionSelect(version);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionSelect(version);
  }
};

ClientServiceClient.prototype.send_versionSelect = function(version) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionSelect_args();
  args.version = version;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionSelect failed: unknown result');
};
ClientServiceClient.prototype.versionSelectQuery = function(version, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionSelectQuery(version, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionSelectQuery(version, query);
  }
};

ClientServiceClient.prototype.send_versionSelectQuery = function(version, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionSelectQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionSelectQuery_args();
  args.version = version;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionSelectQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionSelectQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionSelectQuery failed: unknown result');
};
ClientServiceClient.prototype.versionCountSelectQuery = function(version, query, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionCountSelectQuery(version, query);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionCountSelectQuery(version, query);
  }
};

ClientServiceClient.prototype.send_versionCountSelectQuery = function(version, query) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionCountSelectQuery', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionCountSelectQuery_args();
  args.version = version;
  args.query = query;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionCountSelectQuery = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionCountSelectQuery_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionCountSelectQuery failed: unknown result');
};
var ClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ClientServiceProcessor.prototype.process_clientInsert = function(seqid, input, output) {
  var args = new ClientService_clientInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientInsert.length === 1) {
    Q.fcall(this._handler.clientInsert, args.clientSide)
      .then(function(result) {
        var result_obj = new ClientService_clientInsert_result({success: result});
        output.writeMessageBegin("clientInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientInsert(args.clientSide, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientUpdate = function(seqid, input, output) {
  var args = new ClientService_clientUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientUpdate.length === 1) {
    Q.fcall(this._handler.clientUpdate, args.clientSide)
      .then(function(result) {
        var result_obj = new ClientService_clientUpdate_result({success: result});
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientUpdate(args.clientSide, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientRemove = function(seqid, input, output) {
  var args = new ClientService_clientRemove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientRemove.length === 1) {
    Q.fcall(this._handler.clientRemove, args.id)
      .then(function(result) {
        var result_obj = new ClientService_clientRemove_result({success: result});
        output.writeMessageBegin("clientRemove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientRemove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientRemove(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientRemove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientRemove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientRemove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientFindById = function(seqid, input, output) {
  var args = new ClientService_clientFindById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientFindById.length === 1) {
    Q.fcall(this._handler.clientFindById, args.id)
      .then(function(result) {
        var result_obj = new ClientService_clientFindById_result({success: result});
        output.writeMessageBegin("clientFindById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientFindById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientFindById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientFindById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientFindById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientFindById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelectAll = function(seqid, input, output) {
  var args = new ClientService_clientSelectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelectAll.length === 0) {
    Q.fcall(this._handler.clientSelectAll)
      .then(function(result) {
        var result_obj = new ClientService_clientSelectAll_result({success: result});
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelect = function(seqid, input, output) {
  var args = new ClientService_clientSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelect.length === 1) {
    Q.fcall(this._handler.clientSelect, args.clientSide)
      .then(function(result) {
        var result_obj = new ClientService_clientSelect_result({success: result});
        output.writeMessageBegin("clientSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelect(args.clientSide, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelectQuery = function(seqid, input, output) {
  var args = new ClientService_clientSelectQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelectQuery.length === 2) {
    Q.fcall(this._handler.clientSelectQuery, args.clientSide, args.query)
      .then(function(result) {
        var result_obj = new ClientService_clientSelectQuery_result({success: result});
        output.writeMessageBegin("clientSelectQuery", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectQuery", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelectQuery(args.clientSide, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelectQuery_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelectQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelectCustom = function(seqid, input, output) {
  var args = new ClientService_clientSelectCustom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelectCustom.length === 2) {
    Q.fcall(this._handler.clientSelectCustom, args.clientSide, args.custom)
      .then(function(result) {
        var result_obj = new ClientService_clientSelectCustom_result({success: result});
        output.writeMessageBegin("clientSelectCustom", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectCustom", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelectCustom(args.clientSide, args.custom, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelectCustom_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelectCustom", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectCustom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelectQueryCustom = function(seqid, input, output) {
  var args = new ClientService_clientSelectQueryCustom_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelectQueryCustom.length === 3) {
    Q.fcall(this._handler.clientSelectQueryCustom, args.clientSide, args.query, args.custom)
      .then(function(result) {
        var result_obj = new ClientService_clientSelectQueryCustom_result({success: result});
        output.writeMessageBegin("clientSelectQueryCustom", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectQueryCustom", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelectQueryCustom(args.clientSide, args.query, args.custom, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelectQueryCustom_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelectQueryCustom", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectQueryCustom", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionInsert = function(seqid, input, output) {
  var args = new ClientService_versionInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionInsert.length === 1) {
    Q.fcall(this._handler.versionInsert, args.version)
      .then(function(result) {
        var result_obj = new ClientService_versionInsert_result({success: result});
        output.writeMessageBegin("versionInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionInsert(args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionUpdate = function(seqid, input, output) {
  var args = new ClientService_versionUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionUpdate.length === 1) {
    Q.fcall(this._handler.versionUpdate, args.version)
      .then(function(result) {
        var result_obj = new ClientService_versionUpdate_result({success: result});
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionUpdate(args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionRemove = function(seqid, input, output) {
  var args = new ClientService_versionRemove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionRemove.length === 1) {
    Q.fcall(this._handler.versionRemove, args.id)
      .then(function(result) {
        var result_obj = new ClientService_versionRemove_result({success: result});
        output.writeMessageBegin("versionRemove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionRemove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionRemove(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionRemove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionRemove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionRemove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionFindById = function(seqid, input, output) {
  var args = new ClientService_versionFindById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionFindById.length === 1) {
    Q.fcall(this._handler.versionFindById, args.id)
      .then(function(result) {
        var result_obj = new ClientService_versionFindById_result({success: result});
        output.writeMessageBegin("versionFindById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionFindById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionFindById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionFindById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionFindById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionFindById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionSelectAll = function(seqid, input, output) {
  var args = new ClientService_versionSelectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionSelectAll.length === 0) {
    Q.fcall(this._handler.versionSelectAll)
      .then(function(result) {
        var result_obj = new ClientService_versionSelectAll_result({success: result});
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionSelectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionSelectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionSelect = function(seqid, input, output) {
  var args = new ClientService_versionSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionSelect.length === 1) {
    Q.fcall(this._handler.versionSelect, args.version)
      .then(function(result) {
        var result_obj = new ClientService_versionSelect_result({success: result});
        output.writeMessageBegin("versionSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionSelect(args.version, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionSelectQuery = function(seqid, input, output) {
  var args = new ClientService_versionSelectQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionSelectQuery.length === 2) {
    Q.fcall(this._handler.versionSelectQuery, args.version, args.query)
      .then(function(result) {
        var result_obj = new ClientService_versionSelectQuery_result({success: result});
        output.writeMessageBegin("versionSelectQuery", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelectQuery", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionSelectQuery(args.version, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionSelectQuery_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionSelectQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelectQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionCountSelectQuery = function(seqid, input, output) {
  var args = new ClientService_versionCountSelectQuery_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionCountSelectQuery.length === 2) {
    Q.fcall(this._handler.versionCountSelectQuery, args.version, args.query)
      .then(function(result) {
        var result_obj = new ClientService_versionCountSelectQuery_result({success: result});
        output.writeMessageBegin("versionCountSelectQuery", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionCountSelectQuery", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionCountSelectQuery(args.version, args.query, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionCountSelectQuery_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionCountSelectQuery", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionCountSelectQuery", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
