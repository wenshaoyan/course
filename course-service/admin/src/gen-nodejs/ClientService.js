//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var bean_ttypes = require('./bean_types');


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var ClientService_clientInsert_args = function(args) {
  this.clientSide = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
  }
};
ClientService_clientInsert_args.prototype = {};
ClientService_clientInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientInsert_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientInsert_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_clientInsert_result.prototype = {};
ClientService_clientInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientInsert_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientUpdate_args = function(args) {
  this.clientSide = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
  }
};
ClientService_clientUpdate_args.prototype = {};
ClientService_clientUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientUpdate_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientUpdate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_clientUpdate_result.prototype = {};
ClientService_clientUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientRemove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_clientRemove_args.prototype = {};
ClientService_clientRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientRemove_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientRemove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientRemove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_clientRemove_result.prototype = {};
ClientService_clientRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientRemove_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientRemove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientFindById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_clientFindById_args.prototype = {};
ClientService_clientFindById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientFindById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientFindById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientFindById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.ClientSide(args.success);
    }
  }
};
ClientService_clientFindById_result.prototype = {};
ClientService_clientFindById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.ClientSide();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientFindById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientFindById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectAll_args = function(args) {
};
ClientService_clientSelectAll_args.prototype = {};
ClientService_clientSelectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectAll_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelectAll_result.prototype = {};
ClientService_clientSelectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = new bean_ttypes.ClientSide();
          elem54.read(input);
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelectAll_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        iter55.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelect_args = function(args) {
  this.clientSide = null;
  if (args) {
    if (args.clientSide !== undefined && args.clientSide !== null) {
      this.clientSide = new bean_ttypes.ClientSide(args.clientSide);
    }
  }
};
ClientService_clientSelect_args.prototype = {};
ClientService_clientSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientSide = new bean_ttypes.ClientSide();
        this.clientSide.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelect_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelect_args');
  if (this.clientSide !== null && this.clientSide !== undefined) {
    output.writeFieldBegin('clientSide', Thrift.Type.STRUCT, 1);
    this.clientSide.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_clientSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientSide]);
    }
  }
};
ClientService_clientSelect_result.prototype = {};
ClientService_clientSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size56 = 0;
        var _rtmp360;
        this.success = [];
        var _etype59 = 0;
        _rtmp360 = input.readListBegin();
        _etype59 = _rtmp360.etype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var elem62 = null;
          elem62 = new bean_ttypes.ClientSide();
          elem62.read(input);
          this.success.push(elem62);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_clientSelect_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_clientSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter63 in this.success)
    {
      if (this.success.hasOwnProperty(iter63))
      {
        iter63 = this.success[iter63];
        iter63.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionInsert_args = function(args) {
  this.clientVersion = null;
  if (args) {
    if (args.clientVersion !== undefined && args.clientVersion !== null) {
      this.clientVersion = new bean_ttypes.ClientVersion(args.clientVersion);
    }
  }
};
ClientService_versionInsert_args.prototype = {};
ClientService_versionInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientVersion = new bean_ttypes.ClientVersion();
        this.clientVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionInsert_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionInsert_args');
  if (this.clientVersion !== null && this.clientVersion !== undefined) {
    output.writeFieldBegin('clientVersion', Thrift.Type.STRUCT, 1);
    this.clientVersion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionInsert_result.prototype = {};
ClientService_versionInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionInsert_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionUpdate_args = function(args) {
  this.clientVersion = null;
  if (args) {
    if (args.clientVersion !== undefined && args.clientVersion !== null) {
      this.clientVersion = new bean_ttypes.ClientVersion(args.clientVersion);
    }
  }
};
ClientService_versionUpdate_args.prototype = {};
ClientService_versionUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientVersion = new bean_ttypes.ClientVersion();
        this.clientVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionUpdate_args');
  if (this.clientVersion !== null && this.clientVersion !== undefined) {
    output.writeFieldBegin('clientVersion', Thrift.Type.STRUCT, 1);
    this.clientVersion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionUpdate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionUpdate_result.prototype = {};
ClientService_versionUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionRemove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_versionRemove_args.prototype = {};
ClientService_versionRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionRemove_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionRemove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionRemove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_versionRemove_result.prototype = {};
ClientService_versionRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionRemove_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionRemove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionFindById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
ClientService_versionFindById_args.prototype = {};
ClientService_versionFindById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionFindById_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionFindById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionFindById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.ClientVersion(args.success);
    }
  }
};
ClientService_versionFindById_result.prototype = {};
ClientService_versionFindById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.ClientVersion();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionFindById_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionFindById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelectAll_args = function(args) {
};
ClientService_versionSelectAll_args.prototype = {};
ClientService_versionSelectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelectAll_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientVersion]);
    }
  }
};
ClientService_versionSelectAll_result.prototype = {};
ClientService_versionSelectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size64 = 0;
        var _rtmp368;
        this.success = [];
        var _etype67 = 0;
        _rtmp368 = input.readListBegin();
        _etype67 = _rtmp368.etype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var elem70 = null;
          elem70 = new bean_ttypes.ClientVersion();
          elem70.read(input);
          this.success.push(elem70);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelectAll_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter71 in this.success)
    {
      if (this.success.hasOwnProperty(iter71))
      {
        iter71 = this.success[iter71];
        iter71.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelect_args = function(args) {
  this.clientVersion = null;
  if (args) {
    if (args.clientVersion !== undefined && args.clientVersion !== null) {
      this.clientVersion = new bean_ttypes.ClientVersion(args.clientVersion);
    }
  }
};
ClientService_versionSelect_args.prototype = {};
ClientService_versionSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.clientVersion = new bean_ttypes.ClientVersion();
        this.clientVersion.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelect_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelect_args');
  if (this.clientVersion !== null && this.clientVersion !== undefined) {
    output.writeFieldBegin('clientVersion', Thrift.Type.STRUCT, 1);
    this.clientVersion.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientService_versionSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.ClientVersion]);
    }
  }
};
ClientService_versionSelect_result.prototype = {};
ClientService_versionSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size72 = 0;
        var _rtmp376;
        this.success = [];
        var _etype75 = 0;
        _rtmp376 = input.readListBegin();
        _etype75 = _rtmp376.etype;
        _size72 = _rtmp376.size;
        for (var _i77 = 0; _i77 < _size72; ++_i77)
        {
          var elem78 = null;
          elem78 = new bean_ttypes.ClientVersion();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_versionSelect_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_versionSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success)
    {
      if (this.success.hasOwnProperty(iter79))
      {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ClientServiceClient.prototype = {};
ClientServiceClient.prototype.seqid = function() { return this._seqid; };
ClientServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
ClientServiceClient.prototype.clientInsert = function(clientSide, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientInsert(clientSide);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientInsert(clientSide);
  }
};

ClientServiceClient.prototype.send_clientInsert = function(clientSide) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientInsert_args();
  args.clientSide = clientSide;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientInsert failed: unknown result');
};
ClientServiceClient.prototype.clientUpdate = function(clientSide, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientUpdate(clientSide);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientUpdate(clientSide);
  }
};

ClientServiceClient.prototype.send_clientUpdate = function(clientSide) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientUpdate_args();
  args.clientSide = clientSide;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientUpdate failed: unknown result');
};
ClientServiceClient.prototype.clientRemove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientRemove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientRemove(id);
  }
};

ClientServiceClient.prototype.send_clientRemove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientRemove', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientRemove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientRemove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientRemove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientRemove failed: unknown result');
};
ClientServiceClient.prototype.clientFindById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientFindById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientFindById(id);
  }
};

ClientServiceClient.prototype.send_clientFindById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientFindById', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientFindById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientFindById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientFindById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientFindById failed: unknown result');
};
ClientServiceClient.prototype.clientSelectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelectAll();
  }
};

ClientServiceClient.prototype.send_clientSelectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelectAll failed: unknown result');
};
ClientServiceClient.prototype.clientSelect = function(clientSide, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clientSelect(clientSide);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clientSelect(clientSide);
  }
};

ClientServiceClient.prototype.send_clientSelect = function(clientSide) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('clientSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_clientSelect_args();
  args.clientSide = clientSide;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_clientSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_clientSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('clientSelect failed: unknown result');
};
ClientServiceClient.prototype.versionInsert = function(clientVersion, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionInsert(clientVersion);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionInsert(clientVersion);
  }
};

ClientServiceClient.prototype.send_versionInsert = function(clientVersion) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionInsert_args();
  args.clientVersion = clientVersion;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionInsert failed: unknown result');
};
ClientServiceClient.prototype.versionUpdate = function(clientVersion, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionUpdate(clientVersion);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionUpdate(clientVersion);
  }
};

ClientServiceClient.prototype.send_versionUpdate = function(clientVersion) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionUpdate_args();
  args.clientVersion = clientVersion;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionUpdate failed: unknown result');
};
ClientServiceClient.prototype.versionRemove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionRemove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionRemove(id);
  }
};

ClientServiceClient.prototype.send_versionRemove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionRemove', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionRemove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionRemove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionRemove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionRemove failed: unknown result');
};
ClientServiceClient.prototype.versionFindById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionFindById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionFindById(id);
  }
};

ClientServiceClient.prototype.send_versionFindById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionFindById', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionFindById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionFindById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionFindById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionFindById failed: unknown result');
};
ClientServiceClient.prototype.versionSelectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionSelectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionSelectAll();
  }
};

ClientServiceClient.prototype.send_versionSelectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionSelectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionSelectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionSelectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionSelectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionSelectAll failed: unknown result');
};
ClientServiceClient.prototype.versionSelect = function(clientVersion, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionSelect(clientVersion);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionSelect(clientVersion);
  }
};

ClientServiceClient.prototype.send_versionSelect = function(clientVersion) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_versionSelect_args();
  args.clientVersion = clientVersion;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_versionSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_versionSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionSelect failed: unknown result');
};
var ClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
ClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
ClientServiceProcessor.prototype.process_clientInsert = function(seqid, input, output) {
  var args = new ClientService_clientInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientInsert.length === 1) {
    Q.fcall(this._handler.clientInsert, args.clientSide)
      .then(function(result) {
        var result_obj = new ClientService_clientInsert_result({success: result});
        output.writeMessageBegin("clientInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientInsert(args.clientSide, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientUpdate = function(seqid, input, output) {
  var args = new ClientService_clientUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientUpdate.length === 1) {
    Q.fcall(this._handler.clientUpdate, args.clientSide)
      .then(function(result) {
        var result_obj = new ClientService_clientUpdate_result({success: result});
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientUpdate(args.clientSide, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientRemove = function(seqid, input, output) {
  var args = new ClientService_clientRemove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientRemove.length === 1) {
    Q.fcall(this._handler.clientRemove, args.id)
      .then(function(result) {
        var result_obj = new ClientService_clientRemove_result({success: result});
        output.writeMessageBegin("clientRemove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientRemove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientRemove(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientRemove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientRemove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientRemove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientFindById = function(seqid, input, output) {
  var args = new ClientService_clientFindById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientFindById.length === 1) {
    Q.fcall(this._handler.clientFindById, args.id)
      .then(function(result) {
        var result_obj = new ClientService_clientFindById_result({success: result});
        output.writeMessageBegin("clientFindById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientFindById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientFindById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientFindById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientFindById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientFindById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelectAll = function(seqid, input, output) {
  var args = new ClientService_clientSelectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelectAll.length === 0) {
    Q.fcall(this._handler.clientSelectAll)
      .then(function(result) {
        var result_obj = new ClientService_clientSelectAll_result({success: result});
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_clientSelect = function(seqid, input, output) {
  var args = new ClientService_clientSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clientSelect.length === 1) {
    Q.fcall(this._handler.clientSelect, args.clientSide)
      .then(function(result) {
        var result_obj = new ClientService_clientSelect_result({success: result});
        output.writeMessageBegin("clientSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.clientSelect(args.clientSide, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_clientSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clientSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clientSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionInsert = function(seqid, input, output) {
  var args = new ClientService_versionInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionInsert.length === 1) {
    Q.fcall(this._handler.versionInsert, args.clientVersion)
      .then(function(result) {
        var result_obj = new ClientService_versionInsert_result({success: result});
        output.writeMessageBegin("versionInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionInsert(args.clientVersion, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionUpdate = function(seqid, input, output) {
  var args = new ClientService_versionUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionUpdate.length === 1) {
    Q.fcall(this._handler.versionUpdate, args.clientVersion)
      .then(function(result) {
        var result_obj = new ClientService_versionUpdate_result({success: result});
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionUpdate(args.clientVersion, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionRemove = function(seqid, input, output) {
  var args = new ClientService_versionRemove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionRemove.length === 1) {
    Q.fcall(this._handler.versionRemove, args.id)
      .then(function(result) {
        var result_obj = new ClientService_versionRemove_result({success: result});
        output.writeMessageBegin("versionRemove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionRemove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionRemove(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionRemove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionRemove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionRemove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionFindById = function(seqid, input, output) {
  var args = new ClientService_versionFindById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionFindById.length === 1) {
    Q.fcall(this._handler.versionFindById, args.id)
      .then(function(result) {
        var result_obj = new ClientService_versionFindById_result({success: result});
        output.writeMessageBegin("versionFindById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionFindById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionFindById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionFindById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionFindById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionFindById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionSelectAll = function(seqid, input, output) {
  var args = new ClientService_versionSelectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionSelectAll.length === 0) {
    Q.fcall(this._handler.versionSelectAll)
      .then(function(result) {
        var result_obj = new ClientService_versionSelectAll_result({success: result});
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionSelectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionSelectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
ClientServiceProcessor.prototype.process_versionSelect = function(seqid, input, output) {
  var args = new ClientService_versionSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionSelect.length === 1) {
    Q.fcall(this._handler.versionSelect, args.clientVersion)
      .then(function(result) {
        var result_obj = new ClientService_versionSelect_result({success: result});
        output.writeMessageBegin("versionSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionSelect(args.clientVersion, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new ClientService_versionSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
