//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var bean_ttypes = require('./bean_types');


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var CourseService_courseInsert_args = function(args) {
  this.course = null;
  if (args) {
    if (args.course !== undefined && args.course !== null) {
      this.course = new bean_ttypes.Course(args.course);
    }
  }
};
CourseService_courseInsert_args.prototype = {};
CourseService_courseInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.course = new bean_ttypes.Course();
        this.course.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseInsert_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseInsert_args');
  if (this.course !== null && this.course !== undefined) {
    output.writeFieldBegin('course', Thrift.Type.STRUCT, 1);
    this.course.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CourseService_courseInsert_result.prototype = {};
CourseService_courseInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseInsert_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseUpdate_args = function(args) {
  this.course = null;
  if (args) {
    if (args.course !== undefined && args.course !== null) {
      this.course = new bean_ttypes.Course(args.course);
    }
  }
};
CourseService_courseUpdate_args.prototype = {};
CourseService_courseUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.course = new bean_ttypes.Course();
        this.course.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseUpdate_args');
  if (this.course !== null && this.course !== undefined) {
    output.writeFieldBegin('course', Thrift.Type.STRUCT, 1);
    this.course.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseUpdate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CourseService_courseUpdate_result.prototype = {};
CourseService_courseUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseRemove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CourseService_courseRemove_args.prototype = {};
CourseService_courseRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseRemove_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseRemove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseRemove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CourseService_courseRemove_result.prototype = {};
CourseService_courseRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseRemove_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseRemove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseFindById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CourseService_courseFindById_args.prototype = {};
CourseService_courseFindById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseFindById_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseFindById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseFindById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.Course(args.success);
    }
  }
};
CourseService_courseFindById_result.prototype = {};
CourseService_courseFindById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.Course();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseFindById_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseFindById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseSelectAll_args = function(args) {
};
CourseService_courseSelectAll_args.prototype = {};
CourseService_courseSelectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseSelectAll_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseSelectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseSelectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Course]);
    }
  }
};
CourseService_courseSelectAll_result.prototype = {};
CourseService_courseSelectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size96 = 0;
        var _rtmp3100;
        this.success = [];
        var _etype99 = 0;
        _rtmp3100 = input.readListBegin();
        _etype99 = _rtmp3100.etype;
        _size96 = _rtmp3100.size;
        for (var _i101 = 0; _i101 < _size96; ++_i101)
        {
          var elem102 = null;
          elem102 = new bean_ttypes.Course();
          elem102.read(input);
          this.success.push(elem102);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseSelectAll_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseSelectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter103 in this.success)
    {
      if (this.success.hasOwnProperty(iter103))
      {
        iter103 = this.success[iter103];
        iter103.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseSelect_args = function(args) {
  this.course = null;
  if (args) {
    if (args.course !== undefined && args.course !== null) {
      this.course = new bean_ttypes.Course(args.course);
    }
  }
};
CourseService_courseSelect_args.prototype = {};
CourseService_courseSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.course = new bean_ttypes.Course();
        this.course.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseSelect_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseSelect_args');
  if (this.course !== null && this.course !== undefined) {
    output.writeFieldBegin('course', Thrift.Type.STRUCT, 1);
    this.course.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_courseSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Course]);
    }
  }
};
CourseService_courseSelect_result.prototype = {};
CourseService_courseSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size104 = 0;
        var _rtmp3108;
        this.success = [];
        var _etype107 = 0;
        _rtmp3108 = input.readListBegin();
        _etype107 = _rtmp3108.etype;
        _size104 = _rtmp3108.size;
        for (var _i109 = 0; _i109 < _size104; ++_i109)
        {
          var elem110 = null;
          elem110 = new bean_ttypes.Course();
          elem110.read(input);
          this.success.push(elem110);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_courseSelect_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_courseSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter111 in this.success)
    {
      if (this.success.hasOwnProperty(iter111))
      {
        iter111 = this.success[iter111];
        iter111.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoInsert_args = function(args) {
  this.video = null;
  if (args) {
    if (args.video !== undefined && args.video !== null) {
      this.video = new bean_ttypes.Video(args.video);
    }
  }
};
CourseService_videoInsert_args.prototype = {};
CourseService_videoInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.video = new bean_ttypes.Video();
        this.video.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoInsert_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoInsert_args');
  if (this.video !== null && this.video !== undefined) {
    output.writeFieldBegin('video', Thrift.Type.STRUCT, 1);
    this.video.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CourseService_videoInsert_result.prototype = {};
CourseService_videoInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoInsert_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoUpdate_args = function(args) {
  this.video = null;
  if (args) {
    if (args.video !== undefined && args.video !== null) {
      this.video = new bean_ttypes.Video(args.video);
    }
  }
};
CourseService_videoUpdate_args.prototype = {};
CourseService_videoUpdate_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.video = new bean_ttypes.Video();
        this.video.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoUpdate_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoUpdate_args');
  if (this.video !== null && this.video !== undefined) {
    output.writeFieldBegin('video', Thrift.Type.STRUCT, 1);
    this.video.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoUpdate_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CourseService_videoUpdate_result.prototype = {};
CourseService_videoUpdate_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoUpdate_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoUpdate_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoRemove_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CourseService_videoRemove_args.prototype = {};
CourseService_videoRemove_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoRemove_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoRemove_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoRemove_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CourseService_videoRemove_result.prototype = {};
CourseService_videoRemove_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoRemove_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoRemove_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_versionFindById_args = function(args) {
  this.id = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
CourseService_versionFindById_args.prototype = {};
CourseService_versionFindById_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_versionFindById_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_versionFindById_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_versionFindById_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new bean_ttypes.Video(args.success);
    }
  }
};
CourseService_versionFindById_result.prototype = {};
CourseService_versionFindById_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new bean_ttypes.Video();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_versionFindById_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_versionFindById_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoSelectAll_args = function(args) {
};
CourseService_videoSelectAll_args.prototype = {};
CourseService_videoSelectAll_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoSelectAll_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoSelectAll_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoSelectAll_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Video]);
    }
  }
};
CourseService_videoSelectAll_result.prototype = {};
CourseService_videoSelectAll_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size112 = 0;
        var _rtmp3116;
        this.success = [];
        var _etype115 = 0;
        _rtmp3116 = input.readListBegin();
        _etype115 = _rtmp3116.etype;
        _size112 = _rtmp3116.size;
        for (var _i117 = 0; _i117 < _size112; ++_i117)
        {
          var elem118 = null;
          elem118 = new bean_ttypes.Video();
          elem118.read(input);
          this.success.push(elem118);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoSelectAll_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoSelectAll_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter119 in this.success)
    {
      if (this.success.hasOwnProperty(iter119))
      {
        iter119 = this.success[iter119];
        iter119.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoSelect_args = function(args) {
  this.video = null;
  if (args) {
    if (args.video !== undefined && args.video !== null) {
      this.video = new bean_ttypes.Video(args.video);
    }
  }
};
CourseService_videoSelect_args.prototype = {};
CourseService_videoSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.video = new bean_ttypes.Video();
        this.video.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoSelect_args.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoSelect_args');
  if (this.video !== null && this.video !== undefined) {
    output.writeFieldBegin('video', Thrift.Type.STRUCT, 1);
    this.video.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseService_videoSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Video]);
    }
  }
};
CourseService_videoSelect_result.prototype = {};
CourseService_videoSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size120 = 0;
        var _rtmp3124;
        this.success = [];
        var _etype123 = 0;
        _rtmp3124 = input.readListBegin();
        _etype123 = _rtmp3124.etype;
        _size120 = _rtmp3124.size;
        for (var _i125 = 0; _i125 < _size120; ++_i125)
        {
          var elem126 = null;
          elem126 = new bean_ttypes.Video();
          elem126.read(input);
          this.success.push(elem126);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CourseService_videoSelect_result.prototype.write = function(output) {
  output.writeStructBegin('CourseService_videoSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter127 in this.success)
    {
      if (this.success.hasOwnProperty(iter127))
      {
        iter127 = this.success[iter127];
        iter127.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CourseServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CourseServiceClient.prototype = {};
CourseServiceClient.prototype.seqid = function() { return this._seqid; };
CourseServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
CourseServiceClient.prototype.courseInsert = function(course, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_courseInsert(course);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_courseInsert(course);
  }
};

CourseServiceClient.prototype.send_courseInsert = function(course) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('courseInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_courseInsert_args();
  args.course = course;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_courseInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_courseInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('courseInsert failed: unknown result');
};
CourseServiceClient.prototype.courseUpdate = function(course, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_courseUpdate(course);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_courseUpdate(course);
  }
};

CourseServiceClient.prototype.send_courseUpdate = function(course) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('courseUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_courseUpdate_args();
  args.course = course;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_courseUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_courseUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('courseUpdate failed: unknown result');
};
CourseServiceClient.prototype.courseRemove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_courseRemove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_courseRemove(id);
  }
};

CourseServiceClient.prototype.send_courseRemove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('courseRemove', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_courseRemove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_courseRemove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_courseRemove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('courseRemove failed: unknown result');
};
CourseServiceClient.prototype.courseFindById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_courseFindById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_courseFindById(id);
  }
};

CourseServiceClient.prototype.send_courseFindById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('courseFindById', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_courseFindById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_courseFindById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_courseFindById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('courseFindById failed: unknown result');
};
CourseServiceClient.prototype.courseSelectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_courseSelectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_courseSelectAll();
  }
};

CourseServiceClient.prototype.send_courseSelectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('courseSelectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_courseSelectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_courseSelectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_courseSelectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('courseSelectAll failed: unknown result');
};
CourseServiceClient.prototype.courseSelect = function(course, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_courseSelect(course);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_courseSelect(course);
  }
};

CourseServiceClient.prototype.send_courseSelect = function(course) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('courseSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_courseSelect_args();
  args.course = course;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_courseSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_courseSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('courseSelect failed: unknown result');
};
CourseServiceClient.prototype.videoInsert = function(video, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_videoInsert(video);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_videoInsert(video);
  }
};

CourseServiceClient.prototype.send_videoInsert = function(video) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('videoInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_videoInsert_args();
  args.video = video;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_videoInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_videoInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('videoInsert failed: unknown result');
};
CourseServiceClient.prototype.videoUpdate = function(video, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_videoUpdate(video);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_videoUpdate(video);
  }
};

CourseServiceClient.prototype.send_videoUpdate = function(video) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('videoUpdate', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_videoUpdate_args();
  args.video = video;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_videoUpdate = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_videoUpdate_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('videoUpdate failed: unknown result');
};
CourseServiceClient.prototype.videoRemove = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_videoRemove(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_videoRemove(id);
  }
};

CourseServiceClient.prototype.send_videoRemove = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('videoRemove', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_videoRemove_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_videoRemove = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_videoRemove_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('videoRemove failed: unknown result');
};
CourseServiceClient.prototype.versionFindById = function(id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_versionFindById(id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_versionFindById(id);
  }
};

CourseServiceClient.prototype.send_versionFindById = function(id) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('versionFindById', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_versionFindById_args();
  args.id = id;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_versionFindById = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_versionFindById_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('versionFindById failed: unknown result');
};
CourseServiceClient.prototype.videoSelectAll = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_videoSelectAll();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_videoSelectAll();
  }
};

CourseServiceClient.prototype.send_videoSelectAll = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('videoSelectAll', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_videoSelectAll_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_videoSelectAll = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_videoSelectAll_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('videoSelectAll failed: unknown result');
};
CourseServiceClient.prototype.videoSelect = function(video, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_videoSelect(video);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_videoSelect(video);
  }
};

CourseServiceClient.prototype.send_videoSelect = function(video) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('videoSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new CourseService_videoSelect_args();
  args.video = video;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CourseServiceClient.prototype.recv_videoSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CourseService_videoSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('videoSelect failed: unknown result');
};
var CourseServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
CourseServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
CourseServiceProcessor.prototype.process_courseInsert = function(seqid, input, output) {
  var args = new CourseService_courseInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.courseInsert.length === 1) {
    Q.fcall(this._handler.courseInsert, args.course)
      .then(function(result) {
        var result_obj = new CourseService_courseInsert_result({success: result});
        output.writeMessageBegin("courseInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.courseInsert(args.course, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_courseInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("courseInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_courseUpdate = function(seqid, input, output) {
  var args = new CourseService_courseUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.courseUpdate.length === 1) {
    Q.fcall(this._handler.courseUpdate, args.course)
      .then(function(result) {
        var result_obj = new CourseService_courseUpdate_result({success: result});
        output.writeMessageBegin("courseUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseUpdate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.courseUpdate(args.course, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_courseUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("courseUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_courseRemove = function(seqid, input, output) {
  var args = new CourseService_courseRemove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.courseRemove.length === 1) {
    Q.fcall(this._handler.courseRemove, args.id)
      .then(function(result) {
        var result_obj = new CourseService_courseRemove_result({success: result});
        output.writeMessageBegin("courseRemove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseRemove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.courseRemove(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_courseRemove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("courseRemove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseRemove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_courseFindById = function(seqid, input, output) {
  var args = new CourseService_courseFindById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.courseFindById.length === 1) {
    Q.fcall(this._handler.courseFindById, args.id)
      .then(function(result) {
        var result_obj = new CourseService_courseFindById_result({success: result});
        output.writeMessageBegin("courseFindById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseFindById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.courseFindById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_courseFindById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("courseFindById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseFindById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_courseSelectAll = function(seqid, input, output) {
  var args = new CourseService_courseSelectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.courseSelectAll.length === 0) {
    Q.fcall(this._handler.courseSelectAll)
      .then(function(result) {
        var result_obj = new CourseService_courseSelectAll_result({success: result});
        output.writeMessageBegin("courseSelectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseSelectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.courseSelectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_courseSelectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("courseSelectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseSelectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_courseSelect = function(seqid, input, output) {
  var args = new CourseService_courseSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.courseSelect.length === 1) {
    Q.fcall(this._handler.courseSelect, args.course)
      .then(function(result) {
        var result_obj = new CourseService_courseSelect_result({success: result});
        output.writeMessageBegin("courseSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.courseSelect(args.course, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_courseSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("courseSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("courseSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_videoInsert = function(seqid, input, output) {
  var args = new CourseService_videoInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.videoInsert.length === 1) {
    Q.fcall(this._handler.videoInsert, args.video)
      .then(function(result) {
        var result_obj = new CourseService_videoInsert_result({success: result});
        output.writeMessageBegin("videoInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.videoInsert(args.video, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_videoInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("videoInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_videoUpdate = function(seqid, input, output) {
  var args = new CourseService_videoUpdate_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.videoUpdate.length === 1) {
    Q.fcall(this._handler.videoUpdate, args.video)
      .then(function(result) {
        var result_obj = new CourseService_videoUpdate_result({success: result});
        output.writeMessageBegin("videoUpdate", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoUpdate", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.videoUpdate(args.video, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_videoUpdate_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("videoUpdate", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoUpdate", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_videoRemove = function(seqid, input, output) {
  var args = new CourseService_videoRemove_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.videoRemove.length === 1) {
    Q.fcall(this._handler.videoRemove, args.id)
      .then(function(result) {
        var result_obj = new CourseService_videoRemove_result({success: result});
        output.writeMessageBegin("videoRemove", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoRemove", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.videoRemove(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_videoRemove_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("videoRemove", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoRemove", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_versionFindById = function(seqid, input, output) {
  var args = new CourseService_versionFindById_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.versionFindById.length === 1) {
    Q.fcall(this._handler.versionFindById, args.id)
      .then(function(result) {
        var result_obj = new CourseService_versionFindById_result({success: result});
        output.writeMessageBegin("versionFindById", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionFindById", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.versionFindById(args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_versionFindById_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("versionFindById", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("versionFindById", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_videoSelectAll = function(seqid, input, output) {
  var args = new CourseService_videoSelectAll_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.videoSelectAll.length === 0) {
    Q.fcall(this._handler.videoSelectAll)
      .then(function(result) {
        var result_obj = new CourseService_videoSelectAll_result({success: result});
        output.writeMessageBegin("videoSelectAll", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoSelectAll", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.videoSelectAll(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_videoSelectAll_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("videoSelectAll", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoSelectAll", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CourseServiceProcessor.prototype.process_videoSelect = function(seqid, input, output) {
  var args = new CourseService_videoSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.videoSelect.length === 1) {
    Q.fcall(this._handler.videoSelect, args.video)
      .then(function(result) {
        var result_obj = new CourseService_videoSelect_result({success: result});
        output.writeMessageBegin("videoSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.videoSelect(args.video, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CourseService_videoSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("videoSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("videoSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
