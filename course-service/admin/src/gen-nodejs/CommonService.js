//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var bean_ttypes = require('./bean_types');


var ttypes = require('./service_types');
//HELPER FUNCTIONS AND STRUCTURES

var CommonService_topicOptionInsert_args = function(args) {
  this.topicOption = null;
  if (args) {
    if (args.topicOption !== undefined && args.topicOption !== null) {
      this.topicOption = new bean_ttypes.TopicOption(args.topicOption);
    }
  }
};
CommonService_topicOptionInsert_args.prototype = {};
CommonService_topicOptionInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.topicOption = new bean_ttypes.TopicOption();
        this.topicOption.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicOptionInsert_args.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicOptionInsert_args');
  if (this.topicOption !== null && this.topicOption !== undefined) {
    output.writeFieldBegin('topicOption', Thrift.Type.STRUCT, 1);
    this.topicOption.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicOptionInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CommonService_topicOptionInsert_result.prototype = {};
CommonService_topicOptionInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicOptionInsert_result.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicOptionInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicInsert_args = function(args) {
  this.topic = null;
  if (args) {
    if (args.topic !== undefined && args.topic !== null) {
      this.topic = new bean_ttypes.Topic(args.topic);
    }
  }
};
CommonService_topicInsert_args.prototype = {};
CommonService_topicInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.topic = new bean_ttypes.Topic();
        this.topic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicInsert_args.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicInsert_args');
  if (this.topic !== null && this.topic !== undefined) {
    output.writeFieldBegin('topic', Thrift.Type.STRUCT, 1);
    this.topic.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CommonService_topicInsert_result.prototype = {};
CommonService_topicInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicInsert_result.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicSelect_args = function(args) {
  this.topic = null;
  if (args) {
    if (args.topic !== undefined && args.topic !== null) {
      this.topic = new bean_ttypes.Topic(args.topic);
    }
  }
};
CommonService_topicSelect_args.prototype = {};
CommonService_topicSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.topic = new bean_ttypes.Topic();
        this.topic.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicSelect_args.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicSelect_args');
  if (this.topic !== null && this.topic !== undefined) {
    output.writeFieldBegin('topic', Thrift.Type.STRUCT, 1);
    this.topic.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.Topic]);
    }
  }
};
CommonService_topicSelect_result.prototype = {};
CommonService_topicSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size232 = 0;
        var _rtmp3236;
        this.success = [];
        var _etype235 = 0;
        _rtmp3236 = input.readListBegin();
        _etype235 = _rtmp3236.etype;
        _size232 = _rtmp3236.size;
        for (var _i237 = 0; _i237 < _size232; ++_i237)
        {
          var elem238 = null;
          elem238 = new bean_ttypes.Topic();
          elem238.read(input);
          this.success.push(elem238);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicSelect_result.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter239 in this.success)
    {
      if (this.success.hasOwnProperty(iter239))
      {
        iter239 = this.success[iter239];
        iter239.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicBankInsert_args = function(args) {
  this.topicBank = null;
  if (args) {
    if (args.topicBank !== undefined && args.topicBank !== null) {
      this.topicBank = new bean_ttypes.TopicBank(args.topicBank);
    }
  }
};
CommonService_topicBankInsert_args.prototype = {};
CommonService_topicBankInsert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.topicBank = new bean_ttypes.TopicBank();
        this.topicBank.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicBankInsert_args.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicBankInsert_args');
  if (this.topicBank !== null && this.topicBank !== undefined) {
    output.writeFieldBegin('topicBank', Thrift.Type.STRUCT, 1);
    this.topicBank.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicBankInsert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
CommonService_topicBankInsert_result.prototype = {};
CommonService_topicBankInsert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicBankInsert_result.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicBankInsert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicBankSelect_args = function(args) {
  this.topicBank = null;
  if (args) {
    if (args.topicBank !== undefined && args.topicBank !== null) {
      this.topicBank = new bean_ttypes.TopicBank(args.topicBank);
    }
  }
};
CommonService_topicBankSelect_args.prototype = {};
CommonService_topicBankSelect_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.topicBank = new bean_ttypes.TopicBank();
        this.topicBank.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicBankSelect_args.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicBankSelect_args');
  if (this.topicBank !== null && this.topicBank !== undefined) {
    output.writeFieldBegin('topicBank', Thrift.Type.STRUCT, 1);
    this.topicBank.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonService_topicBankSelect_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [bean_ttypes.TopicBank]);
    }
  }
};
CommonService_topicBankSelect_result.prototype = {};
CommonService_topicBankSelect_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size240 = 0;
        var _rtmp3244;
        this.success = [];
        var _etype243 = 0;
        _rtmp3244 = input.readListBegin();
        _etype243 = _rtmp3244.etype;
        _size240 = _rtmp3244.size;
        for (var _i245 = 0; _i245 < _size240; ++_i245)
        {
          var elem246 = null;
          elem246 = new bean_ttypes.TopicBank();
          elem246.read(input);
          this.success.push(elem246);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommonService_topicBankSelect_result.prototype.write = function(output) {
  output.writeStructBegin('CommonService_topicBankSelect_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter247 in this.success)
    {
      if (this.success.hasOwnProperty(iter247))
      {
        iter247 = this.success[iter247];
        iter247.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CommonServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
CommonServiceClient.prototype = {};
CommonServiceClient.prototype.seqid = function() { return this._seqid; };
CommonServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
CommonServiceClient.prototype.topicOptionInsert = function(topicOption, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_topicOptionInsert(topicOption);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_topicOptionInsert(topicOption);
  }
};

CommonServiceClient.prototype.send_topicOptionInsert = function(topicOption) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('topicOptionInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonService_topicOptionInsert_args();
  args.topicOption = topicOption;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServiceClient.prototype.recv_topicOptionInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonService_topicOptionInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('topicOptionInsert failed: unknown result');
};
CommonServiceClient.prototype.topicInsert = function(topic, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_topicInsert(topic);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_topicInsert(topic);
  }
};

CommonServiceClient.prototype.send_topicInsert = function(topic) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('topicInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonService_topicInsert_args();
  args.topic = topic;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServiceClient.prototype.recv_topicInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonService_topicInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('topicInsert failed: unknown result');
};
CommonServiceClient.prototype.topicSelect = function(topic, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_topicSelect(topic);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_topicSelect(topic);
  }
};

CommonServiceClient.prototype.send_topicSelect = function(topic) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('topicSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonService_topicSelect_args();
  args.topic = topic;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServiceClient.prototype.recv_topicSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonService_topicSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('topicSelect failed: unknown result');
};
CommonServiceClient.prototype.topicBankInsert = function(topicBank, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_topicBankInsert(topicBank);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_topicBankInsert(topicBank);
  }
};

CommonServiceClient.prototype.send_topicBankInsert = function(topicBank) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('topicBankInsert', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonService_topicBankInsert_args();
  args.topicBank = topicBank;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServiceClient.prototype.recv_topicBankInsert = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonService_topicBankInsert_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('topicBankInsert failed: unknown result');
};
CommonServiceClient.prototype.topicBankSelect = function(topicBank, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_topicBankSelect(topicBank);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_topicBankSelect(topicBank);
  }
};

CommonServiceClient.prototype.send_topicBankSelect = function(topicBank) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('topicBankSelect', Thrift.MessageType.CALL, this.seqid());
  var args = new CommonService_topicBankSelect_args();
  args.topicBank = topicBank;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

CommonServiceClient.prototype.recv_topicBankSelect = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new CommonService_topicBankSelect_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('topicBankSelect failed: unknown result');
};
var CommonServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
CommonServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
CommonServiceProcessor.prototype.process_topicOptionInsert = function(seqid, input, output) {
  var args = new CommonService_topicOptionInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.topicOptionInsert.length === 1) {
    Q.fcall(this._handler.topicOptionInsert, args.topicOption)
      .then(function(result) {
        var result_obj = new CommonService_topicOptionInsert_result({success: result});
        output.writeMessageBegin("topicOptionInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicOptionInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.topicOptionInsert(args.topicOption, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CommonService_topicOptionInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("topicOptionInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicOptionInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CommonServiceProcessor.prototype.process_topicInsert = function(seqid, input, output) {
  var args = new CommonService_topicInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.topicInsert.length === 1) {
    Q.fcall(this._handler.topicInsert, args.topic)
      .then(function(result) {
        var result_obj = new CommonService_topicInsert_result({success: result});
        output.writeMessageBegin("topicInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.topicInsert(args.topic, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CommonService_topicInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("topicInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CommonServiceProcessor.prototype.process_topicSelect = function(seqid, input, output) {
  var args = new CommonService_topicSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.topicSelect.length === 1) {
    Q.fcall(this._handler.topicSelect, args.topic)
      .then(function(result) {
        var result_obj = new CommonService_topicSelect_result({success: result});
        output.writeMessageBegin("topicSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.topicSelect(args.topic, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CommonService_topicSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("topicSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CommonServiceProcessor.prototype.process_topicBankInsert = function(seqid, input, output) {
  var args = new CommonService_topicBankInsert_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.topicBankInsert.length === 1) {
    Q.fcall(this._handler.topicBankInsert, args.topicBank)
      .then(function(result) {
        var result_obj = new CommonService_topicBankInsert_result({success: result});
        output.writeMessageBegin("topicBankInsert", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicBankInsert", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.topicBankInsert(args.topicBank, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CommonService_topicBankInsert_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("topicBankInsert", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicBankInsert", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
CommonServiceProcessor.prototype.process_topicBankSelect = function(seqid, input, output) {
  var args = new CommonService_topicBankSelect_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.topicBankSelect.length === 1) {
    Q.fcall(this._handler.topicBankSelect, args.topicBank)
      .then(function(result) {
        var result_obj = new CommonService_topicBankSelect_result({success: result});
        output.writeMessageBegin("topicBankSelect", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicBankSelect", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.topicBankSelect(args.topicBank, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new CommonService_topicBankSelect_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("topicBankSelect", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("topicBankSelect", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
