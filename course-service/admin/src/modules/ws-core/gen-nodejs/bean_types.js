//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
var Where = module.exports.Where = function(args) {
  this.type = null;
  this.eq = null;
  this.ne = null;
  this.gt = null;
  this.gte = null;
  this.lt = null;
  this.lte = null;
  this.between = null;
  this.notBetween = null;
  this.any = null;
  this.notAny = null;
  this.like = null;
  this.notLike = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.eq !== undefined && args.eq !== null) {
      this.eq = args.eq;
    }
    if (args.ne !== undefined && args.ne !== null) {
      this.ne = args.ne;
    }
    if (args.gt !== undefined && args.gt !== null) {
      this.gt = args.gt;
    }
    if (args.gte !== undefined && args.gte !== null) {
      this.gte = args.gte;
    }
    if (args.lt !== undefined && args.lt !== null) {
      this.lt = args.lt;
    }
    if (args.lte !== undefined && args.lte !== null) {
      this.lte = args.lte;
    }
    if (args.between !== undefined && args.between !== null) {
      this.between = Thrift.copyList(args.between, [null]);
    }
    if (args.notBetween !== undefined && args.notBetween !== null) {
      this.notBetween = Thrift.copyList(args.notBetween, [null]);
    }
    if (args.any !== undefined && args.any !== null) {
      this.any = Thrift.copyList(args.any, [null]);
    }
    if (args.notAny !== undefined && args.notAny !== null) {
      this.notAny = Thrift.copyList(args.notAny, [null]);
    }
    if (args.like !== undefined && args.like !== null) {
      this.like = args.like;
    }
    if (args.notLike !== undefined && args.notLike !== null) {
      this.notLike = args.notLike;
    }
  }
};
Where.prototype = {};
Where.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.eq = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.ne = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.gt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.gte = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.lt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.lte = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.between = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.between.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.notBetween = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = input.readString();
          this.notBetween.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.any = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString();
          this.any.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.notAny = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = input.readString();
          this.notAny.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.like = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.notLike = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Where.prototype.write = function(output) {
  output.writeStructBegin('Where');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.eq !== null && this.eq !== undefined) {
    output.writeFieldBegin('eq', Thrift.Type.STRING, 2);
    output.writeString(this.eq);
    output.writeFieldEnd();
  }
  if (this.ne !== null && this.ne !== undefined) {
    output.writeFieldBegin('ne', Thrift.Type.STRING, 3);
    output.writeString(this.ne);
    output.writeFieldEnd();
  }
  if (this.gt !== null && this.gt !== undefined) {
    output.writeFieldBegin('gt', Thrift.Type.STRING, 4);
    output.writeString(this.gt);
    output.writeFieldEnd();
  }
  if (this.gte !== null && this.gte !== undefined) {
    output.writeFieldBegin('gte', Thrift.Type.STRING, 5);
    output.writeString(this.gte);
    output.writeFieldEnd();
  }
  if (this.lt !== null && this.lt !== undefined) {
    output.writeFieldBegin('lt', Thrift.Type.STRING, 6);
    output.writeString(this.lt);
    output.writeFieldEnd();
  }
  if (this.lte !== null && this.lte !== undefined) {
    output.writeFieldBegin('lte', Thrift.Type.STRING, 7);
    output.writeString(this.lte);
    output.writeFieldEnd();
  }
  if (this.between !== null && this.between !== undefined) {
    output.writeFieldBegin('between', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.between.length);
    for (var iter28 in this.between)
    {
      if (this.between.hasOwnProperty(iter28))
      {
        iter28 = this.between[iter28];
        output.writeString(iter28);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notBetween !== null && this.notBetween !== undefined) {
    output.writeFieldBegin('notBetween', Thrift.Type.LIST, 9);
    output.writeListBegin(Thrift.Type.STRING, this.notBetween.length);
    for (var iter29 in this.notBetween)
    {
      if (this.notBetween.hasOwnProperty(iter29))
      {
        iter29 = this.notBetween[iter29];
        output.writeString(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.any !== null && this.any !== undefined) {
    output.writeFieldBegin('any', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRING, this.any.length);
    for (var iter30 in this.any)
    {
      if (this.any.hasOwnProperty(iter30))
      {
        iter30 = this.any[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.notAny !== null && this.notAny !== undefined) {
    output.writeFieldBegin('notAny', Thrift.Type.LIST, 11);
    output.writeListBegin(Thrift.Type.STRING, this.notAny.length);
    for (var iter31 in this.notAny)
    {
      if (this.notAny.hasOwnProperty(iter31))
      {
        iter31 = this.notAny[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.like !== null && this.like !== undefined) {
    output.writeFieldBegin('like', Thrift.Type.STRING, 12);
    output.writeString(this.like);
    output.writeFieldEnd();
  }
  if (this.notLike !== null && this.notLike !== undefined) {
    output.writeFieldBegin('notLike', Thrift.Type.STRING, 13);
    output.writeString(this.notLike);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Include = module.exports.Include = function(args) {
  this.association = null;
  this.isRequired = null;
  this.where = null;
  this.includes = null;
  if (args) {
    if (args.association !== undefined && args.association !== null) {
      this.association = args.association;
    }
    if (args.isRequired !== undefined && args.isRequired !== null) {
      this.isRequired = args.isRequired;
    }
    if (args.where !== undefined && args.where !== null) {
      this.where = new ttypes.Where(args.where);
    }
    if (args.includes !== undefined && args.includes !== null) {
      this.includes = Thrift.copyList(args.includes, [null]);
    }
  }
};
Include.prototype = {};
Include.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.association = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isRequired = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.where = new ttypes.Where();
        this.where.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.includes = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Include();
          elem38.read(input);
          this.includes.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Include.prototype.write = function(output) {
  output.writeStructBegin('Include');
  if (this.association !== null && this.association !== undefined) {
    output.writeFieldBegin('association', Thrift.Type.STRING, 1);
    output.writeString(this.association);
    output.writeFieldEnd();
  }
  if (this.isRequired !== null && this.isRequired !== undefined) {
    output.writeFieldBegin('isRequired', Thrift.Type.BOOL, 2);
    output.writeBool(this.isRequired);
    output.writeFieldEnd();
  }
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.STRUCT, 3);
    this.where.write(output);
    output.writeFieldEnd();
  }
  if (this.includes !== null && this.includes !== undefined) {
    output.writeFieldBegin('includes', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.includes.length);
    for (var iter39 in this.includes)
    {
      if (this.includes.hasOwnProperty(iter39))
      {
        iter39 = this.includes[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AbstractSql = module.exports.AbstractSql = function(args) {
  this.selects = null;
  this.where = null;
  this.order = null;
  this.group = null;
  this.limit = null;
  this.includes = null;
  this.mode = null;
  if (args) {
    if (args.selects !== undefined && args.selects !== null) {
      this.selects = Thrift.copyList(args.selects, [null]);
    }
    if (args.where !== undefined && args.where !== null) {
      this.where = Thrift.copyMap(args.where, [ttypes.Where]);
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.group !== undefined && args.group !== null) {
      this.group = args.group;
    }
    if (args.limit !== undefined && args.limit !== null) {
      this.limit = Thrift.copyList(args.limit, [null]);
    }
    if (args.includes !== undefined && args.includes !== null) {
      this.includes = Thrift.copyList(args.includes, [ttypes.Include]);
    }
    if (args.mode !== undefined && args.mode !== null) {
      this.mode = args.mode;
    }
  }
};
AbstractSql.prototype = {};
AbstractSql.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.selects = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.selects.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size47 = 0;
        var _rtmp351;
        this.where = {};
        var _ktype48 = 0;
        var _vtype49 = 0;
        _rtmp351 = input.readMapBegin();
        _ktype48 = _rtmp351.ktype;
        _vtype49 = _rtmp351.vtype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var key53 = null;
          var val54 = null;
          key53 = input.readString();
          val54 = new ttypes.Where();
          val54.read(input);
          this.where[key53] = val54;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.group = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size55 = 0;
        var _rtmp359;
        this.limit = [];
        var _etype58 = 0;
        _rtmp359 = input.readListBegin();
        _etype58 = _rtmp359.etype;
        _size55 = _rtmp359.size;
        for (var _i60 = 0; _i60 < _size55; ++_i60)
        {
          var elem61 = null;
          elem61 = input.readI32();
          this.limit.push(elem61);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.LIST) {
        var _size62 = 0;
        var _rtmp366;
        this.includes = [];
        var _etype65 = 0;
        _rtmp366 = input.readListBegin();
        _etype65 = _rtmp366.etype;
        _size62 = _rtmp366.size;
        for (var _i67 = 0; _i67 < _size62; ++_i67)
        {
          var elem68 = null;
          elem68 = new ttypes.Include();
          elem68.read(input);
          this.includes.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.mode = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AbstractSql.prototype.write = function(output) {
  output.writeStructBegin('AbstractSql');
  if (this.selects !== null && this.selects !== undefined) {
    output.writeFieldBegin('selects', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.selects.length);
    for (var iter69 in this.selects)
    {
      if (this.selects.hasOwnProperty(iter69))
      {
        iter69 = this.selects[iter69];
        output.writeString(iter69);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.where !== null && this.where !== undefined) {
    output.writeFieldBegin('where', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.where));
    for (var kiter70 in this.where)
    {
      if (this.where.hasOwnProperty(kiter70))
      {
        var viter71 = this.where[kiter70];
        output.writeString(kiter70);
        viter71.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRING, 3);
    output.writeString(this.order);
    output.writeFieldEnd();
  }
  if (this.group !== null && this.group !== undefined) {
    output.writeFieldBegin('group', Thrift.Type.STRING, 4);
    output.writeString(this.group);
    output.writeFieldEnd();
  }
  if (this.limit !== null && this.limit !== undefined) {
    output.writeFieldBegin('limit', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.I32, this.limit.length);
    for (var iter72 in this.limit)
    {
      if (this.limit.hasOwnProperty(iter72))
      {
        iter72 = this.limit[iter72];
        output.writeI32(iter72);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.includes !== null && this.includes !== undefined) {
    output.writeFieldBegin('includes', Thrift.Type.LIST, 6);
    output.writeListBegin(Thrift.Type.STRUCT, this.includes.length);
    for (var iter73 in this.includes)
    {
      if (this.includes.hasOwnProperty(iter73))
      {
        iter73 = this.includes[iter73];
        iter73.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.mode !== null && this.mode !== undefined) {
    output.writeFieldBegin('mode', Thrift.Type.STRING, 7);
    output.writeString(this.mode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

