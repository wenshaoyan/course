/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-27")
public class TopicOption implements org.apache.thrift.TBase<TopicOption, TopicOption._Fields>, java.io.Serializable, Cloneable, Comparable<TopicOption> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicOption");

  private static final org.apache.thrift.protocol.TField TO_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("to_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TO_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("to_context", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TO_TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("to_topic_id", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField TO_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("to_create_time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TO_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("to_update_time", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicOptionStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicOptionTupleSchemeFactory();

  public int to_id; // required
  public java.lang.String to_context; // required
  public int to_topic_id; // required
  public java.lang.String to_create_time; // required
  public java.lang.String to_update_time; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TO_ID((short)1, "to_id"),
    TO_CONTEXT((short)2, "to_context"),
    TO_TOPIC_ID((short)3, "to_topic_id"),
    TO_CREATE_TIME((short)4, "to_create_time"),
    TO_UPDATE_TIME((short)5, "to_update_time");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TO_ID
          return TO_ID;
        case 2: // TO_CONTEXT
          return TO_CONTEXT;
        case 3: // TO_TOPIC_ID
          return TO_TOPIC_ID;
        case 4: // TO_CREATE_TIME
          return TO_CREATE_TIME;
        case 5: // TO_UPDATE_TIME
          return TO_UPDATE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TO_ID_ISSET_ID = 0;
  private static final int __TO_TOPIC_ID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TO_ID, new org.apache.thrift.meta_data.FieldMetaData("to_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("to_context", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("to_topic_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TO_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("to_create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TO_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("to_update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicOption.class, metaDataMap);
  }

  public TopicOption() {
  }

  public TopicOption(
    int to_id,
    java.lang.String to_context,
    int to_topic_id,
    java.lang.String to_create_time,
    java.lang.String to_update_time)
  {
    this();
    this.to_id = to_id;
    setTo_idIsSet(true);
    this.to_context = to_context;
    this.to_topic_id = to_topic_id;
    setTo_topic_idIsSet(true);
    this.to_create_time = to_create_time;
    this.to_update_time = to_update_time;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicOption(TopicOption other) {
    __isset_bitfield = other.__isset_bitfield;
    this.to_id = other.to_id;
    if (other.isSetTo_context()) {
      this.to_context = other.to_context;
    }
    this.to_topic_id = other.to_topic_id;
    if (other.isSetTo_create_time()) {
      this.to_create_time = other.to_create_time;
    }
    if (other.isSetTo_update_time()) {
      this.to_update_time = other.to_update_time;
    }
  }

  public TopicOption deepCopy() {
    return new TopicOption(this);
  }

  @Override
  public void clear() {
    setTo_idIsSet(false);
    this.to_id = 0;
    this.to_context = null;
    setTo_topic_idIsSet(false);
    this.to_topic_id = 0;
    this.to_create_time = null;
    this.to_update_time = null;
  }

  public int getTo_id() {
    return this.to_id;
  }

  public TopicOption setTo_id(int to_id) {
    this.to_id = to_id;
    setTo_idIsSet(true);
    return this;
  }

  public void unsetTo_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TO_ID_ISSET_ID);
  }

  /** Returns true if field to_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TO_ID_ISSET_ID);
  }

  public void setTo_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TO_ID_ISSET_ID, value);
  }

  public java.lang.String getTo_context() {
    return this.to_context;
  }

  public TopicOption setTo_context(java.lang.String to_context) {
    this.to_context = to_context;
    return this;
  }

  public void unsetTo_context() {
    this.to_context = null;
  }

  /** Returns true if field to_context is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_context() {
    return this.to_context != null;
  }

  public void setTo_contextIsSet(boolean value) {
    if (!value) {
      this.to_context = null;
    }
  }

  public int getTo_topic_id() {
    return this.to_topic_id;
  }

  public TopicOption setTo_topic_id(int to_topic_id) {
    this.to_topic_id = to_topic_id;
    setTo_topic_idIsSet(true);
    return this;
  }

  public void unsetTo_topic_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TO_TOPIC_ID_ISSET_ID);
  }

  /** Returns true if field to_topic_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_topic_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TO_TOPIC_ID_ISSET_ID);
  }

  public void setTo_topic_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TO_TOPIC_ID_ISSET_ID, value);
  }

  public java.lang.String getTo_create_time() {
    return this.to_create_time;
  }

  public TopicOption setTo_create_time(java.lang.String to_create_time) {
    this.to_create_time = to_create_time;
    return this;
  }

  public void unsetTo_create_time() {
    this.to_create_time = null;
  }

  /** Returns true if field to_create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_create_time() {
    return this.to_create_time != null;
  }

  public void setTo_create_timeIsSet(boolean value) {
    if (!value) {
      this.to_create_time = null;
    }
  }

  public java.lang.String getTo_update_time() {
    return this.to_update_time;
  }

  public TopicOption setTo_update_time(java.lang.String to_update_time) {
    this.to_update_time = to_update_time;
    return this;
  }

  public void unsetTo_update_time() {
    this.to_update_time = null;
  }

  /** Returns true if field to_update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTo_update_time() {
    return this.to_update_time != null;
  }

  public void setTo_update_timeIsSet(boolean value) {
    if (!value) {
      this.to_update_time = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TO_ID:
      if (value == null) {
        unsetTo_id();
      } else {
        setTo_id((java.lang.Integer)value);
      }
      break;

    case TO_CONTEXT:
      if (value == null) {
        unsetTo_context();
      } else {
        setTo_context((java.lang.String)value);
      }
      break;

    case TO_TOPIC_ID:
      if (value == null) {
        unsetTo_topic_id();
      } else {
        setTo_topic_id((java.lang.Integer)value);
      }
      break;

    case TO_CREATE_TIME:
      if (value == null) {
        unsetTo_create_time();
      } else {
        setTo_create_time((java.lang.String)value);
      }
      break;

    case TO_UPDATE_TIME:
      if (value == null) {
        unsetTo_update_time();
      } else {
        setTo_update_time((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TO_ID:
      return getTo_id();

    case TO_CONTEXT:
      return getTo_context();

    case TO_TOPIC_ID:
      return getTo_topic_id();

    case TO_CREATE_TIME:
      return getTo_create_time();

    case TO_UPDATE_TIME:
      return getTo_update_time();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TO_ID:
      return isSetTo_id();
    case TO_CONTEXT:
      return isSetTo_context();
    case TO_TOPIC_ID:
      return isSetTo_topic_id();
    case TO_CREATE_TIME:
      return isSetTo_create_time();
    case TO_UPDATE_TIME:
      return isSetTo_update_time();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TopicOption)
      return this.equals((TopicOption)that);
    return false;
  }

  public boolean equals(TopicOption that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_to_id = true;
    boolean that_present_to_id = true;
    if (this_present_to_id || that_present_to_id) {
      if (!(this_present_to_id && that_present_to_id))
        return false;
      if (this.to_id != that.to_id)
        return false;
    }

    boolean this_present_to_context = true && this.isSetTo_context();
    boolean that_present_to_context = true && that.isSetTo_context();
    if (this_present_to_context || that_present_to_context) {
      if (!(this_present_to_context && that_present_to_context))
        return false;
      if (!this.to_context.equals(that.to_context))
        return false;
    }

    boolean this_present_to_topic_id = true;
    boolean that_present_to_topic_id = true;
    if (this_present_to_topic_id || that_present_to_topic_id) {
      if (!(this_present_to_topic_id && that_present_to_topic_id))
        return false;
      if (this.to_topic_id != that.to_topic_id)
        return false;
    }

    boolean this_present_to_create_time = true && this.isSetTo_create_time();
    boolean that_present_to_create_time = true && that.isSetTo_create_time();
    if (this_present_to_create_time || that_present_to_create_time) {
      if (!(this_present_to_create_time && that_present_to_create_time))
        return false;
      if (!this.to_create_time.equals(that.to_create_time))
        return false;
    }

    boolean this_present_to_update_time = true && this.isSetTo_update_time();
    boolean that_present_to_update_time = true && that.isSetTo_update_time();
    if (this_present_to_update_time || that_present_to_update_time) {
      if (!(this_present_to_update_time && that_present_to_update_time))
        return false;
      if (!this.to_update_time.equals(that.to_update_time))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + to_id;

    hashCode = hashCode * 8191 + ((isSetTo_context()) ? 131071 : 524287);
    if (isSetTo_context())
      hashCode = hashCode * 8191 + to_context.hashCode();

    hashCode = hashCode * 8191 + to_topic_id;

    hashCode = hashCode * 8191 + ((isSetTo_create_time()) ? 131071 : 524287);
    if (isSetTo_create_time())
      hashCode = hashCode * 8191 + to_create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTo_update_time()) ? 131071 : 524287);
    if (isSetTo_update_time())
      hashCode = hashCode * 8191 + to_update_time.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TopicOption other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTo_id()).compareTo(other.isSetTo_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_id, other.to_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTo_context()).compareTo(other.isSetTo_context());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_context()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_context, other.to_context);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTo_topic_id()).compareTo(other.isSetTo_topic_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_topic_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_topic_id, other.to_topic_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTo_create_time()).compareTo(other.isSetTo_create_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_create_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_create_time, other.to_create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTo_update_time()).compareTo(other.isSetTo_update_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTo_update_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.to_update_time, other.to_update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TopicOption(");
    boolean first = true;

    sb.append("to_id:");
    sb.append(this.to_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("to_context:");
    if (this.to_context == null) {
      sb.append("null");
    } else {
      sb.append(this.to_context);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to_topic_id:");
    sb.append(this.to_topic_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("to_create_time:");
    if (this.to_create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.to_create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("to_update_time:");
    if (this.to_update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.to_update_time);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicOptionStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicOptionStandardScheme getScheme() {
      return new TopicOptionStandardScheme();
    }
  }

  private static class TopicOptionStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicOption> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopicOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TO_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.to_id = iprot.readI32();
              struct.setTo_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TO_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to_context = iprot.readString();
              struct.setTo_contextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TO_TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.to_topic_id = iprot.readI32();
              struct.setTo_topic_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TO_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to_create_time = iprot.readString();
              struct.setTo_create_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TO_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.to_update_time = iprot.readString();
              struct.setTo_update_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopicOption struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TO_ID_FIELD_DESC);
      oprot.writeI32(struct.to_id);
      oprot.writeFieldEnd();
      if (struct.to_context != null) {
        oprot.writeFieldBegin(TO_CONTEXT_FIELD_DESC);
        oprot.writeString(struct.to_context);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TO_TOPIC_ID_FIELD_DESC);
      oprot.writeI32(struct.to_topic_id);
      oprot.writeFieldEnd();
      if (struct.to_create_time != null) {
        oprot.writeFieldBegin(TO_CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.to_create_time);
        oprot.writeFieldEnd();
      }
      if (struct.to_update_time != null) {
        oprot.writeFieldBegin(TO_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.to_update_time);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicOptionTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicOptionTupleScheme getScheme() {
      return new TopicOptionTupleScheme();
    }
  }

  private static class TopicOptionTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicOption> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopicOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTo_id()) {
        optionals.set(0);
      }
      if (struct.isSetTo_context()) {
        optionals.set(1);
      }
      if (struct.isSetTo_topic_id()) {
        optionals.set(2);
      }
      if (struct.isSetTo_create_time()) {
        optionals.set(3);
      }
      if (struct.isSetTo_update_time()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTo_id()) {
        oprot.writeI32(struct.to_id);
      }
      if (struct.isSetTo_context()) {
        oprot.writeString(struct.to_context);
      }
      if (struct.isSetTo_topic_id()) {
        oprot.writeI32(struct.to_topic_id);
      }
      if (struct.isSetTo_create_time()) {
        oprot.writeString(struct.to_create_time);
      }
      if (struct.isSetTo_update_time()) {
        oprot.writeString(struct.to_update_time);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopicOption struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.to_id = iprot.readI32();
        struct.setTo_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.to_context = iprot.readString();
        struct.setTo_contextIsSet(true);
      }
      if (incoming.get(2)) {
        struct.to_topic_id = iprot.readI32();
        struct.setTo_topic_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.to_create_time = iprot.readString();
        struct.setTo_create_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.to_update_time = iprot.readString();
        struct.setTo_update_timeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

