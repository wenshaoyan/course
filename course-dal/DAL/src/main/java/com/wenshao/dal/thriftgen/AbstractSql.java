/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-24")
public class AbstractSql implements org.apache.thrift.TBase<AbstractSql, AbstractSql._Fields>, java.io.Serializable, Cloneable, Comparable<AbstractSql> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AbstractSql");

  private static final org.apache.thrift.protocol.TField SELECTS_FIELD_DESC = new org.apache.thrift.protocol.TField("selects", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("order", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GROUP_FIELD_DESC = new org.apache.thrift.protocol.TField("group", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.LIST, (short)5);
  private static final org.apache.thrift.protocol.TField LEFT_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("left_join", org.apache.thrift.protocol.TType.MAP, (short)6);
  private static final org.apache.thrift.protocol.TField INNER_JOIN_FIELD_DESC = new org.apache.thrift.protocol.TField("inner_join", org.apache.thrift.protocol.TType.MAP, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AbstractSqlStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AbstractSqlTupleSchemeFactory();

  public java.util.List<java.lang.String> selects; // required
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> where; // required
  public java.lang.String order; // required
  public java.lang.String group; // required
  public java.util.List<java.lang.String> limit; // required
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> left_join; // required
  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> inner_join; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SELECTS((short)1, "selects"),
    WHERE((short)2, "where"),
    ORDER((short)3, "order"),
    GROUP((short)4, "group"),
    LIMIT((short)5, "limit"),
    LEFT_JOIN((short)6, "left_join"),
    INNER_JOIN((short)7, "inner_join");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SELECTS
          return SELECTS;
        case 2: // WHERE
          return WHERE;
        case 3: // ORDER
          return ORDER;
        case 4: // GROUP
          return GROUP;
        case 5: // LIMIT
          return LIMIT;
        case 6: // LEFT_JOIN
          return LEFT_JOIN;
        case 7: // INNER_JOIN
          return INNER_JOIN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SELECTS, new org.apache.thrift.meta_data.FieldMetaData("selects", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.ORDER, new org.apache.thrift.meta_data.FieldMetaData("order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP, new org.apache.thrift.meta_data.FieldMetaData("group", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LEFT_JOIN, new org.apache.thrift.meta_data.FieldMetaData("left_join", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.INNER_JOIN, new org.apache.thrift.meta_data.FieldMetaData("inner_join", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AbstractSql.class, metaDataMap);
  }

  public AbstractSql() {
  }

  public AbstractSql(
    java.util.List<java.lang.String> selects,
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> where,
    java.lang.String order,
    java.lang.String group,
    java.util.List<java.lang.String> limit,
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> left_join,
    java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> inner_join)
  {
    this();
    this.selects = selects;
    this.where = where;
    this.order = order;
    this.group = group;
    this.limit = limit;
    this.left_join = left_join;
    this.inner_join = inner_join;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AbstractSql(AbstractSql other) {
    if (other.isSetSelects()) {
      java.util.List<java.lang.String> __this__selects = new java.util.ArrayList<java.lang.String>(other.selects);
      this.selects = __this__selects;
    }
    if (other.isSetWhere()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> __this__where = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(other.where.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> other_element : other.where.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__where_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.String> __this__where_copy_value = new java.util.HashMap<java.lang.String,java.lang.String>(other_element_value);

        __this__where.put(__this__where_copy_key, __this__where_copy_value);
      }
      this.where = __this__where;
    }
    if (other.isSetOrder()) {
      this.order = other.order;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    if (other.isSetLimit()) {
      java.util.List<java.lang.String> __this__limit = new java.util.ArrayList<java.lang.String>(other.limit);
      this.limit = __this__limit;
    }
    if (other.isSetLeft_join()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> __this__left_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(other.left_join.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> other_element : other.left_join.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__left_join_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.String> __this__left_join_copy_value = new java.util.HashMap<java.lang.String,java.lang.String>(other_element_value);

        __this__left_join.put(__this__left_join_copy_key, __this__left_join_copy_value);
      }
      this.left_join = __this__left_join;
    }
    if (other.isSetInner_join()) {
      java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> __this__inner_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(other.inner_join.size());
      for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> other_element : other.inner_join.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        java.util.Map<java.lang.String,java.lang.String> other_element_value = other_element.getValue();

        java.lang.String __this__inner_join_copy_key = other_element_key;

        java.util.Map<java.lang.String,java.lang.String> __this__inner_join_copy_value = new java.util.HashMap<java.lang.String,java.lang.String>(other_element_value);

        __this__inner_join.put(__this__inner_join_copy_key, __this__inner_join_copy_value);
      }
      this.inner_join = __this__inner_join;
    }
  }

  public AbstractSql deepCopy() {
    return new AbstractSql(this);
  }

  @Override
  public void clear() {
    this.selects = null;
    this.where = null;
    this.order = null;
    this.group = null;
    this.limit = null;
    this.left_join = null;
    this.inner_join = null;
  }

  public int getSelectsSize() {
    return (this.selects == null) ? 0 : this.selects.size();
  }

  public java.util.Iterator<java.lang.String> getSelectsIterator() {
    return (this.selects == null) ? null : this.selects.iterator();
  }

  public void addToSelects(java.lang.String elem) {
    if (this.selects == null) {
      this.selects = new java.util.ArrayList<java.lang.String>();
    }
    this.selects.add(elem);
  }

  public java.util.List<java.lang.String> getSelects() {
    return this.selects;
  }

  public AbstractSql setSelects(java.util.List<java.lang.String> selects) {
    this.selects = selects;
    return this;
  }

  public void unsetSelects() {
    this.selects = null;
  }

  /** Returns true if field selects is set (has been assigned a value) and false otherwise */
  public boolean isSetSelects() {
    return this.selects != null;
  }

  public void setSelectsIsSet(boolean value) {
    if (!value) {
      this.selects = null;
    }
  }

  public int getWhereSize() {
    return (this.where == null) ? 0 : this.where.size();
  }

  public void putToWhere(java.lang.String key, java.util.Map<java.lang.String,java.lang.String> val) {
    if (this.where == null) {
      this.where = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.where.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> getWhere() {
    return this.where;
  }

  public AbstractSql setWhere(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  public java.lang.String getOrder() {
    return this.order;
  }

  public AbstractSql setOrder(java.lang.String order) {
    this.order = order;
    return this;
  }

  public void unsetOrder() {
    this.order = null;
  }

  /** Returns true if field order is set (has been assigned a value) and false otherwise */
  public boolean isSetOrder() {
    return this.order != null;
  }

  public void setOrderIsSet(boolean value) {
    if (!value) {
      this.order = null;
    }
  }

  public java.lang.String getGroup() {
    return this.group;
  }

  public AbstractSql setGroup(java.lang.String group) {
    this.group = group;
    return this;
  }

  public void unsetGroup() {
    this.group = null;
  }

  /** Returns true if field group is set (has been assigned a value) and false otherwise */
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  public int getLimitSize() {
    return (this.limit == null) ? 0 : this.limit.size();
  }

  public java.util.Iterator<java.lang.String> getLimitIterator() {
    return (this.limit == null) ? null : this.limit.iterator();
  }

  public void addToLimit(java.lang.String elem) {
    if (this.limit == null) {
      this.limit = new java.util.ArrayList<java.lang.String>();
    }
    this.limit.add(elem);
  }

  public java.util.List<java.lang.String> getLimit() {
    return this.limit;
  }

  public AbstractSql setLimit(java.util.List<java.lang.String> limit) {
    this.limit = limit;
    return this;
  }

  public void unsetLimit() {
    this.limit = null;
  }

  /** Returns true if field limit is set (has been assigned a value) and false otherwise */
  public boolean isSetLimit() {
    return this.limit != null;
  }

  public void setLimitIsSet(boolean value) {
    if (!value) {
      this.limit = null;
    }
  }

  public int getLeft_joinSize() {
    return (this.left_join == null) ? 0 : this.left_join.size();
  }

  public void putToLeft_join(java.lang.String key, java.util.Map<java.lang.String,java.lang.String> val) {
    if (this.left_join == null) {
      this.left_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.left_join.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> getLeft_join() {
    return this.left_join;
  }

  public AbstractSql setLeft_join(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> left_join) {
    this.left_join = left_join;
    return this;
  }

  public void unsetLeft_join() {
    this.left_join = null;
  }

  /** Returns true if field left_join is set (has been assigned a value) and false otherwise */
  public boolean isSetLeft_join() {
    return this.left_join != null;
  }

  public void setLeft_joinIsSet(boolean value) {
    if (!value) {
      this.left_join = null;
    }
  }

  public int getInner_joinSize() {
    return (this.inner_join == null) ? 0 : this.inner_join.size();
  }

  public void putToInner_join(java.lang.String key, java.util.Map<java.lang.String,java.lang.String> val) {
    if (this.inner_join == null) {
      this.inner_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>();
    }
    this.inner_join.put(key, val);
  }

  public java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> getInner_join() {
    return this.inner_join;
  }

  public AbstractSql setInner_join(java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>> inner_join) {
    this.inner_join = inner_join;
    return this;
  }

  public void unsetInner_join() {
    this.inner_join = null;
  }

  /** Returns true if field inner_join is set (has been assigned a value) and false otherwise */
  public boolean isSetInner_join() {
    return this.inner_join != null;
  }

  public void setInner_joinIsSet(boolean value) {
    if (!value) {
      this.inner_join = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SELECTS:
      if (value == null) {
        unsetSelects();
      } else {
        setSelects((java.util.List<java.lang.String>)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    case ORDER:
      if (value == null) {
        unsetOrder();
      } else {
        setOrder((java.lang.String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((java.lang.String)value);
      }
      break;

    case LIMIT:
      if (value == null) {
        unsetLimit();
      } else {
        setLimit((java.util.List<java.lang.String>)value);
      }
      break;

    case LEFT_JOIN:
      if (value == null) {
        unsetLeft_join();
      } else {
        setLeft_join((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    case INNER_JOIN:
      if (value == null) {
        unsetInner_join();
      } else {
        setInner_join((java.util.Map<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SELECTS:
      return getSelects();

    case WHERE:
      return getWhere();

    case ORDER:
      return getOrder();

    case GROUP:
      return getGroup();

    case LIMIT:
      return getLimit();

    case LEFT_JOIN:
      return getLeft_join();

    case INNER_JOIN:
      return getInner_join();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SELECTS:
      return isSetSelects();
    case WHERE:
      return isSetWhere();
    case ORDER:
      return isSetOrder();
    case GROUP:
      return isSetGroup();
    case LIMIT:
      return isSetLimit();
    case LEFT_JOIN:
      return isSetLeft_join();
    case INNER_JOIN:
      return isSetInner_join();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AbstractSql)
      return this.equals((AbstractSql)that);
    return false;
  }

  public boolean equals(AbstractSql that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_selects = true && this.isSetSelects();
    boolean that_present_selects = true && that.isSetSelects();
    if (this_present_selects || that_present_selects) {
      if (!(this_present_selects && that_present_selects))
        return false;
      if (!this.selects.equals(that.selects))
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_order = true && this.isSetOrder();
    boolean that_present_order = true && that.isSetOrder();
    if (this_present_order || that_present_order) {
      if (!(this_present_order && that_present_order))
        return false;
      if (!this.order.equals(that.order))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_limit = true && this.isSetLimit();
    boolean that_present_limit = true && that.isSetLimit();
    if (this_present_limit || that_present_limit) {
      if (!(this_present_limit && that_present_limit))
        return false;
      if (!this.limit.equals(that.limit))
        return false;
    }

    boolean this_present_left_join = true && this.isSetLeft_join();
    boolean that_present_left_join = true && that.isSetLeft_join();
    if (this_present_left_join || that_present_left_join) {
      if (!(this_present_left_join && that_present_left_join))
        return false;
      if (!this.left_join.equals(that.left_join))
        return false;
    }

    boolean this_present_inner_join = true && this.isSetInner_join();
    boolean that_present_inner_join = true && that.isSetInner_join();
    if (this_present_inner_join || that_present_inner_join) {
      if (!(this_present_inner_join && that_present_inner_join))
        return false;
      if (!this.inner_join.equals(that.inner_join))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSelects()) ? 131071 : 524287);
    if (isSetSelects())
      hashCode = hashCode * 8191 + selects.hashCode();

    hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
    if (isSetWhere())
      hashCode = hashCode * 8191 + where.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrder()) ? 131071 : 524287);
    if (isSetOrder())
      hashCode = hashCode * 8191 + order.hashCode();

    hashCode = hashCode * 8191 + ((isSetGroup()) ? 131071 : 524287);
    if (isSetGroup())
      hashCode = hashCode * 8191 + group.hashCode();

    hashCode = hashCode * 8191 + ((isSetLimit()) ? 131071 : 524287);
    if (isSetLimit())
      hashCode = hashCode * 8191 + limit.hashCode();

    hashCode = hashCode * 8191 + ((isSetLeft_join()) ? 131071 : 524287);
    if (isSetLeft_join())
      hashCode = hashCode * 8191 + left_join.hashCode();

    hashCode = hashCode * 8191 + ((isSetInner_join()) ? 131071 : 524287);
    if (isSetInner_join())
      hashCode = hashCode * 8191 + inner_join.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AbstractSql other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSelects()).compareTo(other.isSetSelects());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelects()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selects, other.selects);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrder()).compareTo(other.isSetOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order, other.order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGroup()).compareTo(other.isSetGroup());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroup()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.group, other.group);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLeft_join()).compareTo(other.isSetLeft_join());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeft_join()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.left_join, other.left_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInner_join()).compareTo(other.isSetInner_join());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInner_join()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inner_join, other.inner_join);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AbstractSql(");
    boolean first = true;

    sb.append("selects:");
    if (this.selects == null) {
      sb.append("null");
    } else {
      sb.append(this.selects);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("where:");
    if (this.where == null) {
      sb.append("null");
    } else {
      sb.append(this.where);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("order:");
    if (this.order == null) {
      sb.append("null");
    } else {
      sb.append(this.order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limit:");
    if (this.limit == null) {
      sb.append("null");
    } else {
      sb.append(this.limit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("left_join:");
    if (this.left_join == null) {
      sb.append("null");
    } else {
      sb.append(this.left_join);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inner_join:");
    if (this.inner_join == null) {
      sb.append("null");
    } else {
      sb.append(this.inner_join);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AbstractSqlStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AbstractSqlStandardScheme getScheme() {
      return new AbstractSqlStandardScheme();
    }
  }

  private static class AbstractSqlStandardScheme extends org.apache.thrift.scheme.StandardScheme<AbstractSql> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AbstractSql struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SELECTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.selects = new java.util.ArrayList<java.lang.String>(_list32.size);
                java.lang.String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.selects.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setSelectsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map35 = iprot.readMapBegin();
                struct.where = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map35.size);
                java.lang.String _key36;
                java.util.Map<java.lang.String,java.lang.String> _val37;
                for (int _i38 = 0; _i38 < _map35.size; ++_i38)
                {
                  _key36 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                    _val37 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map39.size);
                    java.lang.String _key40;
                    java.lang.String _val41;
                    for (int _i42 = 0; _i42 < _map39.size; ++_i42)
                    {
                      _key40 = iprot.readString();
                      _val41 = iprot.readString();
                      _val37.put(_key40, _val41);
                    }
                    iprot.readMapEnd();
                  }
                  struct.where.put(_key36, _val37);
                }
                iprot.readMapEnd();
              }
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.order = iprot.readString();
              struct.setOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GROUP
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.group = iprot.readString();
              struct.setGroupIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LIMIT
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list43 = iprot.readListBegin();
                struct.limit = new java.util.ArrayList<java.lang.String>(_list43.size);
                java.lang.String _elem44;
                for (int _i45 = 0; _i45 < _list43.size; ++_i45)
                {
                  _elem44 = iprot.readString();
                  struct.limit.add(_elem44);
                }
                iprot.readListEnd();
              }
              struct.setLimitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEFT_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map46 = iprot.readMapBegin();
                struct.left_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map46.size);
                java.lang.String _key47;
                java.util.Map<java.lang.String,java.lang.String> _val48;
                for (int _i49 = 0; _i49 < _map46.size; ++_i49)
                {
                  _key47 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map50 = iprot.readMapBegin();
                    _val48 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map50.size);
                    java.lang.String _key51;
                    java.lang.String _val52;
                    for (int _i53 = 0; _i53 < _map50.size; ++_i53)
                    {
                      _key51 = iprot.readString();
                      _val52 = iprot.readString();
                      _val48.put(_key51, _val52);
                    }
                    iprot.readMapEnd();
                  }
                  struct.left_join.put(_key47, _val48);
                }
                iprot.readMapEnd();
              }
              struct.setLeft_joinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // INNER_JOIN
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                struct.inner_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map54.size);
                java.lang.String _key55;
                java.util.Map<java.lang.String,java.lang.String> _val56;
                for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                {
                  _key55 = iprot.readString();
                  {
                    org.apache.thrift.protocol.TMap _map58 = iprot.readMapBegin();
                    _val56 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map58.size);
                    java.lang.String _key59;
                    java.lang.String _val60;
                    for (int _i61 = 0; _i61 < _map58.size; ++_i61)
                    {
                      _key59 = iprot.readString();
                      _val60 = iprot.readString();
                      _val56.put(_key59, _val60);
                    }
                    iprot.readMapEnd();
                  }
                  struct.inner_join.put(_key55, _val56);
                }
                iprot.readMapEnd();
              }
              struct.setInner_joinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AbstractSql struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.selects != null) {
        oprot.writeFieldBegin(SELECTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.selects.size()));
          for (java.lang.String _iter62 : struct.selects)
          {
            oprot.writeString(_iter62);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.where != null) {
        oprot.writeFieldBegin(WHERE_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.where.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter63 : struct.where.entrySet())
          {
            oprot.writeString(_iter63.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter63.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter64 : _iter63.getValue().entrySet())
              {
                oprot.writeString(_iter64.getKey());
                oprot.writeString(_iter64.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.order != null) {
        oprot.writeFieldBegin(ORDER_FIELD_DESC);
        oprot.writeString(struct.order);
        oprot.writeFieldEnd();
      }
      if (struct.group != null) {
        oprot.writeFieldBegin(GROUP_FIELD_DESC);
        oprot.writeString(struct.group);
        oprot.writeFieldEnd();
      }
      if (struct.limit != null) {
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.limit.size()));
          for (java.lang.String _iter65 : struct.limit)
          {
            oprot.writeString(_iter65);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.left_join != null) {
        oprot.writeFieldBegin(LEFT_JOIN_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.left_join.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter66 : struct.left_join.entrySet())
          {
            oprot.writeString(_iter66.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter66.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter67 : _iter66.getValue().entrySet())
              {
                oprot.writeString(_iter67.getKey());
                oprot.writeString(_iter67.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.inner_join != null) {
        oprot.writeFieldBegin(INNER_JOIN_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, struct.inner_join.size()));
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter68 : struct.inner_join.entrySet())
          {
            oprot.writeString(_iter68.getKey());
            {
              oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter68.getValue().size()));
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter69 : _iter68.getValue().entrySet())
              {
                oprot.writeString(_iter69.getKey());
                oprot.writeString(_iter69.getValue());
              }
              oprot.writeMapEnd();
            }
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AbstractSqlTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AbstractSqlTupleScheme getScheme() {
      return new AbstractSqlTupleScheme();
    }
  }

  private static class AbstractSqlTupleScheme extends org.apache.thrift.scheme.TupleScheme<AbstractSql> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AbstractSql struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetSelects()) {
        optionals.set(0);
      }
      if (struct.isSetWhere()) {
        optionals.set(1);
      }
      if (struct.isSetOrder()) {
        optionals.set(2);
      }
      if (struct.isSetGroup()) {
        optionals.set(3);
      }
      if (struct.isSetLimit()) {
        optionals.set(4);
      }
      if (struct.isSetLeft_join()) {
        optionals.set(5);
      }
      if (struct.isSetInner_join()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetSelects()) {
        {
          oprot.writeI32(struct.selects.size());
          for (java.lang.String _iter70 : struct.selects)
          {
            oprot.writeString(_iter70);
          }
        }
      }
      if (struct.isSetWhere()) {
        {
          oprot.writeI32(struct.where.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter71 : struct.where.entrySet())
          {
            oprot.writeString(_iter71.getKey());
            {
              oprot.writeI32(_iter71.getValue().size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter72 : _iter71.getValue().entrySet())
              {
                oprot.writeString(_iter72.getKey());
                oprot.writeString(_iter72.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetOrder()) {
        oprot.writeString(struct.order);
      }
      if (struct.isSetGroup()) {
        oprot.writeString(struct.group);
      }
      if (struct.isSetLimit()) {
        {
          oprot.writeI32(struct.limit.size());
          for (java.lang.String _iter73 : struct.limit)
          {
            oprot.writeString(_iter73);
          }
        }
      }
      if (struct.isSetLeft_join()) {
        {
          oprot.writeI32(struct.left_join.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter74 : struct.left_join.entrySet())
          {
            oprot.writeString(_iter74.getKey());
            {
              oprot.writeI32(_iter74.getValue().size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter75 : _iter74.getValue().entrySet())
              {
                oprot.writeString(_iter75.getKey());
                oprot.writeString(_iter75.getValue());
              }
            }
          }
        }
      }
      if (struct.isSetInner_join()) {
        {
          oprot.writeI32(struct.inner_join.size());
          for (java.util.Map.Entry<java.lang.String, java.util.Map<java.lang.String,java.lang.String>> _iter76 : struct.inner_join.entrySet())
          {
            oprot.writeString(_iter76.getKey());
            {
              oprot.writeI32(_iter76.getValue().size());
              for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter77 : _iter76.getValue().entrySet())
              {
                oprot.writeString(_iter77.getKey());
                oprot.writeString(_iter77.getValue());
              }
            }
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AbstractSql struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list78 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.selects = new java.util.ArrayList<java.lang.String>(_list78.size);
          java.lang.String _elem79;
          for (int _i80 = 0; _i80 < _list78.size; ++_i80)
          {
            _elem79 = iprot.readString();
            struct.selects.add(_elem79);
          }
        }
        struct.setSelectsIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map81 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.where = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map81.size);
          java.lang.String _key82;
          java.util.Map<java.lang.String,java.lang.String> _val83;
          for (int _i84 = 0; _i84 < _map81.size; ++_i84)
          {
            _key82 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map85 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val83 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map85.size);
              java.lang.String _key86;
              java.lang.String _val87;
              for (int _i88 = 0; _i88 < _map85.size; ++_i88)
              {
                _key86 = iprot.readString();
                _val87 = iprot.readString();
                _val83.put(_key86, _val87);
              }
            }
            struct.where.put(_key82, _val83);
          }
        }
        struct.setWhereIsSet(true);
      }
      if (incoming.get(2)) {
        struct.order = iprot.readString();
        struct.setOrderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.group = iprot.readString();
        struct.setGroupIsSet(true);
      }
      if (incoming.get(4)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.limit = new java.util.ArrayList<java.lang.String>(_list89.size);
          java.lang.String _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.limit.add(_elem90);
          }
        }
        struct.setLimitIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TMap _map92 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.left_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map92.size);
          java.lang.String _key93;
          java.util.Map<java.lang.String,java.lang.String> _val94;
          for (int _i95 = 0; _i95 < _map92.size; ++_i95)
          {
            _key93 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map96 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val94 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map96.size);
              java.lang.String _key97;
              java.lang.String _val98;
              for (int _i99 = 0; _i99 < _map96.size; ++_i99)
              {
                _key97 = iprot.readString();
                _val98 = iprot.readString();
                _val94.put(_key97, _val98);
              }
            }
            struct.left_join.put(_key93, _val94);
          }
        }
        struct.setLeft_joinIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TMap _map100 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.MAP, iprot.readI32());
          struct.inner_join = new java.util.HashMap<java.lang.String,java.util.Map<java.lang.String,java.lang.String>>(2*_map100.size);
          java.lang.String _key101;
          java.util.Map<java.lang.String,java.lang.String> _val102;
          for (int _i103 = 0; _i103 < _map100.size; ++_i103)
          {
            _key101 = iprot.readString();
            {
              org.apache.thrift.protocol.TMap _map104 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
              _val102 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map104.size);
              java.lang.String _key105;
              java.lang.String _val106;
              for (int _i107 = 0; _i107 < _map104.size; ++_i107)
              {
                _key105 = iprot.readString();
                _val106 = iprot.readString();
                _val102.put(_key105, _val106);
              }
            }
            struct.inner_join.put(_key101, _val102);
          }
        }
        struct.setInner_joinIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

