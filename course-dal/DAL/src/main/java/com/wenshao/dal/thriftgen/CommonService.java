/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-28")
public class CommonService {

  public interface Iface {

    public int topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException;

    public int topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException;

    public int topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public int topicOptionCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public int topicInsert(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public int topicUpdate(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public int topicRemove(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public int topicCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public int topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public int topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public int topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public int topicBankCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicInsert(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicUpdate(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicRemove(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      send_topicOptionInsert(topicOption);
      return recv_topicOptionInsert();
    }

    public void send_topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      topicOptionInsert_args args = new topicOptionInsert_args();
      args.setTopicOption(topicOption);
      sendBase("topicOptionInsert", args);
    }

    public int recv_topicOptionInsert() throws org.apache.thrift.TException
    {
      topicOptionInsert_result result = new topicOptionInsert_result();
      receiveBase(result, "topicOptionInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionInsert failed: unknown result");
    }

    public int topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      send_topicOptionUpdate(topicOption);
      return recv_topicOptionUpdate();
    }

    public void send_topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      topicOptionUpdate_args args = new topicOptionUpdate_args();
      args.setTopicOption(topicOption);
      sendBase("topicOptionUpdate", args);
    }

    public int recv_topicOptionUpdate() throws org.apache.thrift.TException
    {
      topicOptionUpdate_result result = new topicOptionUpdate_result();
      receiveBase(result, "topicOptionUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionUpdate failed: unknown result");
    }

    public int topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      send_topicOptionRemove(topicOption);
      return recv_topicOptionRemove();
    }

    public void send_topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      topicOptionRemove_args args = new topicOptionRemove_args();
      args.setTopicOption(topicOption);
      sendBase("topicOptionRemove", args);
    }

    public int recv_topicOptionRemove() throws org.apache.thrift.TException
    {
      topicOptionRemove_result result = new topicOptionRemove_result();
      receiveBase(result, "topicOptionRemove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionRemove failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicOptionSelect(abstractSql);
      return recv_topicOptionSelect();
    }

    public void send_topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicOptionSelect_args args = new topicOptionSelect_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicOptionSelect", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> recv_topicOptionSelect() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicOptionSelect_result result = new topicOptionSelect_result();
      receiveBase(result, "topicOptionSelect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionSelect failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicOptionSelectNoCache(abstractSql);
      return recv_topicOptionSelectNoCache();
    }

    public void send_topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicOptionSelectNoCache_args args = new topicOptionSelectNoCache_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicOptionSelectNoCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> recv_topicOptionSelectNoCache() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
      receiveBase(result, "topicOptionSelectNoCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionSelectNoCache failed: unknown result");
    }

    public int topicOptionCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicOptionCount(abstractSql);
      return recv_topicOptionCount();
    }

    public void send_topicOptionCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicOptionCount_args args = new topicOptionCount_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicOptionCount", args);
    }

    public int recv_topicOptionCount() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicOptionCount_result result = new topicOptionCount_result();
      receiveBase(result, "topicOptionCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionCount failed: unknown result");
    }

    public int topicInsert(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicInsert(topic);
      return recv_topicInsert();
    }

    public void send_topicInsert(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicInsert_args args = new topicInsert_args();
      args.setTopic(topic);
      sendBase("topicInsert", args);
    }

    public int recv_topicInsert() throws org.apache.thrift.TException
    {
      topicInsert_result result = new topicInsert_result();
      receiveBase(result, "topicInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicInsert failed: unknown result");
    }

    public int topicUpdate(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicUpdate(topic);
      return recv_topicUpdate();
    }

    public void send_topicUpdate(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicUpdate_args args = new topicUpdate_args();
      args.setTopic(topic);
      sendBase("topicUpdate", args);
    }

    public int recv_topicUpdate() throws org.apache.thrift.TException
    {
      topicUpdate_result result = new topicUpdate_result();
      receiveBase(result, "topicUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicUpdate failed: unknown result");
    }

    public int topicRemove(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicRemove(topic);
      return recv_topicRemove();
    }

    public void send_topicRemove(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicRemove_args args = new topicRemove_args();
      args.setTopic(topic);
      sendBase("topicRemove", args);
    }

    public int recv_topicRemove() throws org.apache.thrift.TException
    {
      topicRemove_result result = new topicRemove_result();
      receiveBase(result, "topicRemove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicRemove failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicSelect(abstractSql);
      return recv_topicSelect();
    }

    public void send_topicSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicSelect_args args = new topicSelect_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicSelect", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelect() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicSelect_result result = new topicSelect_result();
      receiveBase(result, "topicSelect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelect failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicSelectNoCache(abstractSql);
      return recv_topicSelectNoCache();
    }

    public void send_topicSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicSelectNoCache_args args = new topicSelectNoCache_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicSelectNoCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelectNoCache() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicSelectNoCache_result result = new topicSelectNoCache_result();
      receiveBase(result, "topicSelectNoCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelectNoCache failed: unknown result");
    }

    public int topicCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicCount(abstractSql);
      return recv_topicCount();
    }

    public void send_topicCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicCount_args args = new topicCount_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicCount", args);
    }

    public int recv_topicCount() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicCount_result result = new topicCount_result();
      receiveBase(result, "topicCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicCount failed: unknown result");
    }

    public int topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankInsert(topicBank);
      return recv_topicBankInsert();
    }

    public void send_topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankInsert_args args = new topicBankInsert_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankInsert", args);
    }

    public int recv_topicBankInsert() throws org.apache.thrift.TException
    {
      topicBankInsert_result result = new topicBankInsert_result();
      receiveBase(result, "topicBankInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankInsert failed: unknown result");
    }

    public int topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankUpdate(topicBank);
      return recv_topicBankUpdate();
    }

    public void send_topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankUpdate_args args = new topicBankUpdate_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankUpdate", args);
    }

    public int recv_topicBankUpdate() throws org.apache.thrift.TException
    {
      topicBankUpdate_result result = new topicBankUpdate_result();
      receiveBase(result, "topicBankUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankUpdate failed: unknown result");
    }

    public int topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankRemove(topicBank);
      return recv_topicBankRemove();
    }

    public void send_topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankRemove_args args = new topicBankRemove_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankRemove", args);
    }

    public int recv_topicBankRemove() throws org.apache.thrift.TException
    {
      topicBankRemove_result result = new topicBankRemove_result();
      receiveBase(result, "topicBankRemove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankRemove failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicBankSelect(abstractSql);
      return recv_topicBankSelect();
    }

    public void send_topicBankSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicBankSelect_args args = new topicBankSelect_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicBankSelect", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelect() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicBankSelect_result result = new topicBankSelect_result();
      receiveBase(result, "topicBankSelect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelect failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicBankSelectNoCache(abstractSql);
      return recv_topicBankSelectNoCache();
    }

    public void send_topicBankSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicBankSelectNoCache_args args = new topicBankSelectNoCache_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicBankSelectNoCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelectNoCache() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicBankSelectNoCache_result result = new topicBankSelectNoCache_result();
      receiveBase(result, "topicBankSelectNoCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelectNoCache failed: unknown result");
    }

    public int topicBankCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicBankCount(abstractSql);
      return recv_topicBankCount();
    }

    public void send_topicBankCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicBankCount_args args = new topicBankCount_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicBankCount", args);
    }

    public int recv_topicBankCount() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicBankCount_result result = new topicBankCount_result();
      receiveBase(result, "topicBankCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankCount failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionInsert_call method_call = new topicOptionInsert_call(topicOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionInsert_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicOption topicOption;
      public topicOptionInsert_call(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicOption = topicOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionInsert_args args = new topicOptionInsert_args();
        args.setTopicOption(topicOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionInsert();
      }
    }

    public void topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionUpdate_call method_call = new topicOptionUpdate_call(topicOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionUpdate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicOption topicOption;
      public topicOptionUpdate_call(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicOption = topicOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionUpdate_args args = new topicOptionUpdate_args();
        args.setTopicOption(topicOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionUpdate();
      }
    }

    public void topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionRemove_call method_call = new topicOptionRemove_call(topicOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionRemove_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicOption topicOption;
      public topicOptionRemove_call(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicOption = topicOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionRemove_args args = new topicOptionRemove_args();
        args.setTopicOption(topicOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionRemove();
      }
    }

    public void topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionSelect_call method_call = new topicOptionSelect_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionSelect_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicOptionSelect_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionSelect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionSelect_args args = new topicOptionSelect_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionSelect();
      }
    }

    public void topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionSelectNoCache_call method_call = new topicOptionSelectNoCache_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionSelectNoCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicOptionSelectNoCache_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionSelectNoCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionSelectNoCache_args args = new topicOptionSelectNoCache_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionSelectNoCache();
      }
    }

    public void topicOptionCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionCount_call method_call = new topicOptionCount_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicOptionCount_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionCount_args args = new topicOptionCount_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionCount();
      }
    }

    public void topicInsert(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicInsert_call method_call = new topicInsert_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicInsert_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicInsert_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicInsert_args args = new topicInsert_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicInsert();
      }
    }

    public void topicUpdate(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicUpdate_call method_call = new topicUpdate_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicUpdate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicUpdate_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicUpdate_args args = new topicUpdate_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicUpdate();
      }
    }

    public void topicRemove(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicRemove_call method_call = new topicRemove_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicRemove_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicRemove_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicRemove_args args = new topicRemove_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicRemove();
      }
    }

    public void topicSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelect_call method_call = new topicSelect_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelect_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicSelect_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelect_args args = new topicSelect_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelect();
      }
    }

    public void topicSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelectNoCache_call method_call = new topicSelectNoCache_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelectNoCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicSelectNoCache_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelectNoCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelectNoCache_args args = new topicSelectNoCache_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelectNoCache();
      }
    }

    public void topicCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicCount_call method_call = new topicCount_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicCount_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicCount_args args = new topicCount_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicCount();
      }
    }

    public void topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankInsert_call method_call = new topicBankInsert_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankInsert_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankInsert_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankInsert_args args = new topicBankInsert_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankInsert();
      }
    }

    public void topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankUpdate_call method_call = new topicBankUpdate_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankUpdate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankUpdate_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankUpdate_args args = new topicBankUpdate_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankUpdate();
      }
    }

    public void topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankRemove_call method_call = new topicBankRemove_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankRemove_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankRemove_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankRemove_args args = new topicBankRemove_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankRemove();
      }
    }

    public void topicBankSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelect_call method_call = new topicBankSelect_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelect_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicBankSelect_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelect_args args = new topicBankSelect_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelect();
      }
    }

    public void topicBankSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelectNoCache_call method_call = new topicBankSelectNoCache_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelectNoCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicBankSelectNoCache_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelectNoCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelectNoCache_args args = new topicBankSelectNoCache_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelectNoCache();
      }
    }

    public void topicBankCount(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankCount_call method_call = new topicBankCount_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicBankCount_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankCount_args args = new topicBankCount_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankCount();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("topicOptionInsert", new topicOptionInsert());
      processMap.put("topicOptionUpdate", new topicOptionUpdate());
      processMap.put("topicOptionRemove", new topicOptionRemove());
      processMap.put("topicOptionSelect", new topicOptionSelect());
      processMap.put("topicOptionSelectNoCache", new topicOptionSelectNoCache());
      processMap.put("topicOptionCount", new topicOptionCount());
      processMap.put("topicInsert", new topicInsert());
      processMap.put("topicUpdate", new topicUpdate());
      processMap.put("topicRemove", new topicRemove());
      processMap.put("topicSelect", new topicSelect());
      processMap.put("topicSelectNoCache", new topicSelectNoCache());
      processMap.put("topicCount", new topicCount());
      processMap.put("topicBankInsert", new topicBankInsert());
      processMap.put("topicBankUpdate", new topicBankUpdate());
      processMap.put("topicBankRemove", new topicBankRemove());
      processMap.put("topicBankSelect", new topicBankSelect());
      processMap.put("topicBankSelectNoCache", new topicBankSelectNoCache());
      processMap.put("topicBankCount", new topicBankCount());
      return processMap;
    }

    public static class topicOptionInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionInsert_args> {
      public topicOptionInsert() {
        super("topicOptionInsert");
      }

      public topicOptionInsert_args getEmptyArgsInstance() {
        return new topicOptionInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionInsert_result getResult(I iface, topicOptionInsert_args args) throws org.apache.thrift.TException {
        topicOptionInsert_result result = new topicOptionInsert_result();
        result.success = iface.topicOptionInsert(args.topicOption);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicOptionUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionUpdate_args> {
      public topicOptionUpdate() {
        super("topicOptionUpdate");
      }

      public topicOptionUpdate_args getEmptyArgsInstance() {
        return new topicOptionUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionUpdate_result getResult(I iface, topicOptionUpdate_args args) throws org.apache.thrift.TException {
        topicOptionUpdate_result result = new topicOptionUpdate_result();
        result.success = iface.topicOptionUpdate(args.topicOption);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicOptionRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionRemove_args> {
      public topicOptionRemove() {
        super("topicOptionRemove");
      }

      public topicOptionRemove_args getEmptyArgsInstance() {
        return new topicOptionRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionRemove_result getResult(I iface, topicOptionRemove_args args) throws org.apache.thrift.TException {
        topicOptionRemove_result result = new topicOptionRemove_result();
        result.success = iface.topicOptionRemove(args.topicOption);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicOptionSelect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionSelect_args> {
      public topicOptionSelect() {
        super("topicOptionSelect");
      }

      public topicOptionSelect_args getEmptyArgsInstance() {
        return new topicOptionSelect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionSelect_result getResult(I iface, topicOptionSelect_args args) throws org.apache.thrift.TException {
        topicOptionSelect_result result = new topicOptionSelect_result();
        try {
          result.success = iface.topicOptionSelect(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicOptionSelectNoCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionSelectNoCache_args> {
      public topicOptionSelectNoCache() {
        super("topicOptionSelectNoCache");
      }

      public topicOptionSelectNoCache_args getEmptyArgsInstance() {
        return new topicOptionSelectNoCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionSelectNoCache_result getResult(I iface, topicOptionSelectNoCache_args args) throws org.apache.thrift.TException {
        topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
        try {
          result.success = iface.topicOptionSelectNoCache(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicOptionCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionCount_args> {
      public topicOptionCount() {
        super("topicOptionCount");
      }

      public topicOptionCount_args getEmptyArgsInstance() {
        return new topicOptionCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionCount_result getResult(I iface, topicOptionCount_args args) throws org.apache.thrift.TException {
        topicOptionCount_result result = new topicOptionCount_result();
        try {
          result.success = iface.topicOptionCount(args.abstractSql);
          result.setSuccessIsSet(true);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicInsert_args> {
      public topicInsert() {
        super("topicInsert");
      }

      public topicInsert_args getEmptyArgsInstance() {
        return new topicInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicInsert_result getResult(I iface, topicInsert_args args) throws org.apache.thrift.TException {
        topicInsert_result result = new topicInsert_result();
        result.success = iface.topicInsert(args.topic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicUpdate_args> {
      public topicUpdate() {
        super("topicUpdate");
      }

      public topicUpdate_args getEmptyArgsInstance() {
        return new topicUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicUpdate_result getResult(I iface, topicUpdate_args args) throws org.apache.thrift.TException {
        topicUpdate_result result = new topicUpdate_result();
        result.success = iface.topicUpdate(args.topic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicRemove_args> {
      public topicRemove() {
        super("topicRemove");
      }

      public topicRemove_args getEmptyArgsInstance() {
        return new topicRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicRemove_result getResult(I iface, topicRemove_args args) throws org.apache.thrift.TException {
        topicRemove_result result = new topicRemove_result();
        result.success = iface.topicRemove(args.topic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicSelect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelect_args> {
      public topicSelect() {
        super("topicSelect");
      }

      public topicSelect_args getEmptyArgsInstance() {
        return new topicSelect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelect_result getResult(I iface, topicSelect_args args) throws org.apache.thrift.TException {
        topicSelect_result result = new topicSelect_result();
        try {
          result.success = iface.topicSelect(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicSelectNoCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelectNoCache_args> {
      public topicSelectNoCache() {
        super("topicSelectNoCache");
      }

      public topicSelectNoCache_args getEmptyArgsInstance() {
        return new topicSelectNoCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelectNoCache_result getResult(I iface, topicSelectNoCache_args args) throws org.apache.thrift.TException {
        topicSelectNoCache_result result = new topicSelectNoCache_result();
        try {
          result.success = iface.topicSelectNoCache(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicCount_args> {
      public topicCount() {
        super("topicCount");
      }

      public topicCount_args getEmptyArgsInstance() {
        return new topicCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicCount_result getResult(I iface, topicCount_args args) throws org.apache.thrift.TException {
        topicCount_result result = new topicCount_result();
        try {
          result.success = iface.topicCount(args.abstractSql);
          result.setSuccessIsSet(true);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicBankInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankInsert_args> {
      public topicBankInsert() {
        super("topicBankInsert");
      }

      public topicBankInsert_args getEmptyArgsInstance() {
        return new topicBankInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankInsert_result getResult(I iface, topicBankInsert_args args) throws org.apache.thrift.TException {
        topicBankInsert_result result = new topicBankInsert_result();
        result.success = iface.topicBankInsert(args.topicBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankUpdate_args> {
      public topicBankUpdate() {
        super("topicBankUpdate");
      }

      public topicBankUpdate_args getEmptyArgsInstance() {
        return new topicBankUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankUpdate_result getResult(I iface, topicBankUpdate_args args) throws org.apache.thrift.TException {
        topicBankUpdate_result result = new topicBankUpdate_result();
        result.success = iface.topicBankUpdate(args.topicBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankRemove_args> {
      public topicBankRemove() {
        super("topicBankRemove");
      }

      public topicBankRemove_args getEmptyArgsInstance() {
        return new topicBankRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankRemove_result getResult(I iface, topicBankRemove_args args) throws org.apache.thrift.TException {
        topicBankRemove_result result = new topicBankRemove_result();
        result.success = iface.topicBankRemove(args.topicBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankSelect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelect_args> {
      public topicBankSelect() {
        super("topicBankSelect");
      }

      public topicBankSelect_args getEmptyArgsInstance() {
        return new topicBankSelect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelect_result getResult(I iface, topicBankSelect_args args) throws org.apache.thrift.TException {
        topicBankSelect_result result = new topicBankSelect_result();
        try {
          result.success = iface.topicBankSelect(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicBankSelectNoCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelectNoCache_args> {
      public topicBankSelectNoCache() {
        super("topicBankSelectNoCache");
      }

      public topicBankSelectNoCache_args getEmptyArgsInstance() {
        return new topicBankSelectNoCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelectNoCache_result getResult(I iface, topicBankSelectNoCache_args args) throws org.apache.thrift.TException {
        topicBankSelectNoCache_result result = new topicBankSelectNoCache_result();
        try {
          result.success = iface.topicBankSelectNoCache(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicBankCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankCount_args> {
      public topicBankCount() {
        super("topicBankCount");
      }

      public topicBankCount_args getEmptyArgsInstance() {
        return new topicBankCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankCount_result getResult(I iface, topicBankCount_args args) throws org.apache.thrift.TException {
        topicBankCount_result result = new topicBankCount_result();
        try {
          result.success = iface.topicBankCount(args.abstractSql);
          result.setSuccessIsSet(true);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("topicOptionInsert", new topicOptionInsert());
      processMap.put("topicOptionUpdate", new topicOptionUpdate());
      processMap.put("topicOptionRemove", new topicOptionRemove());
      processMap.put("topicOptionSelect", new topicOptionSelect());
      processMap.put("topicOptionSelectNoCache", new topicOptionSelectNoCache());
      processMap.put("topicOptionCount", new topicOptionCount());
      processMap.put("topicInsert", new topicInsert());
      processMap.put("topicUpdate", new topicUpdate());
      processMap.put("topicRemove", new topicRemove());
      processMap.put("topicSelect", new topicSelect());
      processMap.put("topicSelectNoCache", new topicSelectNoCache());
      processMap.put("topicCount", new topicCount());
      processMap.put("topicBankInsert", new topicBankInsert());
      processMap.put("topicBankUpdate", new topicBankUpdate());
      processMap.put("topicBankRemove", new topicBankRemove());
      processMap.put("topicBankSelect", new topicBankSelect());
      processMap.put("topicBankSelectNoCache", new topicBankSelectNoCache());
      processMap.put("topicBankCount", new topicBankCount());
      return processMap;
    }

    public static class topicOptionInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionInsert_args, java.lang.Integer> {
      public topicOptionInsert() {
        super("topicOptionInsert");
      }

      public topicOptionInsert_args getEmptyArgsInstance() {
        return new topicOptionInsert_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionInsert_result result = new topicOptionInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionInsert_result result = new topicOptionInsert_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionInsert_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionInsert(args.topicOption,resultHandler);
      }
    }

    public static class topicOptionUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionUpdate_args, java.lang.Integer> {
      public topicOptionUpdate() {
        super("topicOptionUpdate");
      }

      public topicOptionUpdate_args getEmptyArgsInstance() {
        return new topicOptionUpdate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionUpdate_result result = new topicOptionUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionUpdate_result result = new topicOptionUpdate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionUpdate(args.topicOption,resultHandler);
      }
    }

    public static class topicOptionRemove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionRemove_args, java.lang.Integer> {
      public topicOptionRemove() {
        super("topicOptionRemove");
      }

      public topicOptionRemove_args getEmptyArgsInstance() {
        return new topicOptionRemove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionRemove_result result = new topicOptionRemove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionRemove_result result = new topicOptionRemove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionRemove_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionRemove(args.topicOption,resultHandler);
      }
    }

    public static class topicOptionSelect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionSelect_args, java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      public topicOptionSelect() {
        super("topicOptionSelect");
      }

      public topicOptionSelect_args getEmptyArgsInstance() {
        return new topicOptionSelect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicOption> o) {
            topicOptionSelect_result result = new topicOptionSelect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionSelect_result result = new topicOptionSelect_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionSelect_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionSelect(args.abstractSql,resultHandler);
      }
    }

    public static class topicOptionSelectNoCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionSelectNoCache_args, java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      public topicOptionSelectNoCache() {
        super("topicOptionSelectNoCache");
      }

      public topicOptionSelectNoCache_args getEmptyArgsInstance() {
        return new topicOptionSelectNoCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicOption> o) {
            topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionSelectNoCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionSelectNoCache(args.abstractSql,resultHandler);
      }
    }

    public static class topicOptionCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionCount_args, java.lang.Integer> {
      public topicOptionCount() {
        super("topicOptionCount");
      }

      public topicOptionCount_args getEmptyArgsInstance() {
        return new topicOptionCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionCount_result result = new topicOptionCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionCount_result result = new topicOptionCount_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionCount(args.abstractSql,resultHandler);
      }
    }

    public static class topicInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicInsert_args, java.lang.Integer> {
      public topicInsert() {
        super("topicInsert");
      }

      public topicInsert_args getEmptyArgsInstance() {
        return new topicInsert_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicInsert_result result = new topicInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicInsert_result result = new topicInsert_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicInsert_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicInsert(args.topic,resultHandler);
      }
    }

    public static class topicUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicUpdate_args, java.lang.Integer> {
      public topicUpdate() {
        super("topicUpdate");
      }

      public topicUpdate_args getEmptyArgsInstance() {
        return new topicUpdate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicUpdate_result result = new topicUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicUpdate_result result = new topicUpdate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicUpdate(args.topic,resultHandler);
      }
    }

    public static class topicRemove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicRemove_args, java.lang.Integer> {
      public topicRemove() {
        super("topicRemove");
      }

      public topicRemove_args getEmptyArgsInstance() {
        return new topicRemove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicRemove_result result = new topicRemove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicRemove_result result = new topicRemove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicRemove_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicRemove(args.topic,resultHandler);
      }
    }

    public static class topicSelect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelect_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelect() {
        super("topicSelect");
      }

      public topicSelect_args getEmptyArgsInstance() {
        return new topicSelect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelect_result result = new topicSelect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelect_result result = new topicSelect_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelect_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelect(args.abstractSql,resultHandler);
      }
    }

    public static class topicSelectNoCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelectNoCache_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelectNoCache() {
        super("topicSelectNoCache");
      }

      public topicSelectNoCache_args getEmptyArgsInstance() {
        return new topicSelectNoCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelectNoCache_result result = new topicSelectNoCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelectNoCache_result result = new topicSelectNoCache_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelectNoCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelectNoCache(args.abstractSql,resultHandler);
      }
    }

    public static class topicCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicCount_args, java.lang.Integer> {
      public topicCount() {
        super("topicCount");
      }

      public topicCount_args getEmptyArgsInstance() {
        return new topicCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicCount_result result = new topicCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicCount_result result = new topicCount_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicCount(args.abstractSql,resultHandler);
      }
    }

    public static class topicBankInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankInsert_args, java.lang.Integer> {
      public topicBankInsert() {
        super("topicBankInsert");
      }

      public topicBankInsert_args getEmptyArgsInstance() {
        return new topicBankInsert_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankInsert_result result = new topicBankInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankInsert_result result = new topicBankInsert_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankInsert_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankInsert(args.topicBank,resultHandler);
      }
    }

    public static class topicBankUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankUpdate_args, java.lang.Integer> {
      public topicBankUpdate() {
        super("topicBankUpdate");
      }

      public topicBankUpdate_args getEmptyArgsInstance() {
        return new topicBankUpdate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankUpdate_result result = new topicBankUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankUpdate_result result = new topicBankUpdate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankUpdate(args.topicBank,resultHandler);
      }
    }

    public static class topicBankRemove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankRemove_args, java.lang.Integer> {
      public topicBankRemove() {
        super("topicBankRemove");
      }

      public topicBankRemove_args getEmptyArgsInstance() {
        return new topicBankRemove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankRemove_result result = new topicBankRemove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankRemove_result result = new topicBankRemove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankRemove_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankRemove(args.topicBank,resultHandler);
      }
    }

    public static class topicBankSelect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelect_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelect() {
        super("topicBankSelect");
      }

      public topicBankSelect_args getEmptyArgsInstance() {
        return new topicBankSelect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelect_result result = new topicBankSelect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelect_result result = new topicBankSelect_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelect_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelect(args.abstractSql,resultHandler);
      }
    }

    public static class topicBankSelectNoCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelectNoCache_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelectNoCache() {
        super("topicBankSelectNoCache");
      }

      public topicBankSelectNoCache_args getEmptyArgsInstance() {
        return new topicBankSelectNoCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelectNoCache_result result = new topicBankSelectNoCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelectNoCache_result result = new topicBankSelectNoCache_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelectNoCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelectNoCache(args.abstractSql,resultHandler);
      }
    }

    public static class topicBankCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankCount_args, java.lang.Integer> {
      public topicBankCount() {
        super("topicBankCount");
      }

      public topicBankCount_args getEmptyArgsInstance() {
        return new topicBankCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankCount_result result = new topicBankCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankCount_result result = new topicBankCount_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankCount(args.abstractSql,resultHandler);
      }
    }

  }

  public static class topicOptionInsert_args implements org.apache.thrift.TBase<topicOptionInsert_args, topicOptionInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionInsert_args");

    private static final org.apache.thrift.protocol.TField TOPIC_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOption", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionInsert_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionInsert_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption topicOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_OPTION((short)1, "topicOption");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_OPTION
            return TOPIC_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_OPTION, new org.apache.thrift.meta_data.FieldMetaData("topicOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionInsert_args.class, metaDataMap);
    }

    public topicOptionInsert_args() {
    }

    public topicOptionInsert_args(
      com.wenshao.dal.thriftgen.TopicOption topicOption)
    {
      this();
      this.topicOption = topicOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionInsert_args(topicOptionInsert_args other) {
      if (other.isSetTopicOption()) {
        this.topicOption = new com.wenshao.dal.thriftgen.TopicOption(other.topicOption);
      }
    }

    public topicOptionInsert_args deepCopy() {
      return new topicOptionInsert_args(this);
    }

    @Override
    public void clear() {
      this.topicOption = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getTopicOption() {
      return this.topicOption;
    }

    public topicOptionInsert_args setTopicOption(com.wenshao.dal.thriftgen.TopicOption topicOption) {
      this.topicOption = topicOption;
      return this;
    }

    public void unsetTopicOption() {
      this.topicOption = null;
    }

    /** Returns true if field topicOption is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicOption() {
      return this.topicOption != null;
    }

    public void setTopicOptionIsSet(boolean value) {
      if (!value) {
        this.topicOption = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_OPTION:
        if (value == null) {
          unsetTopicOption();
        } else {
          setTopicOption((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_OPTION:
        return getTopicOption();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_OPTION:
        return isSetTopicOption();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionInsert_args)
        return this.equals((topicOptionInsert_args)that);
      return false;
    }

    public boolean equals(topicOptionInsert_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicOption = true && this.isSetTopicOption();
      boolean that_present_topicOption = true && that.isSetTopicOption();
      if (this_present_topicOption || that_present_topicOption) {
        if (!(this_present_topicOption && that_present_topicOption))
          return false;
        if (!this.topicOption.equals(that.topicOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicOption()) ? 131071 : 524287);
      if (isSetTopicOption())
        hashCode = hashCode * 8191 + topicOption.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicOption()).compareTo(other.isSetTopicOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOption, other.topicOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionInsert_args(");
      boolean first = true;

      sb.append("topicOption:");
      if (this.topicOption == null) {
        sb.append("null");
      } else {
        sb.append(this.topicOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicOption != null) {
        topicOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionInsert_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_argsStandardScheme getScheme() {
        return new topicOptionInsert_argsStandardScheme();
      }
    }

    private static class topicOptionInsert_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
                struct.topicOption.read(iprot);
                struct.setTopicOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicOption != null) {
          oprot.writeFieldBegin(TOPIC_OPTION_FIELD_DESC);
          struct.topicOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionInsert_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_argsTupleScheme getScheme() {
        return new topicOptionInsert_argsTupleScheme();
      }
    }

    private static class topicOptionInsert_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicOption()) {
          struct.topicOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
          struct.topicOption.read(iprot);
          struct.setTopicOptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionInsert_result implements org.apache.thrift.TBase<topicOptionInsert_result, topicOptionInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionInsert_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionInsert_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionInsert_result.class, metaDataMap);
    }

    public topicOptionInsert_result() {
    }

    public topicOptionInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionInsert_result(topicOptionInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicOptionInsert_result deepCopy() {
      return new topicOptionInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionInsert_result)
        return this.equals((topicOptionInsert_result)that);
      return false;
    }

    public boolean equals(topicOptionInsert_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionInsert_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_resultStandardScheme getScheme() {
        return new topicOptionInsert_resultStandardScheme();
      }
    }

    private static class topicOptionInsert_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionInsert_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_resultTupleScheme getScheme() {
        return new topicOptionInsert_resultTupleScheme();
      }
    }

    private static class topicOptionInsert_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionUpdate_args implements org.apache.thrift.TBase<topicOptionUpdate_args, topicOptionUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionUpdate_args");

    private static final org.apache.thrift.protocol.TField TOPIC_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOption", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionUpdate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionUpdate_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption topicOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_OPTION((short)1, "topicOption");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_OPTION
            return TOPIC_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_OPTION, new org.apache.thrift.meta_data.FieldMetaData("topicOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionUpdate_args.class, metaDataMap);
    }

    public topicOptionUpdate_args() {
    }

    public topicOptionUpdate_args(
      com.wenshao.dal.thriftgen.TopicOption topicOption)
    {
      this();
      this.topicOption = topicOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionUpdate_args(topicOptionUpdate_args other) {
      if (other.isSetTopicOption()) {
        this.topicOption = new com.wenshao.dal.thriftgen.TopicOption(other.topicOption);
      }
    }

    public topicOptionUpdate_args deepCopy() {
      return new topicOptionUpdate_args(this);
    }

    @Override
    public void clear() {
      this.topicOption = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getTopicOption() {
      return this.topicOption;
    }

    public topicOptionUpdate_args setTopicOption(com.wenshao.dal.thriftgen.TopicOption topicOption) {
      this.topicOption = topicOption;
      return this;
    }

    public void unsetTopicOption() {
      this.topicOption = null;
    }

    /** Returns true if field topicOption is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicOption() {
      return this.topicOption != null;
    }

    public void setTopicOptionIsSet(boolean value) {
      if (!value) {
        this.topicOption = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_OPTION:
        if (value == null) {
          unsetTopicOption();
        } else {
          setTopicOption((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_OPTION:
        return getTopicOption();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_OPTION:
        return isSetTopicOption();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionUpdate_args)
        return this.equals((topicOptionUpdate_args)that);
      return false;
    }

    public boolean equals(topicOptionUpdate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicOption = true && this.isSetTopicOption();
      boolean that_present_topicOption = true && that.isSetTopicOption();
      if (this_present_topicOption || that_present_topicOption) {
        if (!(this_present_topicOption && that_present_topicOption))
          return false;
        if (!this.topicOption.equals(that.topicOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicOption()) ? 131071 : 524287);
      if (isSetTopicOption())
        hashCode = hashCode * 8191 + topicOption.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicOption()).compareTo(other.isSetTopicOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOption, other.topicOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionUpdate_args(");
      boolean first = true;

      sb.append("topicOption:");
      if (this.topicOption == null) {
        sb.append("null");
      } else {
        sb.append(this.topicOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicOption != null) {
        topicOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionUpdate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_argsStandardScheme getScheme() {
        return new topicOptionUpdate_argsStandardScheme();
      }
    }

    private static class topicOptionUpdate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
                struct.topicOption.read(iprot);
                struct.setTopicOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicOption != null) {
          oprot.writeFieldBegin(TOPIC_OPTION_FIELD_DESC);
          struct.topicOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionUpdate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_argsTupleScheme getScheme() {
        return new topicOptionUpdate_argsTupleScheme();
      }
    }

    private static class topicOptionUpdate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicOption()) {
          struct.topicOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
          struct.topicOption.read(iprot);
          struct.setTopicOptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionUpdate_result implements org.apache.thrift.TBase<topicOptionUpdate_result, topicOptionUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionUpdate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionUpdate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionUpdate_result.class, metaDataMap);
    }

    public topicOptionUpdate_result() {
    }

    public topicOptionUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionUpdate_result(topicOptionUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicOptionUpdate_result deepCopy() {
      return new topicOptionUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionUpdate_result)
        return this.equals((topicOptionUpdate_result)that);
      return false;
    }

    public boolean equals(topicOptionUpdate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionUpdate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_resultStandardScheme getScheme() {
        return new topicOptionUpdate_resultStandardScheme();
      }
    }

    private static class topicOptionUpdate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionUpdate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_resultTupleScheme getScheme() {
        return new topicOptionUpdate_resultTupleScheme();
      }
    }

    private static class topicOptionUpdate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionRemove_args implements org.apache.thrift.TBase<topicOptionRemove_args, topicOptionRemove_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionRemove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionRemove_args");

    private static final org.apache.thrift.protocol.TField TOPIC_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOption", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionRemove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionRemove_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption topicOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_OPTION((short)1, "topicOption");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_OPTION
            return TOPIC_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_OPTION, new org.apache.thrift.meta_data.FieldMetaData("topicOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionRemove_args.class, metaDataMap);
    }

    public topicOptionRemove_args() {
    }

    public topicOptionRemove_args(
      com.wenshao.dal.thriftgen.TopicOption topicOption)
    {
      this();
      this.topicOption = topicOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionRemove_args(topicOptionRemove_args other) {
      if (other.isSetTopicOption()) {
        this.topicOption = new com.wenshao.dal.thriftgen.TopicOption(other.topicOption);
      }
    }

    public topicOptionRemove_args deepCopy() {
      return new topicOptionRemove_args(this);
    }

    @Override
    public void clear() {
      this.topicOption = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getTopicOption() {
      return this.topicOption;
    }

    public topicOptionRemove_args setTopicOption(com.wenshao.dal.thriftgen.TopicOption topicOption) {
      this.topicOption = topicOption;
      return this;
    }

    public void unsetTopicOption() {
      this.topicOption = null;
    }

    /** Returns true if field topicOption is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicOption() {
      return this.topicOption != null;
    }

    public void setTopicOptionIsSet(boolean value) {
      if (!value) {
        this.topicOption = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_OPTION:
        if (value == null) {
          unsetTopicOption();
        } else {
          setTopicOption((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_OPTION:
        return getTopicOption();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_OPTION:
        return isSetTopicOption();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionRemove_args)
        return this.equals((topicOptionRemove_args)that);
      return false;
    }

    public boolean equals(topicOptionRemove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicOption = true && this.isSetTopicOption();
      boolean that_present_topicOption = true && that.isSetTopicOption();
      if (this_present_topicOption || that_present_topicOption) {
        if (!(this_present_topicOption && that_present_topicOption))
          return false;
        if (!this.topicOption.equals(that.topicOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicOption()) ? 131071 : 524287);
      if (isSetTopicOption())
        hashCode = hashCode * 8191 + topicOption.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicOption()).compareTo(other.isSetTopicOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOption, other.topicOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionRemove_args(");
      boolean first = true;

      sb.append("topicOption:");
      if (this.topicOption == null) {
        sb.append("null");
      } else {
        sb.append(this.topicOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicOption != null) {
        topicOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionRemove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_argsStandardScheme getScheme() {
        return new topicOptionRemove_argsStandardScheme();
      }
    }

    private static class topicOptionRemove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
                struct.topicOption.read(iprot);
                struct.setTopicOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicOption != null) {
          oprot.writeFieldBegin(TOPIC_OPTION_FIELD_DESC);
          struct.topicOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionRemove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_argsTupleScheme getScheme() {
        return new topicOptionRemove_argsTupleScheme();
      }
    }

    private static class topicOptionRemove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicOption()) {
          struct.topicOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
          struct.topicOption.read(iprot);
          struct.setTopicOptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionRemove_result implements org.apache.thrift.TBase<topicOptionRemove_result, topicOptionRemove_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionRemove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionRemove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionRemove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionRemove_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionRemove_result.class, metaDataMap);
    }

    public topicOptionRemove_result() {
    }

    public topicOptionRemove_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionRemove_result(topicOptionRemove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicOptionRemove_result deepCopy() {
      return new topicOptionRemove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionRemove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionRemove_result)
        return this.equals((topicOptionRemove_result)that);
      return false;
    }

    public boolean equals(topicOptionRemove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionRemove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionRemove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_resultStandardScheme getScheme() {
        return new topicOptionRemove_resultStandardScheme();
      }
    }

    private static class topicOptionRemove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionRemove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_resultTupleScheme getScheme() {
        return new topicOptionRemove_resultTupleScheme();
      }
    }

    private static class topicOptionRemove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelect_args implements org.apache.thrift.TBase<topicOptionSelect_args, topicOptionSelect_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelect_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelect_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelect_args.class, metaDataMap);
    }

    public topicOptionSelect_args() {
    }

    public topicOptionSelect_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelect_args(topicOptionSelect_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicOptionSelect_args deepCopy() {
      return new topicOptionSelect_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicOptionSelect_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelect_args)
        return this.equals((topicOptionSelect_args)that);
      return false;
    }

    public boolean equals(topicOptionSelect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelect_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_argsStandardScheme getScheme() {
        return new topicOptionSelect_argsStandardScheme();
      }
    }

    private static class topicOptionSelect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_argsTupleScheme getScheme() {
        return new topicOptionSelect_argsTupleScheme();
      }
    }

    private static class topicOptionSelect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelect_result implements org.apache.thrift.TBase<topicOptionSelect_result, topicOptionSelect_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelect_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelect_result.class, metaDataMap);
    }

    public topicOptionSelect_result() {
    }

    public topicOptionSelect_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicOption> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelect_result(topicOptionSelect_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicOption> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicOption other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicOption(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicOptionSelect_result deepCopy() {
      return new topicOptionSelect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicOption> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicOption elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getSuccess() {
      return this.success;
    }

    public topicOptionSelect_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicOption> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicOptionSelect_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicOption>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelect_result)
        return this.equals((topicOptionSelect_result)that);
      return false;
    }

    public boolean equals(topicOptionSelect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_resultStandardScheme getScheme() {
        return new topicOptionSelect_resultStandardScheme();
      }
    }

    private static class topicOptionSelect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list232.size);
                  com.wenshao.dal.thriftgen.TopicOption _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new com.wenshao.dal.thriftgen.TopicOption();
                    _elem233.read(iprot);
                    struct.success.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicOption _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_resultTupleScheme getScheme() {
        return new topicOptionSelect_resultTupleScheme();
      }
    }

    private static class topicOptionSelect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicOption _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list237.size);
            com.wenshao.dal.thriftgen.TopicOption _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new com.wenshao.dal.thriftgen.TopicOption();
              _elem238.read(iprot);
              struct.success.add(_elem238);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelectNoCache_args implements org.apache.thrift.TBase<topicOptionSelectNoCache_args, topicOptionSelectNoCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelectNoCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelectNoCache_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelectNoCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelectNoCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelectNoCache_args.class, metaDataMap);
    }

    public topicOptionSelectNoCache_args() {
    }

    public topicOptionSelectNoCache_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelectNoCache_args(topicOptionSelectNoCache_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicOptionSelectNoCache_args deepCopy() {
      return new topicOptionSelectNoCache_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicOptionSelectNoCache_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelectNoCache_args)
        return this.equals((topicOptionSelectNoCache_args)that);
      return false;
    }

    public boolean equals(topicOptionSelectNoCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelectNoCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelectNoCache_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelectNoCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_argsStandardScheme getScheme() {
        return new topicOptionSelectNoCache_argsStandardScheme();
      }
    }

    private static class topicOptionSelectNoCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelectNoCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelectNoCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_argsTupleScheme getScheme() {
        return new topicOptionSelectNoCache_argsTupleScheme();
      }
    }

    private static class topicOptionSelectNoCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelectNoCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelectNoCache_result implements org.apache.thrift.TBase<topicOptionSelectNoCache_result, topicOptionSelectNoCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelectNoCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelectNoCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelectNoCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelectNoCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelectNoCache_result.class, metaDataMap);
    }

    public topicOptionSelectNoCache_result() {
    }

    public topicOptionSelectNoCache_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicOption> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelectNoCache_result(topicOptionSelectNoCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicOption> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicOption other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicOption(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicOptionSelectNoCache_result deepCopy() {
      return new topicOptionSelectNoCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicOption> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicOption elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getSuccess() {
      return this.success;
    }

    public topicOptionSelectNoCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicOption> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicOptionSelectNoCache_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicOption>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelectNoCache_result)
        return this.equals((topicOptionSelectNoCache_result)that);
      return false;
    }

    public boolean equals(topicOptionSelectNoCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelectNoCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelectNoCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelectNoCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_resultStandardScheme getScheme() {
        return new topicOptionSelectNoCache_resultStandardScheme();
      }
    }

    private static class topicOptionSelectNoCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelectNoCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list240.size);
                  com.wenshao.dal.thriftgen.TopicOption _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new com.wenshao.dal.thriftgen.TopicOption();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicOption _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelectNoCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_resultTupleScheme getScheme() {
        return new topicOptionSelectNoCache_resultTupleScheme();
      }
    }

    private static class topicOptionSelectNoCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelectNoCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicOption _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list245.size);
            com.wenshao.dal.thriftgen.TopicOption _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new com.wenshao.dal.thriftgen.TopicOption();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionCount_args implements org.apache.thrift.TBase<topicOptionCount_args, topicOptionCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionCount_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionCount_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionCount_args.class, metaDataMap);
    }

    public topicOptionCount_args() {
    }

    public topicOptionCount_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionCount_args(topicOptionCount_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicOptionCount_args deepCopy() {
      return new topicOptionCount_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicOptionCount_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionCount_args)
        return this.equals((topicOptionCount_args)that);
      return false;
    }

    public boolean equals(topicOptionCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionCount_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionCount_argsStandardScheme getScheme() {
        return new topicOptionCount_argsStandardScheme();
      }
    }

    private static class topicOptionCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionCount_argsTupleScheme getScheme() {
        return new topicOptionCount_argsTupleScheme();
      }
    }

    private static class topicOptionCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionCount_result implements org.apache.thrift.TBase<topicOptionCount_result, topicOptionCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionCount_resultTupleSchemeFactory();

    public int success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionCount_result.class, metaDataMap);
    }

    public topicOptionCount_result() {
    }

    public topicOptionCount_result(
      int success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionCount_result(topicOptionCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicOptionCount_result deepCopy() {
      return new topicOptionCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.re = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicOptionCount_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionCount_result)
        return this.equals((topicOptionCount_result)that);
      return false;
    }

    public boolean equals(topicOptionCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionCount_resultStandardScheme getScheme() {
        return new topicOptionCount_resultStandardScheme();
      }
    }

    private static class topicOptionCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionCount_resultTupleScheme getScheme() {
        return new topicOptionCount_resultTupleScheme();
      }
    }

    private static class topicOptionCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicInsert_args implements org.apache.thrift.TBase<topicInsert_args, topicInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicInsert_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicInsert_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicInsert_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicInsert_args.class, metaDataMap);
    }

    public topicInsert_args() {
    }

    public topicInsert_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicInsert_args(topicInsert_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicInsert_args deepCopy() {
      return new topicInsert_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicInsert_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicInsert_args)
        return this.equals((topicInsert_args)that);
      return false;
    }

    public boolean equals(topicInsert_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicInsert_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicInsert_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_argsStandardScheme getScheme() {
        return new topicInsert_argsStandardScheme();
      }
    }

    private static class topicInsert_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicInsert_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_argsTupleScheme getScheme() {
        return new topicInsert_argsTupleScheme();
      }
    }

    private static class topicInsert_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicInsert_result implements org.apache.thrift.TBase<topicInsert_result, topicInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicInsert_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicInsert_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicInsert_result.class, metaDataMap);
    }

    public topicInsert_result() {
    }

    public topicInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicInsert_result(topicInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicInsert_result deepCopy() {
      return new topicInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicInsert_result)
        return this.equals((topicInsert_result)that);
      return false;
    }

    public boolean equals(topicInsert_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicInsert_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_resultStandardScheme getScheme() {
        return new topicInsert_resultStandardScheme();
      }
    }

    private static class topicInsert_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicInsert_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_resultTupleScheme getScheme() {
        return new topicInsert_resultTupleScheme();
      }
    }

    private static class topicInsert_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicUpdate_args implements org.apache.thrift.TBase<topicUpdate_args, topicUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicUpdate_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicUpdate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicUpdate_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicUpdate_args.class, metaDataMap);
    }

    public topicUpdate_args() {
    }

    public topicUpdate_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicUpdate_args(topicUpdate_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicUpdate_args deepCopy() {
      return new topicUpdate_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicUpdate_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicUpdate_args)
        return this.equals((topicUpdate_args)that);
      return false;
    }

    public boolean equals(topicUpdate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicUpdate_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicUpdate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_argsStandardScheme getScheme() {
        return new topicUpdate_argsStandardScheme();
      }
    }

    private static class topicUpdate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicUpdate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_argsTupleScheme getScheme() {
        return new topicUpdate_argsTupleScheme();
      }
    }

    private static class topicUpdate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicUpdate_result implements org.apache.thrift.TBase<topicUpdate_result, topicUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicUpdate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicUpdate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicUpdate_result.class, metaDataMap);
    }

    public topicUpdate_result() {
    }

    public topicUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicUpdate_result(topicUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicUpdate_result deepCopy() {
      return new topicUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicUpdate_result)
        return this.equals((topicUpdate_result)that);
      return false;
    }

    public boolean equals(topicUpdate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicUpdate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_resultStandardScheme getScheme() {
        return new topicUpdate_resultStandardScheme();
      }
    }

    private static class topicUpdate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicUpdate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_resultTupleScheme getScheme() {
        return new topicUpdate_resultTupleScheme();
      }
    }

    private static class topicUpdate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicRemove_args implements org.apache.thrift.TBase<topicRemove_args, topicRemove_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicRemove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicRemove_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicRemove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicRemove_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicRemove_args.class, metaDataMap);
    }

    public topicRemove_args() {
    }

    public topicRemove_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicRemove_args(topicRemove_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicRemove_args deepCopy() {
      return new topicRemove_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicRemove_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicRemove_args)
        return this.equals((topicRemove_args)that);
      return false;
    }

    public boolean equals(topicRemove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicRemove_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicRemove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_argsStandardScheme getScheme() {
        return new topicRemove_argsStandardScheme();
      }
    }

    private static class topicRemove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicRemove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_argsTupleScheme getScheme() {
        return new topicRemove_argsTupleScheme();
      }
    }

    private static class topicRemove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicRemove_result implements org.apache.thrift.TBase<topicRemove_result, topicRemove_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicRemove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicRemove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicRemove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicRemove_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicRemove_result.class, metaDataMap);
    }

    public topicRemove_result() {
    }

    public topicRemove_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicRemove_result(topicRemove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicRemove_result deepCopy() {
      return new topicRemove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicRemove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicRemove_result)
        return this.equals((topicRemove_result)that);
      return false;
    }

    public boolean equals(topicRemove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicRemove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicRemove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_resultStandardScheme getScheme() {
        return new topicRemove_resultStandardScheme();
      }
    }

    private static class topicRemove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicRemove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_resultTupleScheme getScheme() {
        return new topicRemove_resultTupleScheme();
      }
    }

    private static class topicRemove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelect_args implements org.apache.thrift.TBase<topicSelect_args, topicSelect_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelect_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelect_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelect_args.class, metaDataMap);
    }

    public topicSelect_args() {
    }

    public topicSelect_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelect_args(topicSelect_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicSelect_args deepCopy() {
      return new topicSelect_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicSelect_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelect_args)
        return this.equals((topicSelect_args)that);
      return false;
    }

    public boolean equals(topicSelect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelect_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_argsStandardScheme getScheme() {
        return new topicSelect_argsStandardScheme();
      }
    }

    private static class topicSelect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_argsTupleScheme getScheme() {
        return new topicSelect_argsTupleScheme();
      }
    }

    private static class topicSelect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelect_result implements org.apache.thrift.TBase<topicSelect_result, topicSelect_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelect_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelect_result.class, metaDataMap);
    }

    public topicSelect_result() {
    }

    public topicSelect_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelect_result(topicSelect_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicSelect_result deepCopy() {
      return new topicSelect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelect_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicSelect_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelect_result)
        return this.equals((topicSelect_result)that);
      return false;
    }

    public boolean equals(topicSelect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_resultStandardScheme getScheme() {
        return new topicSelect_resultStandardScheme();
      }
    }

    private static class topicSelect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list248.size);
                  com.wenshao.dal.thriftgen.Topic _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new com.wenshao.dal.thriftgen.Topic();
                    _elem249.read(iprot);
                    struct.success.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_resultTupleScheme getScheme() {
        return new topicSelect_resultTupleScheme();
      }
    }

    private static class topicSelect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list253.size);
            com.wenshao.dal.thriftgen.Topic _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new com.wenshao.dal.thriftgen.Topic();
              _elem254.read(iprot);
              struct.success.add(_elem254);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectNoCache_args implements org.apache.thrift.TBase<topicSelectNoCache_args, topicSelectNoCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectNoCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectNoCache_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectNoCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectNoCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectNoCache_args.class, metaDataMap);
    }

    public topicSelectNoCache_args() {
    }

    public topicSelectNoCache_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectNoCache_args(topicSelectNoCache_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicSelectNoCache_args deepCopy() {
      return new topicSelectNoCache_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicSelectNoCache_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectNoCache_args)
        return this.equals((topicSelectNoCache_args)that);
      return false;
    }

    public boolean equals(topicSelectNoCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectNoCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectNoCache_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectNoCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectNoCache_argsStandardScheme getScheme() {
        return new topicSelectNoCache_argsStandardScheme();
      }
    }

    private static class topicSelectNoCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectNoCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectNoCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectNoCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectNoCache_argsTupleScheme getScheme() {
        return new topicSelectNoCache_argsTupleScheme();
      }
    }

    private static class topicSelectNoCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectNoCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectNoCache_result implements org.apache.thrift.TBase<topicSelectNoCache_result, topicSelectNoCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectNoCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectNoCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectNoCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectNoCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectNoCache_result.class, metaDataMap);
    }

    public topicSelectNoCache_result() {
    }

    public topicSelectNoCache_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectNoCache_result(topicSelectNoCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicSelectNoCache_result deepCopy() {
      return new topicSelectNoCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelectNoCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicSelectNoCache_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectNoCache_result)
        return this.equals((topicSelectNoCache_result)that);
      return false;
    }

    public boolean equals(topicSelectNoCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectNoCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectNoCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectNoCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectNoCache_resultStandardScheme getScheme() {
        return new topicSelectNoCache_resultStandardScheme();
      }
    }

    private static class topicSelectNoCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectNoCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list256.size);
                  com.wenshao.dal.thriftgen.Topic _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = new com.wenshao.dal.thriftgen.Topic();
                    _elem257.read(iprot);
                    struct.success.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectNoCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectNoCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectNoCache_resultTupleScheme getScheme() {
        return new topicSelectNoCache_resultTupleScheme();
      }
    }

    private static class topicSelectNoCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectNoCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list261.size);
            com.wenshao.dal.thriftgen.Topic _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = new com.wenshao.dal.thriftgen.Topic();
              _elem262.read(iprot);
              struct.success.add(_elem262);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicCount_args implements org.apache.thrift.TBase<topicCount_args, topicCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicCount_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicCount_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicCount_args.class, metaDataMap);
    }

    public topicCount_args() {
    }

    public topicCount_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicCount_args(topicCount_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicCount_args deepCopy() {
      return new topicCount_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicCount_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicCount_args)
        return this.equals((topicCount_args)that);
      return false;
    }

    public boolean equals(topicCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicCount_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCount_argsStandardScheme getScheme() {
        return new topicCount_argsStandardScheme();
      }
    }

    private static class topicCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCount_argsTupleScheme getScheme() {
        return new topicCount_argsTupleScheme();
      }
    }

    private static class topicCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicCount_result implements org.apache.thrift.TBase<topicCount_result, topicCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicCount_resultTupleSchemeFactory();

    public int success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicCount_result.class, metaDataMap);
    }

    public topicCount_result() {
    }

    public topicCount_result(
      int success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicCount_result(topicCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicCount_result deepCopy() {
      return new topicCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.re = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicCount_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicCount_result)
        return this.equals((topicCount_result)that);
      return false;
    }

    public boolean equals(topicCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCount_resultStandardScheme getScheme() {
        return new topicCount_resultStandardScheme();
      }
    }

    private static class topicCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCount_resultTupleScheme getScheme() {
        return new topicCount_resultTupleScheme();
      }
    }

    private static class topicCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankInsert_args implements org.apache.thrift.TBase<topicBankInsert_args, topicBankInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankInsert_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankInsert_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankInsert_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankInsert_args.class, metaDataMap);
    }

    public topicBankInsert_args() {
    }

    public topicBankInsert_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankInsert_args(topicBankInsert_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankInsert_args deepCopy() {
      return new topicBankInsert_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankInsert_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankInsert_args)
        return this.equals((topicBankInsert_args)that);
      return false;
    }

    public boolean equals(topicBankInsert_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankInsert_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankInsert_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_argsStandardScheme getScheme() {
        return new topicBankInsert_argsStandardScheme();
      }
    }

    private static class topicBankInsert_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankInsert_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_argsTupleScheme getScheme() {
        return new topicBankInsert_argsTupleScheme();
      }
    }

    private static class topicBankInsert_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankInsert_result implements org.apache.thrift.TBase<topicBankInsert_result, topicBankInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankInsert_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankInsert_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankInsert_result.class, metaDataMap);
    }

    public topicBankInsert_result() {
    }

    public topicBankInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankInsert_result(topicBankInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankInsert_result deepCopy() {
      return new topicBankInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankInsert_result)
        return this.equals((topicBankInsert_result)that);
      return false;
    }

    public boolean equals(topicBankInsert_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankInsert_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_resultStandardScheme getScheme() {
        return new topicBankInsert_resultStandardScheme();
      }
    }

    private static class topicBankInsert_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankInsert_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_resultTupleScheme getScheme() {
        return new topicBankInsert_resultTupleScheme();
      }
    }

    private static class topicBankInsert_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankUpdate_args implements org.apache.thrift.TBase<topicBankUpdate_args, topicBankUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankUpdate_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankUpdate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankUpdate_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankUpdate_args.class, metaDataMap);
    }

    public topicBankUpdate_args() {
    }

    public topicBankUpdate_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankUpdate_args(topicBankUpdate_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankUpdate_args deepCopy() {
      return new topicBankUpdate_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankUpdate_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankUpdate_args)
        return this.equals((topicBankUpdate_args)that);
      return false;
    }

    public boolean equals(topicBankUpdate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankUpdate_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankUpdate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_argsStandardScheme getScheme() {
        return new topicBankUpdate_argsStandardScheme();
      }
    }

    private static class topicBankUpdate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankUpdate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_argsTupleScheme getScheme() {
        return new topicBankUpdate_argsTupleScheme();
      }
    }

    private static class topicBankUpdate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankUpdate_result implements org.apache.thrift.TBase<topicBankUpdate_result, topicBankUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankUpdate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankUpdate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankUpdate_result.class, metaDataMap);
    }

    public topicBankUpdate_result() {
    }

    public topicBankUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankUpdate_result(topicBankUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankUpdate_result deepCopy() {
      return new topicBankUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankUpdate_result)
        return this.equals((topicBankUpdate_result)that);
      return false;
    }

    public boolean equals(topicBankUpdate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankUpdate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_resultStandardScheme getScheme() {
        return new topicBankUpdate_resultStandardScheme();
      }
    }

    private static class topicBankUpdate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankUpdate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_resultTupleScheme getScheme() {
        return new topicBankUpdate_resultTupleScheme();
      }
    }

    private static class topicBankUpdate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankRemove_args implements org.apache.thrift.TBase<topicBankRemove_args, topicBankRemove_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankRemove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankRemove_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankRemove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankRemove_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankRemove_args.class, metaDataMap);
    }

    public topicBankRemove_args() {
    }

    public topicBankRemove_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankRemove_args(topicBankRemove_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankRemove_args deepCopy() {
      return new topicBankRemove_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankRemove_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankRemove_args)
        return this.equals((topicBankRemove_args)that);
      return false;
    }

    public boolean equals(topicBankRemove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankRemove_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankRemove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_argsStandardScheme getScheme() {
        return new topicBankRemove_argsStandardScheme();
      }
    }

    private static class topicBankRemove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankRemove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_argsTupleScheme getScheme() {
        return new topicBankRemove_argsTupleScheme();
      }
    }

    private static class topicBankRemove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankRemove_result implements org.apache.thrift.TBase<topicBankRemove_result, topicBankRemove_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankRemove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankRemove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankRemove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankRemove_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankRemove_result.class, metaDataMap);
    }

    public topicBankRemove_result() {
    }

    public topicBankRemove_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankRemove_result(topicBankRemove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankRemove_result deepCopy() {
      return new topicBankRemove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankRemove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankRemove_result)
        return this.equals((topicBankRemove_result)that);
      return false;
    }

    public boolean equals(topicBankRemove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankRemove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankRemove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_resultStandardScheme getScheme() {
        return new topicBankRemove_resultStandardScheme();
      }
    }

    private static class topicBankRemove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankRemove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_resultTupleScheme getScheme() {
        return new topicBankRemove_resultTupleScheme();
      }
    }

    private static class topicBankRemove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelect_args implements org.apache.thrift.TBase<topicBankSelect_args, topicBankSelect_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelect_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelect_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelect_args.class, metaDataMap);
    }

    public topicBankSelect_args() {
    }

    public topicBankSelect_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelect_args(topicBankSelect_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicBankSelect_args deepCopy() {
      return new topicBankSelect_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicBankSelect_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelect_args)
        return this.equals((topicBankSelect_args)that);
      return false;
    }

    public boolean equals(topicBankSelect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelect_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_argsStandardScheme getScheme() {
        return new topicBankSelect_argsStandardScheme();
      }
    }

    private static class topicBankSelect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_argsTupleScheme getScheme() {
        return new topicBankSelect_argsTupleScheme();
      }
    }

    private static class topicBankSelect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelect_result implements org.apache.thrift.TBase<topicBankSelect_result, topicBankSelect_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelect_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelect_result.class, metaDataMap);
    }

    public topicBankSelect_result() {
    }

    public topicBankSelect_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelect_result(topicBankSelect_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicBankSelect_result deepCopy() {
      return new topicBankSelect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelect_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicBankSelect_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelect_result)
        return this.equals((topicBankSelect_result)that);
      return false;
    }

    public boolean equals(topicBankSelect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_resultStandardScheme getScheme() {
        return new topicBankSelect_resultStandardScheme();
      }
    }

    private static class topicBankSelect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list264.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem265.read(iprot);
                    struct.success.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter267 : struct.success)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_resultTupleScheme getScheme() {
        return new topicBankSelect_resultTupleScheme();
      }
    }

    private static class topicBankSelect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter268 : struct.success)
            {
              _iter268.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list269.size);
            com.wenshao.dal.thriftgen.TopicBank _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem270.read(iprot);
              struct.success.add(_elem270);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectNoCache_args implements org.apache.thrift.TBase<topicBankSelectNoCache_args, topicBankSelectNoCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectNoCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectNoCache_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectNoCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectNoCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectNoCache_args.class, metaDataMap);
    }

    public topicBankSelectNoCache_args() {
    }

    public topicBankSelectNoCache_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectNoCache_args(topicBankSelectNoCache_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicBankSelectNoCache_args deepCopy() {
      return new topicBankSelectNoCache_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicBankSelectNoCache_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectNoCache_args)
        return this.equals((topicBankSelectNoCache_args)that);
      return false;
    }

    public boolean equals(topicBankSelectNoCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectNoCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectNoCache_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectNoCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectNoCache_argsStandardScheme getScheme() {
        return new topicBankSelectNoCache_argsStandardScheme();
      }
    }

    private static class topicBankSelectNoCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectNoCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectNoCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectNoCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectNoCache_argsTupleScheme getScheme() {
        return new topicBankSelectNoCache_argsTupleScheme();
      }
    }

    private static class topicBankSelectNoCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectNoCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectNoCache_result implements org.apache.thrift.TBase<topicBankSelectNoCache_result, topicBankSelectNoCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectNoCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectNoCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectNoCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectNoCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectNoCache_result.class, metaDataMap);
    }

    public topicBankSelectNoCache_result() {
    }

    public topicBankSelectNoCache_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectNoCache_result(topicBankSelectNoCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicBankSelectNoCache_result deepCopy() {
      return new topicBankSelectNoCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelectNoCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicBankSelectNoCache_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectNoCache_result)
        return this.equals((topicBankSelectNoCache_result)that);
      return false;
    }

    public boolean equals(topicBankSelectNoCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectNoCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectNoCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectNoCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectNoCache_resultStandardScheme getScheme() {
        return new topicBankSelectNoCache_resultStandardScheme();
      }
    }

    private static class topicBankSelectNoCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectNoCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list272.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem273.read(iprot);
                    struct.success.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectNoCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter275 : struct.success)
            {
              _iter275.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectNoCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectNoCache_resultTupleScheme getScheme() {
        return new topicBankSelectNoCache_resultTupleScheme();
      }
    }

    private static class topicBankSelectNoCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectNoCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter276 : struct.success)
            {
              _iter276.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list277.size);
            com.wenshao.dal.thriftgen.TopicBank _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem278.read(iprot);
              struct.success.add(_elem278);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankCount_args implements org.apache.thrift.TBase<topicBankCount_args, topicBankCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankCount_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankCount_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankCount_args.class, metaDataMap);
    }

    public topicBankCount_args() {
    }

    public topicBankCount_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankCount_args(topicBankCount_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicBankCount_args deepCopy() {
      return new topicBankCount_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicBankCount_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankCount_args)
        return this.equals((topicBankCount_args)that);
      return false;
    }

    public boolean equals(topicBankCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankCount_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCount_argsStandardScheme getScheme() {
        return new topicBankCount_argsStandardScheme();
      }
    }

    private static class topicBankCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCount_argsTupleScheme getScheme() {
        return new topicBankCount_argsTupleScheme();
      }
    }

    private static class topicBankCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankCount_result implements org.apache.thrift.TBase<topicBankCount_result, topicBankCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankCount_resultTupleSchemeFactory();

    public int success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankCount_result.class, metaDataMap);
    }

    public topicBankCount_result() {
    }

    public topicBankCount_result(
      int success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankCount_result(topicBankCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicBankCount_result deepCopy() {
      return new topicBankCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.re = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicBankCount_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankCount_result)
        return this.equals((topicBankCount_result)that);
      return false;
    }

    public boolean equals(topicBankCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCount_resultStandardScheme getScheme() {
        return new topicBankCount_resultStandardScheme();
      }
    }

    private static class topicBankCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCount_resultTupleScheme getScheme() {
        return new topicBankCount_resultTupleScheme();
      }
    }

    private static class topicBankCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
