/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-25")
public class CommonService {

  public interface Iface {

    public int topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException;

    public int topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException;

    public int topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException;

    public com.wenshao.dal.thriftgen.TopicOption topicOptionFindById(int id) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException;

    public int topicInsert(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public int topicUpdate(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public int topicRemove(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public com.wenshao.dal.thriftgen.Topic courseFindById(int id) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelect(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQueryCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQueryNoCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException;

    public int topicCountSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException;

    public int topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public int topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public int topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public com.wenshao.dal.thriftgen.TopicBank topicBankFindById(int id) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelect(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQueryCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException;

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQueryNoCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException;

    public int topicBankCountSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException;

    public int topicBankAddTopic(int tb_id, int topic_id) throws org.apache.thrift.TException;

    public int topicBankRemoveTopic(int tb_id, int topic_id) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionFindById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicOption> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException;

    public void topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException;

    public void topicInsert(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicUpdate(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicRemove(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void courseFindById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.Topic> resultHandler) throws org.apache.thrift.TException;

    public void topicSelect(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicSelectCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicSelectQueryCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicSelectQueryNoCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException;

    public void topicCountSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankFindById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicBank> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelect(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelectCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelectQueryCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankSelectQueryNoCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException;

    public void topicBankCountSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankAddTopic(int tb_id, int topic_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void topicBankRemoveTopic(int tb_id, int topic_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public int topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      send_topicOptionInsert(topicOption);
      return recv_topicOptionInsert();
    }

    public void send_topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      topicOptionInsert_args args = new topicOptionInsert_args();
      args.setTopicOption(topicOption);
      sendBase("topicOptionInsert", args);
    }

    public int recv_topicOptionInsert() throws org.apache.thrift.TException
    {
      topicOptionInsert_result result = new topicOptionInsert_result();
      receiveBase(result, "topicOptionInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionInsert failed: unknown result");
    }

    public int topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      send_topicOptionUpdate(topicOption);
      return recv_topicOptionUpdate();
    }

    public void send_topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      topicOptionUpdate_args args = new topicOptionUpdate_args();
      args.setTopicOption(topicOption);
      sendBase("topicOptionUpdate", args);
    }

    public int recv_topicOptionUpdate() throws org.apache.thrift.TException
    {
      topicOptionUpdate_result result = new topicOptionUpdate_result();
      receiveBase(result, "topicOptionUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionUpdate failed: unknown result");
    }

    public int topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      send_topicOptionRemove(topicOption);
      return recv_topicOptionRemove();
    }

    public void send_topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption) throws org.apache.thrift.TException
    {
      topicOptionRemove_args args = new topicOptionRemove_args();
      args.setTopicOption(topicOption);
      sendBase("topicOptionRemove", args);
    }

    public int recv_topicOptionRemove() throws org.apache.thrift.TException
    {
      topicOptionRemove_result result = new topicOptionRemove_result();
      receiveBase(result, "topicOptionRemove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionRemove failed: unknown result");
    }

    public com.wenshao.dal.thriftgen.TopicOption topicOptionFindById(int id) throws org.apache.thrift.TException
    {
      send_topicOptionFindById(id);
      return recv_topicOptionFindById();
    }

    public void send_topicOptionFindById(int id) throws org.apache.thrift.TException
    {
      topicOptionFindById_args args = new topicOptionFindById_args();
      args.setId(id);
      sendBase("topicOptionFindById", args);
    }

    public com.wenshao.dal.thriftgen.TopicOption recv_topicOptionFindById() throws org.apache.thrift.TException
    {
      topicOptionFindById_result result = new topicOptionFindById_result();
      receiveBase(result, "topicOptionFindById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionFindById failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicOptionSelect(abstractSql);
      return recv_topicOptionSelect();
    }

    public void send_topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicOptionSelect_args args = new topicOptionSelect_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicOptionSelect", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> recv_topicOptionSelect() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicOptionSelect_result result = new topicOptionSelect_result();
      receiveBase(result, "topicOptionSelect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionSelect failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      send_topicOptionSelectNoCache(abstractSql);
      return recv_topicOptionSelectNoCache();
    }

    public void send_topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql) throws org.apache.thrift.TException
    {
      topicOptionSelectNoCache_args args = new topicOptionSelectNoCache_args();
      args.setAbstractSql(abstractSql);
      sendBase("topicOptionSelectNoCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> recv_topicOptionSelectNoCache() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException
    {
      topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
      receiveBase(result, "topicOptionSelectNoCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.re != null) {
        throw result.re;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicOptionSelectNoCache failed: unknown result");
    }

    public int topicInsert(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicInsert(topic);
      return recv_topicInsert();
    }

    public void send_topicInsert(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicInsert_args args = new topicInsert_args();
      args.setTopic(topic);
      sendBase("topicInsert", args);
    }

    public int recv_topicInsert() throws org.apache.thrift.TException
    {
      topicInsert_result result = new topicInsert_result();
      receiveBase(result, "topicInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicInsert failed: unknown result");
    }

    public int topicUpdate(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicUpdate(topic);
      return recv_topicUpdate();
    }

    public void send_topicUpdate(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicUpdate_args args = new topicUpdate_args();
      args.setTopic(topic);
      sendBase("topicUpdate", args);
    }

    public int recv_topicUpdate() throws org.apache.thrift.TException
    {
      topicUpdate_result result = new topicUpdate_result();
      receiveBase(result, "topicUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicUpdate failed: unknown result");
    }

    public int topicRemove(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicRemove(topic);
      return recv_topicRemove();
    }

    public void send_topicRemove(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicRemove_args args = new topicRemove_args();
      args.setTopic(topic);
      sendBase("topicRemove", args);
    }

    public int recv_topicRemove() throws org.apache.thrift.TException
    {
      topicRemove_result result = new topicRemove_result();
      receiveBase(result, "topicRemove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicRemove failed: unknown result");
    }

    public com.wenshao.dal.thriftgen.Topic courseFindById(int id) throws org.apache.thrift.TException
    {
      send_courseFindById(id);
      return recv_courseFindById();
    }

    public void send_courseFindById(int id) throws org.apache.thrift.TException
    {
      courseFindById_args args = new courseFindById_args();
      args.setId(id);
      sendBase("courseFindById", args);
    }

    public com.wenshao.dal.thriftgen.Topic recv_courseFindById() throws org.apache.thrift.TException
    {
      courseFindById_result result = new courseFindById_result();
      receiveBase(result, "courseFindById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "courseFindById failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelect(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      send_topicSelect(topic);
      return recv_topicSelect();
    }

    public void send_topicSelect(com.wenshao.dal.thriftgen.Topic topic) throws org.apache.thrift.TException
    {
      topicSelect_args args = new topicSelect_args();
      args.setTopic(topic);
      sendBase("topicSelect", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelect() throws org.apache.thrift.TException
    {
      topicSelect_result result = new topicSelect_result();
      receiveBase(result, "topicSelect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelect failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      send_topicSelectQuery(topic, query);
      return recv_topicSelectQuery();
    }

    public void send_topicSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      topicSelectQuery_args args = new topicSelectQuery_args();
      args.setTopic(topic);
      args.setQuery(query);
      sendBase("topicSelectQuery", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelectQuery() throws org.apache.thrift.TException
    {
      topicSelectQuery_result result = new topicSelectQuery_result();
      receiveBase(result, "topicSelectQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelectQuery failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      send_topicSelectCustom(topic, custom);
      return recv_topicSelectCustom();
    }

    public void send_topicSelectCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      topicSelectCustom_args args = new topicSelectCustom_args();
      args.setTopic(topic);
      args.setCustom(custom);
      sendBase("topicSelectCustom", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelectCustom() throws org.apache.thrift.TException
    {
      topicSelectCustom_result result = new topicSelectCustom_result();
      receiveBase(result, "topicSelectCustom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelectCustom failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQueryCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      send_topicSelectQueryCustom(topic, query, custom);
      return recv_topicSelectQueryCustom();
    }

    public void send_topicSelectQueryCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      topicSelectQueryCustom_args args = new topicSelectQueryCustom_args();
      args.setTopic(topic);
      args.setQuery(query);
      args.setCustom(custom);
      sendBase("topicSelectQueryCustom", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelectQueryCustom() throws org.apache.thrift.TException
    {
      topicSelectQueryCustom_result result = new topicSelectQueryCustom_result();
      receiveBase(result, "topicSelectQueryCustom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelectQueryCustom failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      send_topicSelectQueryCustomNotCache(topic, query, custom);
      return recv_topicSelectQueryCustomNotCache();
    }

    public void send_topicSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      topicSelectQueryCustomNotCache_args args = new topicSelectQueryCustomNotCache_args();
      args.setTopic(topic);
      args.setQuery(query);
      args.setCustom(custom);
      sendBase("topicSelectQueryCustomNotCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelectQueryCustomNotCache() throws org.apache.thrift.TException
    {
      topicSelectQueryCustomNotCache_result result = new topicSelectQueryCustomNotCache_result();
      receiveBase(result, "topicSelectQueryCustomNotCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelectQueryCustomNotCache failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> topicSelectQueryNoCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      send_topicSelectQueryNoCache(topic, query);
      return recv_topicSelectQueryNoCache();
    }

    public void send_topicSelectQueryNoCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      topicSelectQueryNoCache_args args = new topicSelectQueryNoCache_args();
      args.setTopic(topic);
      args.setQuery(query);
      sendBase("topicSelectQueryNoCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> recv_topicSelectQueryNoCache() throws org.apache.thrift.TException
    {
      topicSelectQueryNoCache_result result = new topicSelectQueryNoCache_result();
      receiveBase(result, "topicSelectQueryNoCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicSelectQueryNoCache failed: unknown result");
    }

    public int topicCountSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      send_topicCountSelectQuery(topic, query);
      return recv_topicCountSelectQuery();
    }

    public void send_topicCountSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      topicCountSelectQuery_args args = new topicCountSelectQuery_args();
      args.setTopic(topic);
      args.setQuery(query);
      sendBase("topicCountSelectQuery", args);
    }

    public int recv_topicCountSelectQuery() throws org.apache.thrift.TException
    {
      topicCountSelectQuery_result result = new topicCountSelectQuery_result();
      receiveBase(result, "topicCountSelectQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicCountSelectQuery failed: unknown result");
    }

    public int topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankInsert(topicBank);
      return recv_topicBankInsert();
    }

    public void send_topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankInsert_args args = new topicBankInsert_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankInsert", args);
    }

    public int recv_topicBankInsert() throws org.apache.thrift.TException
    {
      topicBankInsert_result result = new topicBankInsert_result();
      receiveBase(result, "topicBankInsert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankInsert failed: unknown result");
    }

    public int topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankUpdate(topicBank);
      return recv_topicBankUpdate();
    }

    public void send_topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankUpdate_args args = new topicBankUpdate_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankUpdate", args);
    }

    public int recv_topicBankUpdate() throws org.apache.thrift.TException
    {
      topicBankUpdate_result result = new topicBankUpdate_result();
      receiveBase(result, "topicBankUpdate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankUpdate failed: unknown result");
    }

    public int topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankRemove(topicBank);
      return recv_topicBankRemove();
    }

    public void send_topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankRemove_args args = new topicBankRemove_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankRemove", args);
    }

    public int recv_topicBankRemove() throws org.apache.thrift.TException
    {
      topicBankRemove_result result = new topicBankRemove_result();
      receiveBase(result, "topicBankRemove");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankRemove failed: unknown result");
    }

    public com.wenshao.dal.thriftgen.TopicBank topicBankFindById(int id) throws org.apache.thrift.TException
    {
      send_topicBankFindById(id);
      return recv_topicBankFindById();
    }

    public void send_topicBankFindById(int id) throws org.apache.thrift.TException
    {
      topicBankFindById_args args = new topicBankFindById_args();
      args.setId(id);
      sendBase("topicBankFindById", args);
    }

    public com.wenshao.dal.thriftgen.TopicBank recv_topicBankFindById() throws org.apache.thrift.TException
    {
      topicBankFindById_result result = new topicBankFindById_result();
      receiveBase(result, "topicBankFindById");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankFindById failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelect(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      send_topicBankSelect(topicBank);
      return recv_topicBankSelect();
    }

    public void send_topicBankSelect(com.wenshao.dal.thriftgen.TopicBank topicBank) throws org.apache.thrift.TException
    {
      topicBankSelect_args args = new topicBankSelect_args();
      args.setTopicBank(topicBank);
      sendBase("topicBankSelect", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelect() throws org.apache.thrift.TException
    {
      topicBankSelect_result result = new topicBankSelect_result();
      receiveBase(result, "topicBankSelect");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelect failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      send_topicBankSelectQuery(topicBank, query);
      return recv_topicBankSelectQuery();
    }

    public void send_topicBankSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      topicBankSelectQuery_args args = new topicBankSelectQuery_args();
      args.setTopicBank(topicBank);
      args.setQuery(query);
      sendBase("topicBankSelectQuery", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelectQuery() throws org.apache.thrift.TException
    {
      topicBankSelectQuery_result result = new topicBankSelectQuery_result();
      receiveBase(result, "topicBankSelectQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelectQuery failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      send_topicBankSelectCustom(topicBank, custom);
      return recv_topicBankSelectCustom();
    }

    public void send_topicBankSelectCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      topicBankSelectCustom_args args = new topicBankSelectCustom_args();
      args.setTopicBank(topicBank);
      args.setCustom(custom);
      sendBase("topicBankSelectCustom", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelectCustom() throws org.apache.thrift.TException
    {
      topicBankSelectCustom_result result = new topicBankSelectCustom_result();
      receiveBase(result, "topicBankSelectCustom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelectCustom failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQueryCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      send_topicBankSelectQueryCustom(topicBank, query, custom);
      return recv_topicBankSelectQueryCustom();
    }

    public void send_topicBankSelectQueryCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      topicBankSelectQueryCustom_args args = new topicBankSelectQueryCustom_args();
      args.setTopicBank(topicBank);
      args.setQuery(query);
      args.setCustom(custom);
      sendBase("topicBankSelectQueryCustom", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelectQueryCustom() throws org.apache.thrift.TException
    {
      topicBankSelectQueryCustom_result result = new topicBankSelectQueryCustom_result();
      receiveBase(result, "topicBankSelectQueryCustom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelectQueryCustom failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      send_topicBankSelectQueryCustomNotCache(topicBank, query, custom);
      return recv_topicBankSelectQueryCustomNotCache();
    }

    public void send_topicBankSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom) throws org.apache.thrift.TException
    {
      topicBankSelectQueryCustomNotCache_args args = new topicBankSelectQueryCustomNotCache_args();
      args.setTopicBank(topicBank);
      args.setQuery(query);
      args.setCustom(custom);
      sendBase("topicBankSelectQueryCustomNotCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelectQueryCustomNotCache() throws org.apache.thrift.TException
    {
      topicBankSelectQueryCustomNotCache_result result = new topicBankSelectQueryCustomNotCache_result();
      receiveBase(result, "topicBankSelectQueryCustomNotCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelectQueryCustomNotCache failed: unknown result");
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> topicBankSelectQueryNoCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      send_topicBankSelectQueryNoCache(topicBank, query);
      return recv_topicBankSelectQueryNoCache();
    }

    public void send_topicBankSelectQueryNoCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      topicBankSelectQueryNoCache_args args = new topicBankSelectQueryNoCache_args();
      args.setTopicBank(topicBank);
      args.setQuery(query);
      sendBase("topicBankSelectQueryNoCache", args);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> recv_topicBankSelectQueryNoCache() throws org.apache.thrift.TException
    {
      topicBankSelectQueryNoCache_result result = new topicBankSelectQueryNoCache_result();
      receiveBase(result, "topicBankSelectQueryNoCache");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankSelectQueryNoCache failed: unknown result");
    }

    public int topicBankCountSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      send_topicBankCountSelectQuery(topicBank, query);
      return recv_topicBankCountSelectQuery();
    }

    public void send_topicBankCountSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query) throws org.apache.thrift.TException
    {
      topicBankCountSelectQuery_args args = new topicBankCountSelectQuery_args();
      args.setTopicBank(topicBank);
      args.setQuery(query);
      sendBase("topicBankCountSelectQuery", args);
    }

    public int recv_topicBankCountSelectQuery() throws org.apache.thrift.TException
    {
      topicBankCountSelectQuery_result result = new topicBankCountSelectQuery_result();
      receiveBase(result, "topicBankCountSelectQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankCountSelectQuery failed: unknown result");
    }

    public int topicBankAddTopic(int tb_id, int topic_id) throws org.apache.thrift.TException
    {
      send_topicBankAddTopic(tb_id, topic_id);
      return recv_topicBankAddTopic();
    }

    public void send_topicBankAddTopic(int tb_id, int topic_id) throws org.apache.thrift.TException
    {
      topicBankAddTopic_args args = new topicBankAddTopic_args();
      args.setTb_id(tb_id);
      args.setTopic_id(topic_id);
      sendBase("topicBankAddTopic", args);
    }

    public int recv_topicBankAddTopic() throws org.apache.thrift.TException
    {
      topicBankAddTopic_result result = new topicBankAddTopic_result();
      receiveBase(result, "topicBankAddTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankAddTopic failed: unknown result");
    }

    public int topicBankRemoveTopic(int tb_id, int topic_id) throws org.apache.thrift.TException
    {
      send_topicBankRemoveTopic(tb_id, topic_id);
      return recv_topicBankRemoveTopic();
    }

    public void send_topicBankRemoveTopic(int tb_id, int topic_id) throws org.apache.thrift.TException
    {
      topicBankRemoveTopic_args args = new topicBankRemoveTopic_args();
      args.setTb_id(tb_id);
      args.setTopic_id(topic_id);
      sendBase("topicBankRemoveTopic", args);
    }

    public int recv_topicBankRemoveTopic() throws org.apache.thrift.TException
    {
      topicBankRemoveTopic_result result = new topicBankRemoveTopic_result();
      receiveBase(result, "topicBankRemoveTopic");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "topicBankRemoveTopic failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void topicOptionInsert(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionInsert_call method_call = new topicOptionInsert_call(topicOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionInsert_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicOption topicOption;
      public topicOptionInsert_call(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicOption = topicOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionInsert_args args = new topicOptionInsert_args();
        args.setTopicOption(topicOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionInsert();
      }
    }

    public void topicOptionUpdate(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionUpdate_call method_call = new topicOptionUpdate_call(topicOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionUpdate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicOption topicOption;
      public topicOptionUpdate_call(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicOption = topicOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionUpdate_args args = new topicOptionUpdate_args();
        args.setTopicOption(topicOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionUpdate();
      }
    }

    public void topicOptionRemove(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionRemove_call method_call = new topicOptionRemove_call(topicOption, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionRemove_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicOption topicOption;
      public topicOptionRemove_call(com.wenshao.dal.thriftgen.TopicOption topicOption, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicOption = topicOption;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionRemove_args args = new topicOptionRemove_args();
        args.setTopicOption(topicOption);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionRemove();
      }
    }

    public void topicOptionFindById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicOption> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionFindById_call method_call = new topicOptionFindById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionFindById_call extends org.apache.thrift.async.TAsyncMethodCall<com.wenshao.dal.thriftgen.TopicOption> {
      private int id;
      public topicOptionFindById_call(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicOption> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionFindById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionFindById_args args = new topicOptionFindById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.wenshao.dal.thriftgen.TopicOption getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionFindById();
      }
    }

    public void topicOptionSelect(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionSelect_call method_call = new topicOptionSelect_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionSelect_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicOptionSelect_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionSelect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionSelect_args args = new topicOptionSelect_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionSelect();
      }
    }

    public void topicOptionSelectNoCache(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicOptionSelectNoCache_call method_call = new topicOptionSelectNoCache_call(abstractSql, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicOptionSelectNoCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      private com.wenshao.dal.thriftgen.AbstractSql abstractSql;
      public topicOptionSelectNoCache_call(com.wenshao.dal.thriftgen.AbstractSql abstractSql, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.abstractSql = abstractSql;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicOptionSelectNoCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicOptionSelectNoCache_args args = new topicOptionSelectNoCache_args();
        args.setAbstractSql(abstractSql);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getResult() throws com.wenshao.dal.thriftgen.RequestException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicOptionSelectNoCache();
      }
    }

    public void topicInsert(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicInsert_call method_call = new topicInsert_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicInsert_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicInsert_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicInsert_args args = new topicInsert_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicInsert();
      }
    }

    public void topicUpdate(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicUpdate_call method_call = new topicUpdate_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicUpdate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicUpdate_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicUpdate_args args = new topicUpdate_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicUpdate();
      }
    }

    public void topicRemove(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicRemove_call method_call = new topicRemove_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicRemove_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicRemove_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicRemove_args args = new topicRemove_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicRemove();
      }
    }

    public void courseFindById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.Topic> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      courseFindById_call method_call = new courseFindById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class courseFindById_call extends org.apache.thrift.async.TAsyncMethodCall<com.wenshao.dal.thriftgen.Topic> {
      private int id;
      public courseFindById_call(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.Topic> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("courseFindById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        courseFindById_args args = new courseFindById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.wenshao.dal.thriftgen.Topic getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_courseFindById();
      }
    }

    public void topicSelect(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelect_call method_call = new topicSelect_call(topic, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelect_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.Topic topic;
      public topicSelect_call(com.wenshao.dal.thriftgen.Topic topic, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelect_args args = new topicSelect_args();
        args.setTopic(topic);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelect();
      }
    }

    public void topicSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelectQuery_call method_call = new topicSelectQuery_call(topic, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelectQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.Topic topic;
      private com.wenshao.dal.thriftgen.Query query;
      public topicSelectQuery_call(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelectQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelectQuery_args args = new topicSelectQuery_args();
        args.setTopic(topic);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelectQuery();
      }
    }

    public void topicSelectCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelectCustom_call method_call = new topicSelectCustom_call(topic, custom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelectCustom_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.Topic topic;
      private com.wenshao.dal.thriftgen.Custom custom;
      public topicSelectCustom_call(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
        this.custom = custom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelectCustom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelectCustom_args args = new topicSelectCustom_args();
        args.setTopic(topic);
        args.setCustom(custom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelectCustom();
      }
    }

    public void topicSelectQueryCustom(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelectQueryCustom_call method_call = new topicSelectQueryCustom_call(topic, query, custom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelectQueryCustom_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.Topic topic;
      private com.wenshao.dal.thriftgen.Query query;
      private com.wenshao.dal.thriftgen.Custom custom;
      public topicSelectQueryCustom_call(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
        this.query = query;
        this.custom = custom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelectQueryCustom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelectQueryCustom_args args = new topicSelectQueryCustom_args();
        args.setTopic(topic);
        args.setQuery(query);
        args.setCustom(custom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelectQueryCustom();
      }
    }

    public void topicSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelectQueryCustomNotCache_call method_call = new topicSelectQueryCustomNotCache_call(topic, query, custom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelectQueryCustomNotCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.Topic topic;
      private com.wenshao.dal.thriftgen.Query query;
      private com.wenshao.dal.thriftgen.Custom custom;
      public topicSelectQueryCustomNotCache_call(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
        this.query = query;
        this.custom = custom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelectQueryCustomNotCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelectQueryCustomNotCache_args args = new topicSelectQueryCustomNotCache_args();
        args.setTopic(topic);
        args.setQuery(query);
        args.setCustom(custom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelectQueryCustomNotCache();
      }
    }

    public void topicSelectQueryNoCache(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicSelectQueryNoCache_call method_call = new topicSelectQueryNoCache_call(topic, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicSelectQueryNoCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      private com.wenshao.dal.thriftgen.Topic topic;
      private com.wenshao.dal.thriftgen.Query query;
      public topicSelectQueryNoCache_call(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicSelectQueryNoCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicSelectQueryNoCache_args args = new topicSelectQueryNoCache_args();
        args.setTopic(topic);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.Topic> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicSelectQueryNoCache();
      }
    }

    public void topicCountSelectQuery(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicCountSelectQuery_call method_call = new topicCountSelectQuery_call(topic, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicCountSelectQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.Topic topic;
      private com.wenshao.dal.thriftgen.Query query;
      public topicCountSelectQuery_call(com.wenshao.dal.thriftgen.Topic topic, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topic = topic;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicCountSelectQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicCountSelectQuery_args args = new topicCountSelectQuery_args();
        args.setTopic(topic);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicCountSelectQuery();
      }
    }

    public void topicBankInsert(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankInsert_call method_call = new topicBankInsert_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankInsert_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankInsert_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankInsert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankInsert_args args = new topicBankInsert_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankInsert();
      }
    }

    public void topicBankUpdate(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankUpdate_call method_call = new topicBankUpdate_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankUpdate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankUpdate_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankUpdate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankUpdate_args args = new topicBankUpdate_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankUpdate();
      }
    }

    public void topicBankRemove(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankRemove_call method_call = new topicBankRemove_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankRemove_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankRemove_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankRemove", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankRemove_args args = new topicBankRemove_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankRemove();
      }
    }

    public void topicBankFindById(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicBank> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankFindById_call method_call = new topicBankFindById_call(id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankFindById_call extends org.apache.thrift.async.TAsyncMethodCall<com.wenshao.dal.thriftgen.TopicBank> {
      private int id;
      public topicBankFindById_call(int id, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicBank> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankFindById", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankFindById_args args = new topicBankFindById_args();
        args.setId(id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.wenshao.dal.thriftgen.TopicBank getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankFindById();
      }
    }

    public void topicBankSelect(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelect_call method_call = new topicBankSelect_call(topicBank, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelect_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      public topicBankSelect_call(com.wenshao.dal.thriftgen.TopicBank topicBank, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelect", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelect_args args = new topicBankSelect_args();
        args.setTopicBank(topicBank);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelect();
      }
    }

    public void topicBankSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelectQuery_call method_call = new topicBankSelectQuery_call(topicBank, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelectQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      private com.wenshao.dal.thriftgen.Query query;
      public topicBankSelectQuery_call(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelectQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelectQuery_args args = new topicBankSelectQuery_args();
        args.setTopicBank(topicBank);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelectQuery();
      }
    }

    public void topicBankSelectCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelectCustom_call method_call = new topicBankSelectCustom_call(topicBank, custom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelectCustom_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      private com.wenshao.dal.thriftgen.Custom custom;
      public topicBankSelectCustom_call(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
        this.custom = custom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelectCustom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelectCustom_args args = new topicBankSelectCustom_args();
        args.setTopicBank(topicBank);
        args.setCustom(custom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelectCustom();
      }
    }

    public void topicBankSelectQueryCustom(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelectQueryCustom_call method_call = new topicBankSelectQueryCustom_call(topicBank, query, custom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelectQueryCustom_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      private com.wenshao.dal.thriftgen.Query query;
      private com.wenshao.dal.thriftgen.Custom custom;
      public topicBankSelectQueryCustom_call(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
        this.query = query;
        this.custom = custom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelectQueryCustom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelectQueryCustom_args args = new topicBankSelectQueryCustom_args();
        args.setTopicBank(topicBank);
        args.setQuery(query);
        args.setCustom(custom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelectQueryCustom();
      }
    }

    public void topicBankSelectQueryCustomNotCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelectQueryCustomNotCache_call method_call = new topicBankSelectQueryCustomNotCache_call(topicBank, query, custom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelectQueryCustomNotCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      private com.wenshao.dal.thriftgen.Query query;
      private com.wenshao.dal.thriftgen.Custom custom;
      public topicBankSelectQueryCustomNotCache_call(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, com.wenshao.dal.thriftgen.Custom custom, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
        this.query = query;
        this.custom = custom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelectQueryCustomNotCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelectQueryCustomNotCache_args args = new topicBankSelectQueryCustomNotCache_args();
        args.setTopicBank(topicBank);
        args.setQuery(query);
        args.setCustom(custom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelectQueryCustomNotCache();
      }
    }

    public void topicBankSelectQueryNoCache(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankSelectQueryNoCache_call method_call = new topicBankSelectQueryNoCache_call(topicBank, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankSelectQueryNoCache_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      private com.wenshao.dal.thriftgen.Query query;
      public topicBankSelectQueryNoCache_call(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankSelectQueryNoCache", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankSelectQueryNoCache_args args = new topicBankSelectQueryNoCache_args();
        args.setTopicBank(topicBank);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankSelectQueryNoCache();
      }
    }

    public void topicBankCountSelectQuery(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankCountSelectQuery_call method_call = new topicBankCountSelectQuery_call(topicBank, query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankCountSelectQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.wenshao.dal.thriftgen.TopicBank topicBank;
      private com.wenshao.dal.thriftgen.Query query;
      public topicBankCountSelectQuery_call(com.wenshao.dal.thriftgen.TopicBank topicBank, com.wenshao.dal.thriftgen.Query query, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.topicBank = topicBank;
        this.query = query;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankCountSelectQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankCountSelectQuery_args args = new topicBankCountSelectQuery_args();
        args.setTopicBank(topicBank);
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankCountSelectQuery();
      }
    }

    public void topicBankAddTopic(int tb_id, int topic_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankAddTopic_call method_call = new topicBankAddTopic_call(tb_id, topic_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankAddTopic_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int tb_id;
      private int topic_id;
      public topicBankAddTopic_call(int tb_id, int topic_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tb_id = tb_id;
        this.topic_id = topic_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankAddTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankAddTopic_args args = new topicBankAddTopic_args();
        args.setTb_id(tb_id);
        args.setTopic_id(topic_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankAddTopic();
      }
    }

    public void topicBankRemoveTopic(int tb_id, int topic_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      topicBankRemoveTopic_call method_call = new topicBankRemoveTopic_call(tb_id, topic_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class topicBankRemoveTopic_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private int tb_id;
      private int topic_id;
      public topicBankRemoveTopic_call(int tb_id, int topic_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tb_id = tb_id;
        this.topic_id = topic_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("topicBankRemoveTopic", org.apache.thrift.protocol.TMessageType.CALL, 0));
        topicBankRemoveTopic_args args = new topicBankRemoveTopic_args();
        args.setTb_id(tb_id);
        args.setTopic_id(topic_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_topicBankRemoveTopic();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("topicOptionInsert", new topicOptionInsert());
      processMap.put("topicOptionUpdate", new topicOptionUpdate());
      processMap.put("topicOptionRemove", new topicOptionRemove());
      processMap.put("topicOptionFindById", new topicOptionFindById());
      processMap.put("topicOptionSelect", new topicOptionSelect());
      processMap.put("topicOptionSelectNoCache", new topicOptionSelectNoCache());
      processMap.put("topicInsert", new topicInsert());
      processMap.put("topicUpdate", new topicUpdate());
      processMap.put("topicRemove", new topicRemove());
      processMap.put("courseFindById", new courseFindById());
      processMap.put("topicSelect", new topicSelect());
      processMap.put("topicSelectQuery", new topicSelectQuery());
      processMap.put("topicSelectCustom", new topicSelectCustom());
      processMap.put("topicSelectQueryCustom", new topicSelectQueryCustom());
      processMap.put("topicSelectQueryCustomNotCache", new topicSelectQueryCustomNotCache());
      processMap.put("topicSelectQueryNoCache", new topicSelectQueryNoCache());
      processMap.put("topicCountSelectQuery", new topicCountSelectQuery());
      processMap.put("topicBankInsert", new topicBankInsert());
      processMap.put("topicBankUpdate", new topicBankUpdate());
      processMap.put("topicBankRemove", new topicBankRemove());
      processMap.put("topicBankFindById", new topicBankFindById());
      processMap.put("topicBankSelect", new topicBankSelect());
      processMap.put("topicBankSelectQuery", new topicBankSelectQuery());
      processMap.put("topicBankSelectCustom", new topicBankSelectCustom());
      processMap.put("topicBankSelectQueryCustom", new topicBankSelectQueryCustom());
      processMap.put("topicBankSelectQueryCustomNotCache", new topicBankSelectQueryCustomNotCache());
      processMap.put("topicBankSelectQueryNoCache", new topicBankSelectQueryNoCache());
      processMap.put("topicBankCountSelectQuery", new topicBankCountSelectQuery());
      processMap.put("topicBankAddTopic", new topicBankAddTopic());
      processMap.put("topicBankRemoveTopic", new topicBankRemoveTopic());
      return processMap;
    }

    public static class topicOptionInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionInsert_args> {
      public topicOptionInsert() {
        super("topicOptionInsert");
      }

      public topicOptionInsert_args getEmptyArgsInstance() {
        return new topicOptionInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionInsert_result getResult(I iface, topicOptionInsert_args args) throws org.apache.thrift.TException {
        topicOptionInsert_result result = new topicOptionInsert_result();
        result.success = iface.topicOptionInsert(args.topicOption);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicOptionUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionUpdate_args> {
      public topicOptionUpdate() {
        super("topicOptionUpdate");
      }

      public topicOptionUpdate_args getEmptyArgsInstance() {
        return new topicOptionUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionUpdate_result getResult(I iface, topicOptionUpdate_args args) throws org.apache.thrift.TException {
        topicOptionUpdate_result result = new topicOptionUpdate_result();
        result.success = iface.topicOptionUpdate(args.topicOption);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicOptionRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionRemove_args> {
      public topicOptionRemove() {
        super("topicOptionRemove");
      }

      public topicOptionRemove_args getEmptyArgsInstance() {
        return new topicOptionRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionRemove_result getResult(I iface, topicOptionRemove_args args) throws org.apache.thrift.TException {
        topicOptionRemove_result result = new topicOptionRemove_result();
        result.success = iface.topicOptionRemove(args.topicOption);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicOptionFindById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionFindById_args> {
      public topicOptionFindById() {
        super("topicOptionFindById");
      }

      public topicOptionFindById_args getEmptyArgsInstance() {
        return new topicOptionFindById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionFindById_result getResult(I iface, topicOptionFindById_args args) throws org.apache.thrift.TException {
        topicOptionFindById_result result = new topicOptionFindById_result();
        result.success = iface.topicOptionFindById(args.id);
        return result;
      }
    }

    public static class topicOptionSelect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionSelect_args> {
      public topicOptionSelect() {
        super("topicOptionSelect");
      }

      public topicOptionSelect_args getEmptyArgsInstance() {
        return new topicOptionSelect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionSelect_result getResult(I iface, topicOptionSelect_args args) throws org.apache.thrift.TException {
        topicOptionSelect_result result = new topicOptionSelect_result();
        try {
          result.success = iface.topicOptionSelect(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicOptionSelectNoCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicOptionSelectNoCache_args> {
      public topicOptionSelectNoCache() {
        super("topicOptionSelectNoCache");
      }

      public topicOptionSelectNoCache_args getEmptyArgsInstance() {
        return new topicOptionSelectNoCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicOptionSelectNoCache_result getResult(I iface, topicOptionSelectNoCache_args args) throws org.apache.thrift.TException {
        topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
        try {
          result.success = iface.topicOptionSelectNoCache(args.abstractSql);
        } catch (com.wenshao.dal.thriftgen.RequestException re) {
          result.re = re;
        }
        return result;
      }
    }

    public static class topicInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicInsert_args> {
      public topicInsert() {
        super("topicInsert");
      }

      public topicInsert_args getEmptyArgsInstance() {
        return new topicInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicInsert_result getResult(I iface, topicInsert_args args) throws org.apache.thrift.TException {
        topicInsert_result result = new topicInsert_result();
        result.success = iface.topicInsert(args.topic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicUpdate_args> {
      public topicUpdate() {
        super("topicUpdate");
      }

      public topicUpdate_args getEmptyArgsInstance() {
        return new topicUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicUpdate_result getResult(I iface, topicUpdate_args args) throws org.apache.thrift.TException {
        topicUpdate_result result = new topicUpdate_result();
        result.success = iface.topicUpdate(args.topic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicRemove_args> {
      public topicRemove() {
        super("topicRemove");
      }

      public topicRemove_args getEmptyArgsInstance() {
        return new topicRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicRemove_result getResult(I iface, topicRemove_args args) throws org.apache.thrift.TException {
        topicRemove_result result = new topicRemove_result();
        result.success = iface.topicRemove(args.topic);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class courseFindById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, courseFindById_args> {
      public courseFindById() {
        super("courseFindById");
      }

      public courseFindById_args getEmptyArgsInstance() {
        return new courseFindById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public courseFindById_result getResult(I iface, courseFindById_args args) throws org.apache.thrift.TException {
        courseFindById_result result = new courseFindById_result();
        result.success = iface.courseFindById(args.id);
        return result;
      }
    }

    public static class topicSelect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelect_args> {
      public topicSelect() {
        super("topicSelect");
      }

      public topicSelect_args getEmptyArgsInstance() {
        return new topicSelect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelect_result getResult(I iface, topicSelect_args args) throws org.apache.thrift.TException {
        topicSelect_result result = new topicSelect_result();
        result.success = iface.topicSelect(args.topic);
        return result;
      }
    }

    public static class topicSelectQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelectQuery_args> {
      public topicSelectQuery() {
        super("topicSelectQuery");
      }

      public topicSelectQuery_args getEmptyArgsInstance() {
        return new topicSelectQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelectQuery_result getResult(I iface, topicSelectQuery_args args) throws org.apache.thrift.TException {
        topicSelectQuery_result result = new topicSelectQuery_result();
        result.success = iface.topicSelectQuery(args.topic, args.query);
        return result;
      }
    }

    public static class topicSelectCustom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelectCustom_args> {
      public topicSelectCustom() {
        super("topicSelectCustom");
      }

      public topicSelectCustom_args getEmptyArgsInstance() {
        return new topicSelectCustom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelectCustom_result getResult(I iface, topicSelectCustom_args args) throws org.apache.thrift.TException {
        topicSelectCustom_result result = new topicSelectCustom_result();
        result.success = iface.topicSelectCustom(args.topic, args.custom);
        return result;
      }
    }

    public static class topicSelectQueryCustom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelectQueryCustom_args> {
      public topicSelectQueryCustom() {
        super("topicSelectQueryCustom");
      }

      public topicSelectQueryCustom_args getEmptyArgsInstance() {
        return new topicSelectQueryCustom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelectQueryCustom_result getResult(I iface, topicSelectQueryCustom_args args) throws org.apache.thrift.TException {
        topicSelectQueryCustom_result result = new topicSelectQueryCustom_result();
        result.success = iface.topicSelectQueryCustom(args.topic, args.query, args.custom);
        return result;
      }
    }

    public static class topicSelectQueryCustomNotCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelectQueryCustomNotCache_args> {
      public topicSelectQueryCustomNotCache() {
        super("topicSelectQueryCustomNotCache");
      }

      public topicSelectQueryCustomNotCache_args getEmptyArgsInstance() {
        return new topicSelectQueryCustomNotCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelectQueryCustomNotCache_result getResult(I iface, topicSelectQueryCustomNotCache_args args) throws org.apache.thrift.TException {
        topicSelectQueryCustomNotCache_result result = new topicSelectQueryCustomNotCache_result();
        result.success = iface.topicSelectQueryCustomNotCache(args.topic, args.query, args.custom);
        return result;
      }
    }

    public static class topicSelectQueryNoCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicSelectQueryNoCache_args> {
      public topicSelectQueryNoCache() {
        super("topicSelectQueryNoCache");
      }

      public topicSelectQueryNoCache_args getEmptyArgsInstance() {
        return new topicSelectQueryNoCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicSelectQueryNoCache_result getResult(I iface, topicSelectQueryNoCache_args args) throws org.apache.thrift.TException {
        topicSelectQueryNoCache_result result = new topicSelectQueryNoCache_result();
        result.success = iface.topicSelectQueryNoCache(args.topic, args.query);
        return result;
      }
    }

    public static class topicCountSelectQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicCountSelectQuery_args> {
      public topicCountSelectQuery() {
        super("topicCountSelectQuery");
      }

      public topicCountSelectQuery_args getEmptyArgsInstance() {
        return new topicCountSelectQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicCountSelectQuery_result getResult(I iface, topicCountSelectQuery_args args) throws org.apache.thrift.TException {
        topicCountSelectQuery_result result = new topicCountSelectQuery_result();
        result.success = iface.topicCountSelectQuery(args.topic, args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankInsert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankInsert_args> {
      public topicBankInsert() {
        super("topicBankInsert");
      }

      public topicBankInsert_args getEmptyArgsInstance() {
        return new topicBankInsert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankInsert_result getResult(I iface, topicBankInsert_args args) throws org.apache.thrift.TException {
        topicBankInsert_result result = new topicBankInsert_result();
        result.success = iface.topicBankInsert(args.topicBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankUpdate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankUpdate_args> {
      public topicBankUpdate() {
        super("topicBankUpdate");
      }

      public topicBankUpdate_args getEmptyArgsInstance() {
        return new topicBankUpdate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankUpdate_result getResult(I iface, topicBankUpdate_args args) throws org.apache.thrift.TException {
        topicBankUpdate_result result = new topicBankUpdate_result();
        result.success = iface.topicBankUpdate(args.topicBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankRemove<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankRemove_args> {
      public topicBankRemove() {
        super("topicBankRemove");
      }

      public topicBankRemove_args getEmptyArgsInstance() {
        return new topicBankRemove_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankRemove_result getResult(I iface, topicBankRemove_args args) throws org.apache.thrift.TException {
        topicBankRemove_result result = new topicBankRemove_result();
        result.success = iface.topicBankRemove(args.topicBank);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankFindById<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankFindById_args> {
      public topicBankFindById() {
        super("topicBankFindById");
      }

      public topicBankFindById_args getEmptyArgsInstance() {
        return new topicBankFindById_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankFindById_result getResult(I iface, topicBankFindById_args args) throws org.apache.thrift.TException {
        topicBankFindById_result result = new topicBankFindById_result();
        result.success = iface.topicBankFindById(args.id);
        return result;
      }
    }

    public static class topicBankSelect<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelect_args> {
      public topicBankSelect() {
        super("topicBankSelect");
      }

      public topicBankSelect_args getEmptyArgsInstance() {
        return new topicBankSelect_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelect_result getResult(I iface, topicBankSelect_args args) throws org.apache.thrift.TException {
        topicBankSelect_result result = new topicBankSelect_result();
        result.success = iface.topicBankSelect(args.topicBank);
        return result;
      }
    }

    public static class topicBankSelectQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelectQuery_args> {
      public topicBankSelectQuery() {
        super("topicBankSelectQuery");
      }

      public topicBankSelectQuery_args getEmptyArgsInstance() {
        return new topicBankSelectQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelectQuery_result getResult(I iface, topicBankSelectQuery_args args) throws org.apache.thrift.TException {
        topicBankSelectQuery_result result = new topicBankSelectQuery_result();
        result.success = iface.topicBankSelectQuery(args.topicBank, args.query);
        return result;
      }
    }

    public static class topicBankSelectCustom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelectCustom_args> {
      public topicBankSelectCustom() {
        super("topicBankSelectCustom");
      }

      public topicBankSelectCustom_args getEmptyArgsInstance() {
        return new topicBankSelectCustom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelectCustom_result getResult(I iface, topicBankSelectCustom_args args) throws org.apache.thrift.TException {
        topicBankSelectCustom_result result = new topicBankSelectCustom_result();
        result.success = iface.topicBankSelectCustom(args.topicBank, args.custom);
        return result;
      }
    }

    public static class topicBankSelectQueryCustom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelectQueryCustom_args> {
      public topicBankSelectQueryCustom() {
        super("topicBankSelectQueryCustom");
      }

      public topicBankSelectQueryCustom_args getEmptyArgsInstance() {
        return new topicBankSelectQueryCustom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelectQueryCustom_result getResult(I iface, topicBankSelectQueryCustom_args args) throws org.apache.thrift.TException {
        topicBankSelectQueryCustom_result result = new topicBankSelectQueryCustom_result();
        result.success = iface.topicBankSelectQueryCustom(args.topicBank, args.query, args.custom);
        return result;
      }
    }

    public static class topicBankSelectQueryCustomNotCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelectQueryCustomNotCache_args> {
      public topicBankSelectQueryCustomNotCache() {
        super("topicBankSelectQueryCustomNotCache");
      }

      public topicBankSelectQueryCustomNotCache_args getEmptyArgsInstance() {
        return new topicBankSelectQueryCustomNotCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelectQueryCustomNotCache_result getResult(I iface, topicBankSelectQueryCustomNotCache_args args) throws org.apache.thrift.TException {
        topicBankSelectQueryCustomNotCache_result result = new topicBankSelectQueryCustomNotCache_result();
        result.success = iface.topicBankSelectQueryCustomNotCache(args.topicBank, args.query, args.custom);
        return result;
      }
    }

    public static class topicBankSelectQueryNoCache<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankSelectQueryNoCache_args> {
      public topicBankSelectQueryNoCache() {
        super("topicBankSelectQueryNoCache");
      }

      public topicBankSelectQueryNoCache_args getEmptyArgsInstance() {
        return new topicBankSelectQueryNoCache_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankSelectQueryNoCache_result getResult(I iface, topicBankSelectQueryNoCache_args args) throws org.apache.thrift.TException {
        topicBankSelectQueryNoCache_result result = new topicBankSelectQueryNoCache_result();
        result.success = iface.topicBankSelectQueryNoCache(args.topicBank, args.query);
        return result;
      }
    }

    public static class topicBankCountSelectQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankCountSelectQuery_args> {
      public topicBankCountSelectQuery() {
        super("topicBankCountSelectQuery");
      }

      public topicBankCountSelectQuery_args getEmptyArgsInstance() {
        return new topicBankCountSelectQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankCountSelectQuery_result getResult(I iface, topicBankCountSelectQuery_args args) throws org.apache.thrift.TException {
        topicBankCountSelectQuery_result result = new topicBankCountSelectQuery_result();
        result.success = iface.topicBankCountSelectQuery(args.topicBank, args.query);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankAddTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankAddTopic_args> {
      public topicBankAddTopic() {
        super("topicBankAddTopic");
      }

      public topicBankAddTopic_args getEmptyArgsInstance() {
        return new topicBankAddTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankAddTopic_result getResult(I iface, topicBankAddTopic_args args) throws org.apache.thrift.TException {
        topicBankAddTopic_result result = new topicBankAddTopic_result();
        result.success = iface.topicBankAddTopic(args.tb_id, args.topic_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class topicBankRemoveTopic<I extends Iface> extends org.apache.thrift.ProcessFunction<I, topicBankRemoveTopic_args> {
      public topicBankRemoveTopic() {
        super("topicBankRemoveTopic");
      }

      public topicBankRemoveTopic_args getEmptyArgsInstance() {
        return new topicBankRemoveTopic_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public topicBankRemoveTopic_result getResult(I iface, topicBankRemoveTopic_args args) throws org.apache.thrift.TException {
        topicBankRemoveTopic_result result = new topicBankRemoveTopic_result();
        result.success = iface.topicBankRemoveTopic(args.tb_id, args.topic_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("topicOptionInsert", new topicOptionInsert());
      processMap.put("topicOptionUpdate", new topicOptionUpdate());
      processMap.put("topicOptionRemove", new topicOptionRemove());
      processMap.put("topicOptionFindById", new topicOptionFindById());
      processMap.put("topicOptionSelect", new topicOptionSelect());
      processMap.put("topicOptionSelectNoCache", new topicOptionSelectNoCache());
      processMap.put("topicInsert", new topicInsert());
      processMap.put("topicUpdate", new topicUpdate());
      processMap.put("topicRemove", new topicRemove());
      processMap.put("courseFindById", new courseFindById());
      processMap.put("topicSelect", new topicSelect());
      processMap.put("topicSelectQuery", new topicSelectQuery());
      processMap.put("topicSelectCustom", new topicSelectCustom());
      processMap.put("topicSelectQueryCustom", new topicSelectQueryCustom());
      processMap.put("topicSelectQueryCustomNotCache", new topicSelectQueryCustomNotCache());
      processMap.put("topicSelectQueryNoCache", new topicSelectQueryNoCache());
      processMap.put("topicCountSelectQuery", new topicCountSelectQuery());
      processMap.put("topicBankInsert", new topicBankInsert());
      processMap.put("topicBankUpdate", new topicBankUpdate());
      processMap.put("topicBankRemove", new topicBankRemove());
      processMap.put("topicBankFindById", new topicBankFindById());
      processMap.put("topicBankSelect", new topicBankSelect());
      processMap.put("topicBankSelectQuery", new topicBankSelectQuery());
      processMap.put("topicBankSelectCustom", new topicBankSelectCustom());
      processMap.put("topicBankSelectQueryCustom", new topicBankSelectQueryCustom());
      processMap.put("topicBankSelectQueryCustomNotCache", new topicBankSelectQueryCustomNotCache());
      processMap.put("topicBankSelectQueryNoCache", new topicBankSelectQueryNoCache());
      processMap.put("topicBankCountSelectQuery", new topicBankCountSelectQuery());
      processMap.put("topicBankAddTopic", new topicBankAddTopic());
      processMap.put("topicBankRemoveTopic", new topicBankRemoveTopic());
      return processMap;
    }

    public static class topicOptionInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionInsert_args, java.lang.Integer> {
      public topicOptionInsert() {
        super("topicOptionInsert");
      }

      public topicOptionInsert_args getEmptyArgsInstance() {
        return new topicOptionInsert_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionInsert_result result = new topicOptionInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionInsert_result result = new topicOptionInsert_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionInsert_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionInsert(args.topicOption,resultHandler);
      }
    }

    public static class topicOptionUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionUpdate_args, java.lang.Integer> {
      public topicOptionUpdate() {
        super("topicOptionUpdate");
      }

      public topicOptionUpdate_args getEmptyArgsInstance() {
        return new topicOptionUpdate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionUpdate_result result = new topicOptionUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionUpdate_result result = new topicOptionUpdate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionUpdate(args.topicOption,resultHandler);
      }
    }

    public static class topicOptionRemove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionRemove_args, java.lang.Integer> {
      public topicOptionRemove() {
        super("topicOptionRemove");
      }

      public topicOptionRemove_args getEmptyArgsInstance() {
        return new topicOptionRemove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicOptionRemove_result result = new topicOptionRemove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionRemove_result result = new topicOptionRemove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionRemove_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionRemove(args.topicOption,resultHandler);
      }
    }

    public static class topicOptionFindById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionFindById_args, com.wenshao.dal.thriftgen.TopicOption> {
      public topicOptionFindById() {
        super("topicOptionFindById");
      }

      public topicOptionFindById_args getEmptyArgsInstance() {
        return new topicOptionFindById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicOption> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicOption>() { 
          public void onComplete(com.wenshao.dal.thriftgen.TopicOption o) {
            topicOptionFindById_result result = new topicOptionFindById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionFindById_result result = new topicOptionFindById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionFindById_args args, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicOption> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionFindById(args.id,resultHandler);
      }
    }

    public static class topicOptionSelect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionSelect_args, java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      public topicOptionSelect() {
        super("topicOptionSelect");
      }

      public topicOptionSelect_args getEmptyArgsInstance() {
        return new topicOptionSelect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicOption> o) {
            topicOptionSelect_result result = new topicOptionSelect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionSelect_result result = new topicOptionSelect_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionSelect_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionSelect(args.abstractSql,resultHandler);
      }
    }

    public static class topicOptionSelectNoCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicOptionSelectNoCache_args, java.util.List<com.wenshao.dal.thriftgen.TopicOption>> {
      public topicOptionSelectNoCache() {
        super("topicOptionSelectNoCache");
      }

      public topicOptionSelectNoCache_args getEmptyArgsInstance() {
        return new topicOptionSelectNoCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicOption> o) {
            topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicOptionSelectNoCache_result result = new topicOptionSelectNoCache_result();
            if (e instanceof com.wenshao.dal.thriftgen.RequestException) {
              result.re = (com.wenshao.dal.thriftgen.RequestException) e;
              result.setReIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicOptionSelectNoCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicOption>> resultHandler) throws org.apache.thrift.TException {
        iface.topicOptionSelectNoCache(args.abstractSql,resultHandler);
      }
    }

    public static class topicInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicInsert_args, java.lang.Integer> {
      public topicInsert() {
        super("topicInsert");
      }

      public topicInsert_args getEmptyArgsInstance() {
        return new topicInsert_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicInsert_result result = new topicInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicInsert_result result = new topicInsert_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicInsert_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicInsert(args.topic,resultHandler);
      }
    }

    public static class topicUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicUpdate_args, java.lang.Integer> {
      public topicUpdate() {
        super("topicUpdate");
      }

      public topicUpdate_args getEmptyArgsInstance() {
        return new topicUpdate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicUpdate_result result = new topicUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicUpdate_result result = new topicUpdate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicUpdate(args.topic,resultHandler);
      }
    }

    public static class topicRemove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicRemove_args, java.lang.Integer> {
      public topicRemove() {
        super("topicRemove");
      }

      public topicRemove_args getEmptyArgsInstance() {
        return new topicRemove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicRemove_result result = new topicRemove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicRemove_result result = new topicRemove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicRemove_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicRemove(args.topic,resultHandler);
      }
    }

    public static class courseFindById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, courseFindById_args, com.wenshao.dal.thriftgen.Topic> {
      public courseFindById() {
        super("courseFindById");
      }

      public courseFindById_args getEmptyArgsInstance() {
        return new courseFindById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.Topic> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.Topic>() { 
          public void onComplete(com.wenshao.dal.thriftgen.Topic o) {
            courseFindById_result result = new courseFindById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            courseFindById_result result = new courseFindById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, courseFindById_args args, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.Topic> resultHandler) throws org.apache.thrift.TException {
        iface.courseFindById(args.id,resultHandler);
      }
    }

    public static class topicSelect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelect_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelect() {
        super("topicSelect");
      }

      public topicSelect_args getEmptyArgsInstance() {
        return new topicSelect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelect_result result = new topicSelect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelect_result result = new topicSelect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelect_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelect(args.topic,resultHandler);
      }
    }

    public static class topicSelectQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelectQuery_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelectQuery() {
        super("topicSelectQuery");
      }

      public topicSelectQuery_args getEmptyArgsInstance() {
        return new topicSelectQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelectQuery_result result = new topicSelectQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelectQuery_result result = new topicSelectQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelectQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelectQuery(args.topic, args.query,resultHandler);
      }
    }

    public static class topicSelectCustom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelectCustom_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelectCustom() {
        super("topicSelectCustom");
      }

      public topicSelectCustom_args getEmptyArgsInstance() {
        return new topicSelectCustom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelectCustom_result result = new topicSelectCustom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelectCustom_result result = new topicSelectCustom_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelectCustom_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelectCustom(args.topic, args.custom,resultHandler);
      }
    }

    public static class topicSelectQueryCustom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelectQueryCustom_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelectQueryCustom() {
        super("topicSelectQueryCustom");
      }

      public topicSelectQueryCustom_args getEmptyArgsInstance() {
        return new topicSelectQueryCustom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelectQueryCustom_result result = new topicSelectQueryCustom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelectQueryCustom_result result = new topicSelectQueryCustom_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelectQueryCustom_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelectQueryCustom(args.topic, args.query, args.custom,resultHandler);
      }
    }

    public static class topicSelectQueryCustomNotCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelectQueryCustomNotCache_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelectQueryCustomNotCache() {
        super("topicSelectQueryCustomNotCache");
      }

      public topicSelectQueryCustomNotCache_args getEmptyArgsInstance() {
        return new topicSelectQueryCustomNotCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelectQueryCustomNotCache_result result = new topicSelectQueryCustomNotCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelectQueryCustomNotCache_result result = new topicSelectQueryCustomNotCache_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelectQueryCustomNotCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelectQueryCustomNotCache(args.topic, args.query, args.custom,resultHandler);
      }
    }

    public static class topicSelectQueryNoCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicSelectQueryNoCache_args, java.util.List<com.wenshao.dal.thriftgen.Topic>> {
      public topicSelectQueryNoCache() {
        super("topicSelectQueryNoCache");
      }

      public topicSelectQueryNoCache_args getEmptyArgsInstance() {
        return new topicSelectQueryNoCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.Topic> o) {
            topicSelectQueryNoCache_result result = new topicSelectQueryNoCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicSelectQueryNoCache_result result = new topicSelectQueryNoCache_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicSelectQueryNoCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.Topic>> resultHandler) throws org.apache.thrift.TException {
        iface.topicSelectQueryNoCache(args.topic, args.query,resultHandler);
      }
    }

    public static class topicCountSelectQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicCountSelectQuery_args, java.lang.Integer> {
      public topicCountSelectQuery() {
        super("topicCountSelectQuery");
      }

      public topicCountSelectQuery_args getEmptyArgsInstance() {
        return new topicCountSelectQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicCountSelectQuery_result result = new topicCountSelectQuery_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicCountSelectQuery_result result = new topicCountSelectQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicCountSelectQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicCountSelectQuery(args.topic, args.query,resultHandler);
      }
    }

    public static class topicBankInsert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankInsert_args, java.lang.Integer> {
      public topicBankInsert() {
        super("topicBankInsert");
      }

      public topicBankInsert_args getEmptyArgsInstance() {
        return new topicBankInsert_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankInsert_result result = new topicBankInsert_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankInsert_result result = new topicBankInsert_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankInsert_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankInsert(args.topicBank,resultHandler);
      }
    }

    public static class topicBankUpdate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankUpdate_args, java.lang.Integer> {
      public topicBankUpdate() {
        super("topicBankUpdate");
      }

      public topicBankUpdate_args getEmptyArgsInstance() {
        return new topicBankUpdate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankUpdate_result result = new topicBankUpdate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankUpdate_result result = new topicBankUpdate_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankUpdate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankUpdate(args.topicBank,resultHandler);
      }
    }

    public static class topicBankRemove<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankRemove_args, java.lang.Integer> {
      public topicBankRemove() {
        super("topicBankRemove");
      }

      public topicBankRemove_args getEmptyArgsInstance() {
        return new topicBankRemove_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankRemove_result result = new topicBankRemove_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankRemove_result result = new topicBankRemove_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankRemove_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankRemove(args.topicBank,resultHandler);
      }
    }

    public static class topicBankFindById<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankFindById_args, com.wenshao.dal.thriftgen.TopicBank> {
      public topicBankFindById() {
        super("topicBankFindById");
      }

      public topicBankFindById_args getEmptyArgsInstance() {
        return new topicBankFindById_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicBank> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicBank>() { 
          public void onComplete(com.wenshao.dal.thriftgen.TopicBank o) {
            topicBankFindById_result result = new topicBankFindById_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankFindById_result result = new topicBankFindById_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankFindById_args args, org.apache.thrift.async.AsyncMethodCallback<com.wenshao.dal.thriftgen.TopicBank> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankFindById(args.id,resultHandler);
      }
    }

    public static class topicBankSelect<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelect_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelect() {
        super("topicBankSelect");
      }

      public topicBankSelect_args getEmptyArgsInstance() {
        return new topicBankSelect_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelect_result result = new topicBankSelect_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelect_result result = new topicBankSelect_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelect_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelect(args.topicBank,resultHandler);
      }
    }

    public static class topicBankSelectQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelectQuery_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelectQuery() {
        super("topicBankSelectQuery");
      }

      public topicBankSelectQuery_args getEmptyArgsInstance() {
        return new topicBankSelectQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelectQuery_result result = new topicBankSelectQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelectQuery_result result = new topicBankSelectQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelectQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelectQuery(args.topicBank, args.query,resultHandler);
      }
    }

    public static class topicBankSelectCustom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelectCustom_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelectCustom() {
        super("topicBankSelectCustom");
      }

      public topicBankSelectCustom_args getEmptyArgsInstance() {
        return new topicBankSelectCustom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelectCustom_result result = new topicBankSelectCustom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelectCustom_result result = new topicBankSelectCustom_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelectCustom_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelectCustom(args.topicBank, args.custom,resultHandler);
      }
    }

    public static class topicBankSelectQueryCustom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelectQueryCustom_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelectQueryCustom() {
        super("topicBankSelectQueryCustom");
      }

      public topicBankSelectQueryCustom_args getEmptyArgsInstance() {
        return new topicBankSelectQueryCustom_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelectQueryCustom_result result = new topicBankSelectQueryCustom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelectQueryCustom_result result = new topicBankSelectQueryCustom_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelectQueryCustom_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelectQueryCustom(args.topicBank, args.query, args.custom,resultHandler);
      }
    }

    public static class topicBankSelectQueryCustomNotCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelectQueryCustomNotCache_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelectQueryCustomNotCache() {
        super("topicBankSelectQueryCustomNotCache");
      }

      public topicBankSelectQueryCustomNotCache_args getEmptyArgsInstance() {
        return new topicBankSelectQueryCustomNotCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelectQueryCustomNotCache_result result = new topicBankSelectQueryCustomNotCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelectQueryCustomNotCache_result result = new topicBankSelectQueryCustomNotCache_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelectQueryCustomNotCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelectQueryCustomNotCache(args.topicBank, args.query, args.custom,resultHandler);
      }
    }

    public static class topicBankSelectQueryNoCache<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankSelectQueryNoCache_args, java.util.List<com.wenshao.dal.thriftgen.TopicBank>> {
      public topicBankSelectQueryNoCache() {
        super("topicBankSelectQueryNoCache");
      }

      public topicBankSelectQueryNoCache_args getEmptyArgsInstance() {
        return new topicBankSelectQueryNoCache_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>>() { 
          public void onComplete(java.util.List<com.wenshao.dal.thriftgen.TopicBank> o) {
            topicBankSelectQueryNoCache_result result = new topicBankSelectQueryNoCache_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankSelectQueryNoCache_result result = new topicBankSelectQueryNoCache_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankSelectQueryNoCache_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.wenshao.dal.thriftgen.TopicBank>> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankSelectQueryNoCache(args.topicBank, args.query,resultHandler);
      }
    }

    public static class topicBankCountSelectQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankCountSelectQuery_args, java.lang.Integer> {
      public topicBankCountSelectQuery() {
        super("topicBankCountSelectQuery");
      }

      public topicBankCountSelectQuery_args getEmptyArgsInstance() {
        return new topicBankCountSelectQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankCountSelectQuery_result result = new topicBankCountSelectQuery_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankCountSelectQuery_result result = new topicBankCountSelectQuery_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankCountSelectQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankCountSelectQuery(args.topicBank, args.query,resultHandler);
      }
    }

    public static class topicBankAddTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankAddTopic_args, java.lang.Integer> {
      public topicBankAddTopic() {
        super("topicBankAddTopic");
      }

      public topicBankAddTopic_args getEmptyArgsInstance() {
        return new topicBankAddTopic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankAddTopic_result result = new topicBankAddTopic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankAddTopic_result result = new topicBankAddTopic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankAddTopic_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankAddTopic(args.tb_id, args.topic_id,resultHandler);
      }
    }

    public static class topicBankRemoveTopic<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, topicBankRemoveTopic_args, java.lang.Integer> {
      public topicBankRemoveTopic() {
        super("topicBankRemoveTopic");
      }

      public topicBankRemoveTopic_args getEmptyArgsInstance() {
        return new topicBankRemoveTopic_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            topicBankRemoveTopic_result result = new topicBankRemoveTopic_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            topicBankRemoveTopic_result result = new topicBankRemoveTopic_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, topicBankRemoveTopic_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.topicBankRemoveTopic(args.tb_id, args.topic_id,resultHandler);
      }
    }

  }

  public static class topicOptionInsert_args implements org.apache.thrift.TBase<topicOptionInsert_args, topicOptionInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionInsert_args");

    private static final org.apache.thrift.protocol.TField TOPIC_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOption", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionInsert_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionInsert_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption topicOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_OPTION((short)1, "topicOption");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_OPTION
            return TOPIC_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_OPTION, new org.apache.thrift.meta_data.FieldMetaData("topicOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionInsert_args.class, metaDataMap);
    }

    public topicOptionInsert_args() {
    }

    public topicOptionInsert_args(
      com.wenshao.dal.thriftgen.TopicOption topicOption)
    {
      this();
      this.topicOption = topicOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionInsert_args(topicOptionInsert_args other) {
      if (other.isSetTopicOption()) {
        this.topicOption = new com.wenshao.dal.thriftgen.TopicOption(other.topicOption);
      }
    }

    public topicOptionInsert_args deepCopy() {
      return new topicOptionInsert_args(this);
    }

    @Override
    public void clear() {
      this.topicOption = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getTopicOption() {
      return this.topicOption;
    }

    public topicOptionInsert_args setTopicOption(com.wenshao.dal.thriftgen.TopicOption topicOption) {
      this.topicOption = topicOption;
      return this;
    }

    public void unsetTopicOption() {
      this.topicOption = null;
    }

    /** Returns true if field topicOption is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicOption() {
      return this.topicOption != null;
    }

    public void setTopicOptionIsSet(boolean value) {
      if (!value) {
        this.topicOption = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_OPTION:
        if (value == null) {
          unsetTopicOption();
        } else {
          setTopicOption((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_OPTION:
        return getTopicOption();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_OPTION:
        return isSetTopicOption();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionInsert_args)
        return this.equals((topicOptionInsert_args)that);
      return false;
    }

    public boolean equals(topicOptionInsert_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicOption = true && this.isSetTopicOption();
      boolean that_present_topicOption = true && that.isSetTopicOption();
      if (this_present_topicOption || that_present_topicOption) {
        if (!(this_present_topicOption && that_present_topicOption))
          return false;
        if (!this.topicOption.equals(that.topicOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicOption()) ? 131071 : 524287);
      if (isSetTopicOption())
        hashCode = hashCode * 8191 + topicOption.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicOption()).compareTo(other.isSetTopicOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOption, other.topicOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionInsert_args(");
      boolean first = true;

      sb.append("topicOption:");
      if (this.topicOption == null) {
        sb.append("null");
      } else {
        sb.append(this.topicOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicOption != null) {
        topicOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionInsert_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_argsStandardScheme getScheme() {
        return new topicOptionInsert_argsStandardScheme();
      }
    }

    private static class topicOptionInsert_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
                struct.topicOption.read(iprot);
                struct.setTopicOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicOption != null) {
          oprot.writeFieldBegin(TOPIC_OPTION_FIELD_DESC);
          struct.topicOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionInsert_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_argsTupleScheme getScheme() {
        return new topicOptionInsert_argsTupleScheme();
      }
    }

    private static class topicOptionInsert_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicOption()) {
          struct.topicOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
          struct.topicOption.read(iprot);
          struct.setTopicOptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionInsert_result implements org.apache.thrift.TBase<topicOptionInsert_result, topicOptionInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionInsert_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionInsert_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionInsert_result.class, metaDataMap);
    }

    public topicOptionInsert_result() {
    }

    public topicOptionInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionInsert_result(topicOptionInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicOptionInsert_result deepCopy() {
      return new topicOptionInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionInsert_result)
        return this.equals((topicOptionInsert_result)that);
      return false;
    }

    public boolean equals(topicOptionInsert_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionInsert_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_resultStandardScheme getScheme() {
        return new topicOptionInsert_resultStandardScheme();
      }
    }

    private static class topicOptionInsert_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionInsert_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionInsert_resultTupleScheme getScheme() {
        return new topicOptionInsert_resultTupleScheme();
      }
    }

    private static class topicOptionInsert_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionUpdate_args implements org.apache.thrift.TBase<topicOptionUpdate_args, topicOptionUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionUpdate_args");

    private static final org.apache.thrift.protocol.TField TOPIC_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOption", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionUpdate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionUpdate_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption topicOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_OPTION((short)1, "topicOption");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_OPTION
            return TOPIC_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_OPTION, new org.apache.thrift.meta_data.FieldMetaData("topicOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionUpdate_args.class, metaDataMap);
    }

    public topicOptionUpdate_args() {
    }

    public topicOptionUpdate_args(
      com.wenshao.dal.thriftgen.TopicOption topicOption)
    {
      this();
      this.topicOption = topicOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionUpdate_args(topicOptionUpdate_args other) {
      if (other.isSetTopicOption()) {
        this.topicOption = new com.wenshao.dal.thriftgen.TopicOption(other.topicOption);
      }
    }

    public topicOptionUpdate_args deepCopy() {
      return new topicOptionUpdate_args(this);
    }

    @Override
    public void clear() {
      this.topicOption = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getTopicOption() {
      return this.topicOption;
    }

    public topicOptionUpdate_args setTopicOption(com.wenshao.dal.thriftgen.TopicOption topicOption) {
      this.topicOption = topicOption;
      return this;
    }

    public void unsetTopicOption() {
      this.topicOption = null;
    }

    /** Returns true if field topicOption is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicOption() {
      return this.topicOption != null;
    }

    public void setTopicOptionIsSet(boolean value) {
      if (!value) {
        this.topicOption = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_OPTION:
        if (value == null) {
          unsetTopicOption();
        } else {
          setTopicOption((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_OPTION:
        return getTopicOption();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_OPTION:
        return isSetTopicOption();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionUpdate_args)
        return this.equals((topicOptionUpdate_args)that);
      return false;
    }

    public boolean equals(topicOptionUpdate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicOption = true && this.isSetTopicOption();
      boolean that_present_topicOption = true && that.isSetTopicOption();
      if (this_present_topicOption || that_present_topicOption) {
        if (!(this_present_topicOption && that_present_topicOption))
          return false;
        if (!this.topicOption.equals(that.topicOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicOption()) ? 131071 : 524287);
      if (isSetTopicOption())
        hashCode = hashCode * 8191 + topicOption.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicOption()).compareTo(other.isSetTopicOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOption, other.topicOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionUpdate_args(");
      boolean first = true;

      sb.append("topicOption:");
      if (this.topicOption == null) {
        sb.append("null");
      } else {
        sb.append(this.topicOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicOption != null) {
        topicOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionUpdate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_argsStandardScheme getScheme() {
        return new topicOptionUpdate_argsStandardScheme();
      }
    }

    private static class topicOptionUpdate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
                struct.topicOption.read(iprot);
                struct.setTopicOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicOption != null) {
          oprot.writeFieldBegin(TOPIC_OPTION_FIELD_DESC);
          struct.topicOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionUpdate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_argsTupleScheme getScheme() {
        return new topicOptionUpdate_argsTupleScheme();
      }
    }

    private static class topicOptionUpdate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicOption()) {
          struct.topicOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
          struct.topicOption.read(iprot);
          struct.setTopicOptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionUpdate_result implements org.apache.thrift.TBase<topicOptionUpdate_result, topicOptionUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionUpdate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionUpdate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionUpdate_result.class, metaDataMap);
    }

    public topicOptionUpdate_result() {
    }

    public topicOptionUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionUpdate_result(topicOptionUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicOptionUpdate_result deepCopy() {
      return new topicOptionUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionUpdate_result)
        return this.equals((topicOptionUpdate_result)that);
      return false;
    }

    public boolean equals(topicOptionUpdate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionUpdate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_resultStandardScheme getScheme() {
        return new topicOptionUpdate_resultStandardScheme();
      }
    }

    private static class topicOptionUpdate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionUpdate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionUpdate_resultTupleScheme getScheme() {
        return new topicOptionUpdate_resultTupleScheme();
      }
    }

    private static class topicOptionUpdate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionRemove_args implements org.apache.thrift.TBase<topicOptionRemove_args, topicOptionRemove_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionRemove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionRemove_args");

    private static final org.apache.thrift.protocol.TField TOPIC_OPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOption", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionRemove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionRemove_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption topicOption; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_OPTION((short)1, "topicOption");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_OPTION
            return TOPIC_OPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_OPTION, new org.apache.thrift.meta_data.FieldMetaData("topicOption", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionRemove_args.class, metaDataMap);
    }

    public topicOptionRemove_args() {
    }

    public topicOptionRemove_args(
      com.wenshao.dal.thriftgen.TopicOption topicOption)
    {
      this();
      this.topicOption = topicOption;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionRemove_args(topicOptionRemove_args other) {
      if (other.isSetTopicOption()) {
        this.topicOption = new com.wenshao.dal.thriftgen.TopicOption(other.topicOption);
      }
    }

    public topicOptionRemove_args deepCopy() {
      return new topicOptionRemove_args(this);
    }

    @Override
    public void clear() {
      this.topicOption = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getTopicOption() {
      return this.topicOption;
    }

    public topicOptionRemove_args setTopicOption(com.wenshao.dal.thriftgen.TopicOption topicOption) {
      this.topicOption = topicOption;
      return this;
    }

    public void unsetTopicOption() {
      this.topicOption = null;
    }

    /** Returns true if field topicOption is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicOption() {
      return this.topicOption != null;
    }

    public void setTopicOptionIsSet(boolean value) {
      if (!value) {
        this.topicOption = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_OPTION:
        if (value == null) {
          unsetTopicOption();
        } else {
          setTopicOption((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_OPTION:
        return getTopicOption();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_OPTION:
        return isSetTopicOption();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionRemove_args)
        return this.equals((topicOptionRemove_args)that);
      return false;
    }

    public boolean equals(topicOptionRemove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicOption = true && this.isSetTopicOption();
      boolean that_present_topicOption = true && that.isSetTopicOption();
      if (this_present_topicOption || that_present_topicOption) {
        if (!(this_present_topicOption && that_present_topicOption))
          return false;
        if (!this.topicOption.equals(that.topicOption))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicOption()) ? 131071 : 524287);
      if (isSetTopicOption())
        hashCode = hashCode * 8191 + topicOption.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicOption()).compareTo(other.isSetTopicOption());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicOption()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOption, other.topicOption);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionRemove_args(");
      boolean first = true;

      sb.append("topicOption:");
      if (this.topicOption == null) {
        sb.append("null");
      } else {
        sb.append(this.topicOption);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicOption != null) {
        topicOption.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionRemove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_argsStandardScheme getScheme() {
        return new topicOptionRemove_argsStandardScheme();
      }
    }

    private static class topicOptionRemove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_OPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
                struct.topicOption.read(iprot);
                struct.setTopicOptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicOption != null) {
          oprot.writeFieldBegin(TOPIC_OPTION_FIELD_DESC);
          struct.topicOption.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionRemove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_argsTupleScheme getScheme() {
        return new topicOptionRemove_argsTupleScheme();
      }
    }

    private static class topicOptionRemove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicOption()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicOption()) {
          struct.topicOption.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicOption = new com.wenshao.dal.thriftgen.TopicOption();
          struct.topicOption.read(iprot);
          struct.setTopicOptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionRemove_result implements org.apache.thrift.TBase<topicOptionRemove_result, topicOptionRemove_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionRemove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionRemove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionRemove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionRemove_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionRemove_result.class, metaDataMap);
    }

    public topicOptionRemove_result() {
    }

    public topicOptionRemove_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionRemove_result(topicOptionRemove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicOptionRemove_result deepCopy() {
      return new topicOptionRemove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicOptionRemove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionRemove_result)
        return this.equals((topicOptionRemove_result)that);
      return false;
    }

    public boolean equals(topicOptionRemove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionRemove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionRemove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_resultStandardScheme getScheme() {
        return new topicOptionRemove_resultStandardScheme();
      }
    }

    private static class topicOptionRemove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionRemove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionRemove_resultTupleScheme getScheme() {
        return new topicOptionRemove_resultTupleScheme();
      }
    }

    private static class topicOptionRemove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionFindById_args implements org.apache.thrift.TBase<topicOptionFindById_args, topicOptionFindById_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionFindById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionFindById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionFindById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionFindById_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionFindById_args.class, metaDataMap);
    }

    public topicOptionFindById_args() {
    }

    public topicOptionFindById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionFindById_args(topicOptionFindById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public topicOptionFindById_args deepCopy() {
      return new topicOptionFindById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public topicOptionFindById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionFindById_args)
        return this.equals((topicOptionFindById_args)that);
      return false;
    }

    public boolean equals(topicOptionFindById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionFindById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionFindById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionFindById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionFindById_argsStandardScheme getScheme() {
        return new topicOptionFindById_argsStandardScheme();
      }
    }

    private static class topicOptionFindById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionFindById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionFindById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionFindById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionFindById_argsTupleScheme getScheme() {
        return new topicOptionFindById_argsTupleScheme();
      }
    }

    private static class topicOptionFindById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionFindById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionFindById_result implements org.apache.thrift.TBase<topicOptionFindById_result, topicOptionFindById_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionFindById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionFindById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionFindById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionFindById_resultTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicOption success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionFindById_result.class, metaDataMap);
    }

    public topicOptionFindById_result() {
    }

    public topicOptionFindById_result(
      com.wenshao.dal.thriftgen.TopicOption success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionFindById_result(topicOptionFindById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.wenshao.dal.thriftgen.TopicOption(other.success);
      }
    }

    public topicOptionFindById_result deepCopy() {
      return new topicOptionFindById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.wenshao.dal.thriftgen.TopicOption getSuccess() {
      return this.success;
    }

    public topicOptionFindById_result setSuccess(com.wenshao.dal.thriftgen.TopicOption success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.wenshao.dal.thriftgen.TopicOption)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionFindById_result)
        return this.equals((topicOptionFindById_result)that);
      return false;
    }

    public boolean equals(topicOptionFindById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionFindById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionFindById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionFindById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionFindById_resultStandardScheme getScheme() {
        return new topicOptionFindById_resultStandardScheme();
      }
    }

    private static class topicOptionFindById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionFindById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.wenshao.dal.thriftgen.TopicOption();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionFindById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionFindById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionFindById_resultTupleScheme getScheme() {
        return new topicOptionFindById_resultTupleScheme();
      }
    }

    private static class topicOptionFindById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionFindById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.wenshao.dal.thriftgen.TopicOption();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelect_args implements org.apache.thrift.TBase<topicOptionSelect_args, topicOptionSelect_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelect_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelect_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelect_args.class, metaDataMap);
    }

    public topicOptionSelect_args() {
    }

    public topicOptionSelect_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelect_args(topicOptionSelect_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicOptionSelect_args deepCopy() {
      return new topicOptionSelect_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicOptionSelect_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelect_args)
        return this.equals((topicOptionSelect_args)that);
      return false;
    }

    public boolean equals(topicOptionSelect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelect_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_argsStandardScheme getScheme() {
        return new topicOptionSelect_argsStandardScheme();
      }
    }

    private static class topicOptionSelect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_argsTupleScheme getScheme() {
        return new topicOptionSelect_argsTupleScheme();
      }
    }

    private static class topicOptionSelect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelect_result implements org.apache.thrift.TBase<topicOptionSelect_result, topicOptionSelect_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelect_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelect_result.class, metaDataMap);
    }

    public topicOptionSelect_result() {
    }

    public topicOptionSelect_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicOption> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelect_result(topicOptionSelect_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicOption> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicOption other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicOption(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicOptionSelect_result deepCopy() {
      return new topicOptionSelect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicOption> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicOption elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getSuccess() {
      return this.success;
    }

    public topicOptionSelect_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicOption> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicOptionSelect_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicOption>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelect_result)
        return this.equals((topicOptionSelect_result)that);
      return false;
    }

    public boolean equals(topicOptionSelect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_resultStandardScheme getScheme() {
        return new topicOptionSelect_resultStandardScheme();
      }
    }

    private static class topicOptionSelect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list232 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list232.size);
                  com.wenshao.dal.thriftgen.TopicOption _elem233;
                  for (int _i234 = 0; _i234 < _list232.size; ++_i234)
                  {
                    _elem233 = new com.wenshao.dal.thriftgen.TopicOption();
                    _elem233.read(iprot);
                    struct.success.add(_elem233);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicOption _iter235 : struct.success)
            {
              _iter235.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelect_resultTupleScheme getScheme() {
        return new topicOptionSelect_resultTupleScheme();
      }
    }

    private static class topicOptionSelect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicOption _iter236 : struct.success)
            {
              _iter236.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list237 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list237.size);
            com.wenshao.dal.thriftgen.TopicOption _elem238;
            for (int _i239 = 0; _i239 < _list237.size; ++_i239)
            {
              _elem238 = new com.wenshao.dal.thriftgen.TopicOption();
              _elem238.read(iprot);
              struct.success.add(_elem238);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelectNoCache_args implements org.apache.thrift.TBase<topicOptionSelectNoCache_args, topicOptionSelectNoCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelectNoCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelectNoCache_args");

    private static final org.apache.thrift.protocol.TField ABSTRACT_SQL_FIELD_DESC = new org.apache.thrift.protocol.TField("abstractSql", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelectNoCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelectNoCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.AbstractSql abstractSql; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ABSTRACT_SQL((short)1, "abstractSql");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ABSTRACT_SQL
            return ABSTRACT_SQL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ABSTRACT_SQL, new org.apache.thrift.meta_data.FieldMetaData("abstractSql", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.AbstractSql.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelectNoCache_args.class, metaDataMap);
    }

    public topicOptionSelectNoCache_args() {
    }

    public topicOptionSelectNoCache_args(
      com.wenshao.dal.thriftgen.AbstractSql abstractSql)
    {
      this();
      this.abstractSql = abstractSql;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelectNoCache_args(topicOptionSelectNoCache_args other) {
      if (other.isSetAbstractSql()) {
        this.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql(other.abstractSql);
      }
    }

    public topicOptionSelectNoCache_args deepCopy() {
      return new topicOptionSelectNoCache_args(this);
    }

    @Override
    public void clear() {
      this.abstractSql = null;
    }

    public com.wenshao.dal.thriftgen.AbstractSql getAbstractSql() {
      return this.abstractSql;
    }

    public topicOptionSelectNoCache_args setAbstractSql(com.wenshao.dal.thriftgen.AbstractSql abstractSql) {
      this.abstractSql = abstractSql;
      return this;
    }

    public void unsetAbstractSql() {
      this.abstractSql = null;
    }

    /** Returns true if field abstractSql is set (has been assigned a value) and false otherwise */
    public boolean isSetAbstractSql() {
      return this.abstractSql != null;
    }

    public void setAbstractSqlIsSet(boolean value) {
      if (!value) {
        this.abstractSql = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ABSTRACT_SQL:
        if (value == null) {
          unsetAbstractSql();
        } else {
          setAbstractSql((com.wenshao.dal.thriftgen.AbstractSql)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ABSTRACT_SQL:
        return getAbstractSql();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ABSTRACT_SQL:
        return isSetAbstractSql();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelectNoCache_args)
        return this.equals((topicOptionSelectNoCache_args)that);
      return false;
    }

    public boolean equals(topicOptionSelectNoCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_abstractSql = true && this.isSetAbstractSql();
      boolean that_present_abstractSql = true && that.isSetAbstractSql();
      if (this_present_abstractSql || that_present_abstractSql) {
        if (!(this_present_abstractSql && that_present_abstractSql))
          return false;
        if (!this.abstractSql.equals(that.abstractSql))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAbstractSql()) ? 131071 : 524287);
      if (isSetAbstractSql())
        hashCode = hashCode * 8191 + abstractSql.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelectNoCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAbstractSql()).compareTo(other.isSetAbstractSql());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAbstractSql()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.abstractSql, other.abstractSql);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelectNoCache_args(");
      boolean first = true;

      sb.append("abstractSql:");
      if (this.abstractSql == null) {
        sb.append("null");
      } else {
        sb.append(this.abstractSql);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (abstractSql != null) {
        abstractSql.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelectNoCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_argsStandardScheme getScheme() {
        return new topicOptionSelectNoCache_argsStandardScheme();
      }
    }

    private static class topicOptionSelectNoCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelectNoCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ABSTRACT_SQL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
                struct.abstractSql.read(iprot);
                struct.setAbstractSqlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.abstractSql != null) {
          oprot.writeFieldBegin(ABSTRACT_SQL_FIELD_DESC);
          struct.abstractSql.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelectNoCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_argsTupleScheme getScheme() {
        return new topicOptionSelectNoCache_argsTupleScheme();
      }
    }

    private static class topicOptionSelectNoCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelectNoCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAbstractSql()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAbstractSql()) {
          struct.abstractSql.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.abstractSql = new com.wenshao.dal.thriftgen.AbstractSql();
          struct.abstractSql.read(iprot);
          struct.setAbstractSqlIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicOptionSelectNoCache_result implements org.apache.thrift.TBase<topicOptionSelectNoCache_result, topicOptionSelectNoCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicOptionSelectNoCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicOptionSelectNoCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField RE_FIELD_DESC = new org.apache.thrift.protocol.TField("re", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicOptionSelectNoCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicOptionSelectNoCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> success; // required
    public com.wenshao.dal.thriftgen.RequestException re; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      RE((short)1, "re");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // RE
            return RE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicOption.class))));
      tmpMap.put(_Fields.RE, new org.apache.thrift.meta_data.FieldMetaData("re", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.RequestException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicOptionSelectNoCache_result.class, metaDataMap);
    }

    public topicOptionSelectNoCache_result() {
    }

    public topicOptionSelectNoCache_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicOption> success,
      com.wenshao.dal.thriftgen.RequestException re)
    {
      this();
      this.success = success;
      this.re = re;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicOptionSelectNoCache_result(topicOptionSelectNoCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicOption> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicOption other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicOption(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetRe()) {
        this.re = new com.wenshao.dal.thriftgen.RequestException(other.re);
      }
    }

    public topicOptionSelectNoCache_result deepCopy() {
      return new topicOptionSelectNoCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.re = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicOption> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicOption elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicOption> getSuccess() {
      return this.success;
    }

    public topicOptionSelectNoCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicOption> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.wenshao.dal.thriftgen.RequestException getRe() {
      return this.re;
    }

    public topicOptionSelectNoCache_result setRe(com.wenshao.dal.thriftgen.RequestException re) {
      this.re = re;
      return this;
    }

    public void unsetRe() {
      this.re = null;
    }

    /** Returns true if field re is set (has been assigned a value) and false otherwise */
    public boolean isSetRe() {
      return this.re != null;
    }

    public void setReIsSet(boolean value) {
      if (!value) {
        this.re = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicOption>)value);
        }
        break;

      case RE:
        if (value == null) {
          unsetRe();
        } else {
          setRe((com.wenshao.dal.thriftgen.RequestException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case RE:
        return getRe();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case RE:
        return isSetRe();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicOptionSelectNoCache_result)
        return this.equals((topicOptionSelectNoCache_result)that);
      return false;
    }

    public boolean equals(topicOptionSelectNoCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_re = true && this.isSetRe();
      boolean that_present_re = true && that.isSetRe();
      if (this_present_re || that_present_re) {
        if (!(this_present_re && that_present_re))
          return false;
        if (!this.re.equals(that.re))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetRe()) ? 131071 : 524287);
      if (isSetRe())
        hashCode = hashCode * 8191 + re.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicOptionSelectNoCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRe()).compareTo(other.isSetRe());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRe()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.re, other.re);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicOptionSelectNoCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("re:");
      if (this.re == null) {
        sb.append("null");
      } else {
        sb.append(this.re);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicOptionSelectNoCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_resultStandardScheme getScheme() {
        return new topicOptionSelectNoCache_resultStandardScheme();
      }
    }

    private static class topicOptionSelectNoCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicOptionSelectNoCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list240 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list240.size);
                  com.wenshao.dal.thriftgen.TopicOption _elem241;
                  for (int _i242 = 0; _i242 < _list240.size; ++_i242)
                  {
                    _elem241 = new com.wenshao.dal.thriftgen.TopicOption();
                    _elem241.read(iprot);
                    struct.success.add(_elem241);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // RE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.re = new com.wenshao.dal.thriftgen.RequestException();
                struct.re.read(iprot);
                struct.setReIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicOption _iter243 : struct.success)
            {
              _iter243.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.re != null) {
          oprot.writeFieldBegin(RE_FIELD_DESC);
          struct.re.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicOptionSelectNoCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicOptionSelectNoCache_resultTupleScheme getScheme() {
        return new topicOptionSelectNoCache_resultTupleScheme();
      }
    }

    private static class topicOptionSelectNoCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicOptionSelectNoCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetRe()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicOption _iter244 : struct.success)
            {
              _iter244.write(oprot);
            }
          }
        }
        if (struct.isSetRe()) {
          struct.re.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicOptionSelectNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list245 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicOption>(_list245.size);
            com.wenshao.dal.thriftgen.TopicOption _elem246;
            for (int _i247 = 0; _i247 < _list245.size; ++_i247)
            {
              _elem246 = new com.wenshao.dal.thriftgen.TopicOption();
              _elem246.read(iprot);
              struct.success.add(_elem246);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.re = new com.wenshao.dal.thriftgen.RequestException();
          struct.re.read(iprot);
          struct.setReIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicInsert_args implements org.apache.thrift.TBase<topicInsert_args, topicInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicInsert_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicInsert_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicInsert_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicInsert_args.class, metaDataMap);
    }

    public topicInsert_args() {
    }

    public topicInsert_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicInsert_args(topicInsert_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicInsert_args deepCopy() {
      return new topicInsert_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicInsert_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicInsert_args)
        return this.equals((topicInsert_args)that);
      return false;
    }

    public boolean equals(topicInsert_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicInsert_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicInsert_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_argsStandardScheme getScheme() {
        return new topicInsert_argsStandardScheme();
      }
    }

    private static class topicInsert_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicInsert_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_argsTupleScheme getScheme() {
        return new topicInsert_argsTupleScheme();
      }
    }

    private static class topicInsert_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicInsert_result implements org.apache.thrift.TBase<topicInsert_result, topicInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicInsert_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicInsert_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicInsert_result.class, metaDataMap);
    }

    public topicInsert_result() {
    }

    public topicInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicInsert_result(topicInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicInsert_result deepCopy() {
      return new topicInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicInsert_result)
        return this.equals((topicInsert_result)that);
      return false;
    }

    public boolean equals(topicInsert_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicInsert_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_resultStandardScheme getScheme() {
        return new topicInsert_resultStandardScheme();
      }
    }

    private static class topicInsert_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicInsert_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicInsert_resultTupleScheme getScheme() {
        return new topicInsert_resultTupleScheme();
      }
    }

    private static class topicInsert_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicUpdate_args implements org.apache.thrift.TBase<topicUpdate_args, topicUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicUpdate_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicUpdate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicUpdate_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicUpdate_args.class, metaDataMap);
    }

    public topicUpdate_args() {
    }

    public topicUpdate_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicUpdate_args(topicUpdate_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicUpdate_args deepCopy() {
      return new topicUpdate_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicUpdate_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicUpdate_args)
        return this.equals((topicUpdate_args)that);
      return false;
    }

    public boolean equals(topicUpdate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicUpdate_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicUpdate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_argsStandardScheme getScheme() {
        return new topicUpdate_argsStandardScheme();
      }
    }

    private static class topicUpdate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicUpdate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_argsTupleScheme getScheme() {
        return new topicUpdate_argsTupleScheme();
      }
    }

    private static class topicUpdate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicUpdate_result implements org.apache.thrift.TBase<topicUpdate_result, topicUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicUpdate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicUpdate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicUpdate_result.class, metaDataMap);
    }

    public topicUpdate_result() {
    }

    public topicUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicUpdate_result(topicUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicUpdate_result deepCopy() {
      return new topicUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicUpdate_result)
        return this.equals((topicUpdate_result)that);
      return false;
    }

    public boolean equals(topicUpdate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicUpdate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_resultStandardScheme getScheme() {
        return new topicUpdate_resultStandardScheme();
      }
    }

    private static class topicUpdate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicUpdate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicUpdate_resultTupleScheme getScheme() {
        return new topicUpdate_resultTupleScheme();
      }
    }

    private static class topicUpdate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicRemove_args implements org.apache.thrift.TBase<topicRemove_args, topicRemove_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicRemove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicRemove_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicRemove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicRemove_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicRemove_args.class, metaDataMap);
    }

    public topicRemove_args() {
    }

    public topicRemove_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicRemove_args(topicRemove_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicRemove_args deepCopy() {
      return new topicRemove_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicRemove_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicRemove_args)
        return this.equals((topicRemove_args)that);
      return false;
    }

    public boolean equals(topicRemove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicRemove_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicRemove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_argsStandardScheme getScheme() {
        return new topicRemove_argsStandardScheme();
      }
    }

    private static class topicRemove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicRemove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_argsTupleScheme getScheme() {
        return new topicRemove_argsTupleScheme();
      }
    }

    private static class topicRemove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicRemove_result implements org.apache.thrift.TBase<topicRemove_result, topicRemove_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicRemove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicRemove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicRemove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicRemove_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicRemove_result.class, metaDataMap);
    }

    public topicRemove_result() {
    }

    public topicRemove_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicRemove_result(topicRemove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicRemove_result deepCopy() {
      return new topicRemove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicRemove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicRemove_result)
        return this.equals((topicRemove_result)that);
      return false;
    }

    public boolean equals(topicRemove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicRemove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicRemove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_resultStandardScheme getScheme() {
        return new topicRemove_resultStandardScheme();
      }
    }

    private static class topicRemove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicRemove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicRemove_resultTupleScheme getScheme() {
        return new topicRemove_resultTupleScheme();
      }
    }

    private static class topicRemove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class courseFindById_args implements org.apache.thrift.TBase<courseFindById_args, courseFindById_args._Fields>, java.io.Serializable, Cloneable, Comparable<courseFindById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("courseFindById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new courseFindById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new courseFindById_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(courseFindById_args.class, metaDataMap);
    }

    public courseFindById_args() {
    }

    public courseFindById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public courseFindById_args(courseFindById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public courseFindById_args deepCopy() {
      return new courseFindById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public courseFindById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof courseFindById_args)
        return this.equals((courseFindById_args)that);
      return false;
    }

    public boolean equals(courseFindById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(courseFindById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("courseFindById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class courseFindById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public courseFindById_argsStandardScheme getScheme() {
        return new courseFindById_argsStandardScheme();
      }
    }

    private static class courseFindById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<courseFindById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, courseFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, courseFindById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class courseFindById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public courseFindById_argsTupleScheme getScheme() {
        return new courseFindById_argsTupleScheme();
      }
    }

    private static class courseFindById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<courseFindById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, courseFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, courseFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class courseFindById_result implements org.apache.thrift.TBase<courseFindById_result, courseFindById_result._Fields>, java.io.Serializable, Cloneable, Comparable<courseFindById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("courseFindById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new courseFindById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new courseFindById_resultTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(courseFindById_result.class, metaDataMap);
    }

    public courseFindById_result() {
    }

    public courseFindById_result(
      com.wenshao.dal.thriftgen.Topic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public courseFindById_result(courseFindById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.wenshao.dal.thriftgen.Topic(other.success);
      }
    }

    public courseFindById_result deepCopy() {
      return new courseFindById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.wenshao.dal.thriftgen.Topic getSuccess() {
      return this.success;
    }

    public courseFindById_result setSuccess(com.wenshao.dal.thriftgen.Topic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof courseFindById_result)
        return this.equals((courseFindById_result)that);
      return false;
    }

    public boolean equals(courseFindById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(courseFindById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("courseFindById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class courseFindById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public courseFindById_resultStandardScheme getScheme() {
        return new courseFindById_resultStandardScheme();
      }
    }

    private static class courseFindById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<courseFindById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, courseFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.wenshao.dal.thriftgen.Topic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, courseFindById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class courseFindById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public courseFindById_resultTupleScheme getScheme() {
        return new courseFindById_resultTupleScheme();
      }
    }

    private static class courseFindById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<courseFindById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, courseFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, courseFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.wenshao.dal.thriftgen.Topic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelect_args implements org.apache.thrift.TBase<topicSelect_args, topicSelect_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelect_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelect_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelect_args.class, metaDataMap);
    }

    public topicSelect_args() {
    }

    public topicSelect_args(
      com.wenshao.dal.thriftgen.Topic topic)
    {
      this();
      this.topic = topic;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelect_args(topicSelect_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
    }

    public topicSelect_args deepCopy() {
      return new topicSelect_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicSelect_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelect_args)
        return this.equals((topicSelect_args)that);
      return false;
    }

    public boolean equals(topicSelect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelect_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_argsStandardScheme getScheme() {
        return new topicSelect_argsStandardScheme();
      }
    }

    private static class topicSelect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_argsTupleScheme getScheme() {
        return new topicSelect_argsTupleScheme();
      }
    }

    private static class topicSelect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelect_result implements org.apache.thrift.TBase<topicSelect_result, topicSelect_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelect_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelect_result.class, metaDataMap);
    }

    public topicSelect_result() {
    }

    public topicSelect_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelect_result(topicSelect_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicSelect_result deepCopy() {
      return new topicSelect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelect_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelect_result)
        return this.equals((topicSelect_result)that);
      return false;
    }

    public boolean equals(topicSelect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_resultStandardScheme getScheme() {
        return new topicSelect_resultStandardScheme();
      }
    }

    private static class topicSelect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list248 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list248.size);
                  com.wenshao.dal.thriftgen.Topic _elem249;
                  for (int _i250 = 0; _i250 < _list248.size; ++_i250)
                  {
                    _elem249 = new com.wenshao.dal.thriftgen.Topic();
                    _elem249.read(iprot);
                    struct.success.add(_elem249);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter251 : struct.success)
            {
              _iter251.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelect_resultTupleScheme getScheme() {
        return new topicSelect_resultTupleScheme();
      }
    }

    private static class topicSelect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter252 : struct.success)
            {
              _iter252.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list253 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list253.size);
            com.wenshao.dal.thriftgen.Topic _elem254;
            for (int _i255 = 0; _i255 < _list253.size; ++_i255)
            {
              _elem254 = new com.wenshao.dal.thriftgen.Topic();
              _elem254.read(iprot);
              struct.success.add(_elem254);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQuery_args implements org.apache.thrift.TBase<topicSelectQuery_args, topicSelectQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQuery_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQuery_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required
    public com.wenshao.dal.thriftgen.Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQuery_args.class, metaDataMap);
    }

    public topicSelectQuery_args() {
    }

    public topicSelectQuery_args(
      com.wenshao.dal.thriftgen.Topic topic,
      com.wenshao.dal.thriftgen.Query query)
    {
      this();
      this.topic = topic;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQuery_args(topicSelectQuery_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
    }

    public topicSelectQuery_args deepCopy() {
      return new topicSelectQuery_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.query = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicSelectQuery_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicSelectQuery_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQuery_args)
        return this.equals((topicSelectQuery_args)that);
      return false;
    }

    public boolean equals(topicSelectQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQuery_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQuery_argsStandardScheme getScheme() {
        return new topicSelectQuery_argsStandardScheme();
      }
    }

    private static class topicSelectQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQuery_argsTupleScheme getScheme() {
        return new topicSelectQuery_argsTupleScheme();
      }
    }

    private static class topicSelectQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQuery_result implements org.apache.thrift.TBase<topicSelectQuery_result, topicSelectQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQuery_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQuery_result.class, metaDataMap);
    }

    public topicSelectQuery_result() {
    }

    public topicSelectQuery_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQuery_result(topicSelectQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicSelectQuery_result deepCopy() {
      return new topicSelectQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelectQuery_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQuery_result)
        return this.equals((topicSelectQuery_result)that);
      return false;
    }

    public boolean equals(topicSelectQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQuery_resultStandardScheme getScheme() {
        return new topicSelectQuery_resultStandardScheme();
      }
    }

    private static class topicSelectQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list256 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list256.size);
                  com.wenshao.dal.thriftgen.Topic _elem257;
                  for (int _i258 = 0; _i258 < _list256.size; ++_i258)
                  {
                    _elem257 = new com.wenshao.dal.thriftgen.Topic();
                    _elem257.read(iprot);
                    struct.success.add(_elem257);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter259 : struct.success)
            {
              _iter259.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQuery_resultTupleScheme getScheme() {
        return new topicSelectQuery_resultTupleScheme();
      }
    }

    private static class topicSelectQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter260 : struct.success)
            {
              _iter260.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list261 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list261.size);
            com.wenshao.dal.thriftgen.Topic _elem262;
            for (int _i263 = 0; _i263 < _list261.size; ++_i263)
            {
              _elem262 = new com.wenshao.dal.thriftgen.Topic();
              _elem262.read(iprot);
              struct.success.add(_elem262);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectCustom_args implements org.apache.thrift.TBase<topicSelectCustom_args, topicSelectCustom_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectCustom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectCustom_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectCustom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectCustom_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required
    public com.wenshao.dal.thriftgen.Custom custom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      CUSTOM((short)2, "custom");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // CUSTOM
            return CUSTOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Custom.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectCustom_args.class, metaDataMap);
    }

    public topicSelectCustom_args() {
    }

    public topicSelectCustom_args(
      com.wenshao.dal.thriftgen.Topic topic,
      com.wenshao.dal.thriftgen.Custom custom)
    {
      this();
      this.topic = topic;
      this.custom = custom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectCustom_args(topicSelectCustom_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
      if (other.isSetCustom()) {
        this.custom = new com.wenshao.dal.thriftgen.Custom(other.custom);
      }
    }

    public topicSelectCustom_args deepCopy() {
      return new topicSelectCustom_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.custom = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicSelectCustom_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public com.wenshao.dal.thriftgen.Custom getCustom() {
      return this.custom;
    }

    public topicSelectCustom_args setCustom(com.wenshao.dal.thriftgen.Custom custom) {
      this.custom = custom;
      return this;
    }

    public void unsetCustom() {
      this.custom = null;
    }

    /** Returns true if field custom is set (has been assigned a value) and false otherwise */
    public boolean isSetCustom() {
      return this.custom != null;
    }

    public void setCustomIsSet(boolean value) {
      if (!value) {
        this.custom = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      case CUSTOM:
        if (value == null) {
          unsetCustom();
        } else {
          setCustom((com.wenshao.dal.thriftgen.Custom)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case CUSTOM:
        return getCustom();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case CUSTOM:
        return isSetCustom();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectCustom_args)
        return this.equals((topicSelectCustom_args)that);
      return false;
    }

    public boolean equals(topicSelectCustom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_custom = true && this.isSetCustom();
      boolean that_present_custom = true && that.isSetCustom();
      if (this_present_custom || that_present_custom) {
        if (!(this_present_custom && that_present_custom))
          return false;
        if (!this.custom.equals(that.custom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetCustom()) ? 131071 : 524287);
      if (isSetCustom())
        hashCode = hashCode * 8191 + custom.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectCustom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectCustom_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
      if (custom != null) {
        custom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectCustom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectCustom_argsStandardScheme getScheme() {
        return new topicSelectCustom_argsStandardScheme();
      }
    }

    private static class topicSelectCustom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectCustom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CUSTOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.custom = new com.wenshao.dal.thriftgen.Custom();
                struct.custom.read(iprot);
                struct.setCustomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectCustom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.custom != null) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          struct.custom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectCustom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectCustom_argsTupleScheme getScheme() {
        return new topicSelectCustom_argsTupleScheme();
      }
    }

    private static class topicSelectCustom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectCustom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetCustom()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
        if (struct.isSetCustom()) {
          struct.custom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.custom = new com.wenshao.dal.thriftgen.Custom();
          struct.custom.read(iprot);
          struct.setCustomIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectCustom_result implements org.apache.thrift.TBase<topicSelectCustom_result, topicSelectCustom_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectCustom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectCustom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectCustom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectCustom_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectCustom_result.class, metaDataMap);
    }

    public topicSelectCustom_result() {
    }

    public topicSelectCustom_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectCustom_result(topicSelectCustom_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicSelectCustom_result deepCopy() {
      return new topicSelectCustom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelectCustom_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectCustom_result)
        return this.equals((topicSelectCustom_result)that);
      return false;
    }

    public boolean equals(topicSelectCustom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectCustom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectCustom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectCustom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectCustom_resultStandardScheme getScheme() {
        return new topicSelectCustom_resultStandardScheme();
      }
    }

    private static class topicSelectCustom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectCustom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list264 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list264.size);
                  com.wenshao.dal.thriftgen.Topic _elem265;
                  for (int _i266 = 0; _i266 < _list264.size; ++_i266)
                  {
                    _elem265 = new com.wenshao.dal.thriftgen.Topic();
                    _elem265.read(iprot);
                    struct.success.add(_elem265);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectCustom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter267 : struct.success)
            {
              _iter267.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectCustom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectCustom_resultTupleScheme getScheme() {
        return new topicSelectCustom_resultTupleScheme();
      }
    }

    private static class topicSelectCustom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectCustom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter268 : struct.success)
            {
              _iter268.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list269 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list269.size);
            com.wenshao.dal.thriftgen.Topic _elem270;
            for (int _i271 = 0; _i271 < _list269.size; ++_i271)
            {
              _elem270 = new com.wenshao.dal.thriftgen.Topic();
              _elem270.read(iprot);
              struct.success.add(_elem270);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQueryCustom_args implements org.apache.thrift.TBase<topicSelectQueryCustom_args, topicSelectQueryCustom_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQueryCustom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQueryCustom_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQueryCustom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQueryCustom_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required
    public com.wenshao.dal.thriftgen.Query query; // required
    public com.wenshao.dal.thriftgen.Custom custom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      QUERY((short)2, "query"),
      CUSTOM((short)3, "custom");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // QUERY
            return QUERY;
          case 3: // CUSTOM
            return CUSTOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Custom.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQueryCustom_args.class, metaDataMap);
    }

    public topicSelectQueryCustom_args() {
    }

    public topicSelectQueryCustom_args(
      com.wenshao.dal.thriftgen.Topic topic,
      com.wenshao.dal.thriftgen.Query query,
      com.wenshao.dal.thriftgen.Custom custom)
    {
      this();
      this.topic = topic;
      this.query = query;
      this.custom = custom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQueryCustom_args(topicSelectQueryCustom_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
      if (other.isSetCustom()) {
        this.custom = new com.wenshao.dal.thriftgen.Custom(other.custom);
      }
    }

    public topicSelectQueryCustom_args deepCopy() {
      return new topicSelectQueryCustom_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.query = null;
      this.custom = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicSelectQueryCustom_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicSelectQueryCustom_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.wenshao.dal.thriftgen.Custom getCustom() {
      return this.custom;
    }

    public topicSelectQueryCustom_args setCustom(com.wenshao.dal.thriftgen.Custom custom) {
      this.custom = custom;
      return this;
    }

    public void unsetCustom() {
      this.custom = null;
    }

    /** Returns true if field custom is set (has been assigned a value) and false otherwise */
    public boolean isSetCustom() {
      return this.custom != null;
    }

    public void setCustomIsSet(boolean value) {
      if (!value) {
        this.custom = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      case CUSTOM:
        if (value == null) {
          unsetCustom();
        } else {
          setCustom((com.wenshao.dal.thriftgen.Custom)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case QUERY:
        return getQuery();

      case CUSTOM:
        return getCustom();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case QUERY:
        return isSetQuery();
      case CUSTOM:
        return isSetCustom();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQueryCustom_args)
        return this.equals((topicSelectQueryCustom_args)that);
      return false;
    }

    public boolean equals(topicSelectQueryCustom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_custom = true && this.isSetCustom();
      boolean that_present_custom = true && that.isSetCustom();
      if (this_present_custom || that_present_custom) {
        if (!(this_present_custom && that_present_custom))
          return false;
        if (!this.custom.equals(that.custom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCustom()) ? 131071 : 524287);
      if (isSetCustom())
        hashCode = hashCode * 8191 + custom.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQueryCustom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQueryCustom_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
      if (query != null) {
        query.validate();
      }
      if (custom != null) {
        custom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQueryCustom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustom_argsStandardScheme getScheme() {
        return new topicSelectQueryCustom_argsStandardScheme();
      }
    }

    private static class topicSelectQueryCustom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQueryCustom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CUSTOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.custom = new com.wenshao.dal.thriftgen.Custom();
                struct.custom.read(iprot);
                struct.setCustomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.custom != null) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          struct.custom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQueryCustom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustom_argsTupleScheme getScheme() {
        return new topicSelectQueryCustom_argsTupleScheme();
      }
    }

    private static class topicSelectQueryCustom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQueryCustom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        if (struct.isSetCustom()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetCustom()) {
          struct.custom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.custom = new com.wenshao.dal.thriftgen.Custom();
          struct.custom.read(iprot);
          struct.setCustomIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQueryCustom_result implements org.apache.thrift.TBase<topicSelectQueryCustom_result, topicSelectQueryCustom_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQueryCustom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQueryCustom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQueryCustom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQueryCustom_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQueryCustom_result.class, metaDataMap);
    }

    public topicSelectQueryCustom_result() {
    }

    public topicSelectQueryCustom_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQueryCustom_result(topicSelectQueryCustom_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicSelectQueryCustom_result deepCopy() {
      return new topicSelectQueryCustom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelectQueryCustom_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQueryCustom_result)
        return this.equals((topicSelectQueryCustom_result)that);
      return false;
    }

    public boolean equals(topicSelectQueryCustom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQueryCustom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQueryCustom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQueryCustom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustom_resultStandardScheme getScheme() {
        return new topicSelectQueryCustom_resultStandardScheme();
      }
    }

    private static class topicSelectQueryCustom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQueryCustom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list272 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list272.size);
                  com.wenshao.dal.thriftgen.Topic _elem273;
                  for (int _i274 = 0; _i274 < _list272.size; ++_i274)
                  {
                    _elem273 = new com.wenshao.dal.thriftgen.Topic();
                    _elem273.read(iprot);
                    struct.success.add(_elem273);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter275 : struct.success)
            {
              _iter275.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQueryCustom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustom_resultTupleScheme getScheme() {
        return new topicSelectQueryCustom_resultTupleScheme();
      }
    }

    private static class topicSelectQueryCustom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQueryCustom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter276 : struct.success)
            {
              _iter276.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list277 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list277.size);
            com.wenshao.dal.thriftgen.Topic _elem278;
            for (int _i279 = 0; _i279 < _list277.size; ++_i279)
            {
              _elem278 = new com.wenshao.dal.thriftgen.Topic();
              _elem278.read(iprot);
              struct.success.add(_elem278);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQueryCustomNotCache_args implements org.apache.thrift.TBase<topicSelectQueryCustomNotCache_args, topicSelectQueryCustomNotCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQueryCustomNotCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQueryCustomNotCache_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQueryCustomNotCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQueryCustomNotCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required
    public com.wenshao.dal.thriftgen.Query query; // required
    public com.wenshao.dal.thriftgen.Custom custom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      QUERY((short)2, "query"),
      CUSTOM((short)3, "custom");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // QUERY
            return QUERY;
          case 3: // CUSTOM
            return CUSTOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Custom.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQueryCustomNotCache_args.class, metaDataMap);
    }

    public topicSelectQueryCustomNotCache_args() {
    }

    public topicSelectQueryCustomNotCache_args(
      com.wenshao.dal.thriftgen.Topic topic,
      com.wenshao.dal.thriftgen.Query query,
      com.wenshao.dal.thriftgen.Custom custom)
    {
      this();
      this.topic = topic;
      this.query = query;
      this.custom = custom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQueryCustomNotCache_args(topicSelectQueryCustomNotCache_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
      if (other.isSetCustom()) {
        this.custom = new com.wenshao.dal.thriftgen.Custom(other.custom);
      }
    }

    public topicSelectQueryCustomNotCache_args deepCopy() {
      return new topicSelectQueryCustomNotCache_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.query = null;
      this.custom = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicSelectQueryCustomNotCache_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicSelectQueryCustomNotCache_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.wenshao.dal.thriftgen.Custom getCustom() {
      return this.custom;
    }

    public topicSelectQueryCustomNotCache_args setCustom(com.wenshao.dal.thriftgen.Custom custom) {
      this.custom = custom;
      return this;
    }

    public void unsetCustom() {
      this.custom = null;
    }

    /** Returns true if field custom is set (has been assigned a value) and false otherwise */
    public boolean isSetCustom() {
      return this.custom != null;
    }

    public void setCustomIsSet(boolean value) {
      if (!value) {
        this.custom = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      case CUSTOM:
        if (value == null) {
          unsetCustom();
        } else {
          setCustom((com.wenshao.dal.thriftgen.Custom)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case QUERY:
        return getQuery();

      case CUSTOM:
        return getCustom();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case QUERY:
        return isSetQuery();
      case CUSTOM:
        return isSetCustom();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQueryCustomNotCache_args)
        return this.equals((topicSelectQueryCustomNotCache_args)that);
      return false;
    }

    public boolean equals(topicSelectQueryCustomNotCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_custom = true && this.isSetCustom();
      boolean that_present_custom = true && that.isSetCustom();
      if (this_present_custom || that_present_custom) {
        if (!(this_present_custom && that_present_custom))
          return false;
        if (!this.custom.equals(that.custom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCustom()) ? 131071 : 524287);
      if (isSetCustom())
        hashCode = hashCode * 8191 + custom.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQueryCustomNotCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQueryCustomNotCache_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
      if (query != null) {
        query.validate();
      }
      if (custom != null) {
        custom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQueryCustomNotCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustomNotCache_argsStandardScheme getScheme() {
        return new topicSelectQueryCustomNotCache_argsStandardScheme();
      }
    }

    private static class topicSelectQueryCustomNotCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQueryCustomNotCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CUSTOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.custom = new com.wenshao.dal.thriftgen.Custom();
                struct.custom.read(iprot);
                struct.setCustomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.custom != null) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          struct.custom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQueryCustomNotCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustomNotCache_argsTupleScheme getScheme() {
        return new topicSelectQueryCustomNotCache_argsTupleScheme();
      }
    }

    private static class topicSelectQueryCustomNotCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQueryCustomNotCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        if (struct.isSetCustom()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetCustom()) {
          struct.custom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.custom = new com.wenshao.dal.thriftgen.Custom();
          struct.custom.read(iprot);
          struct.setCustomIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQueryCustomNotCache_result implements org.apache.thrift.TBase<topicSelectQueryCustomNotCache_result, topicSelectQueryCustomNotCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQueryCustomNotCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQueryCustomNotCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQueryCustomNotCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQueryCustomNotCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQueryCustomNotCache_result.class, metaDataMap);
    }

    public topicSelectQueryCustomNotCache_result() {
    }

    public topicSelectQueryCustomNotCache_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQueryCustomNotCache_result(topicSelectQueryCustomNotCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicSelectQueryCustomNotCache_result deepCopy() {
      return new topicSelectQueryCustomNotCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelectQueryCustomNotCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQueryCustomNotCache_result)
        return this.equals((topicSelectQueryCustomNotCache_result)that);
      return false;
    }

    public boolean equals(topicSelectQueryCustomNotCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQueryCustomNotCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQueryCustomNotCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQueryCustomNotCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustomNotCache_resultStandardScheme getScheme() {
        return new topicSelectQueryCustomNotCache_resultStandardScheme();
      }
    }

    private static class topicSelectQueryCustomNotCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQueryCustomNotCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list280 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list280.size);
                  com.wenshao.dal.thriftgen.Topic _elem281;
                  for (int _i282 = 0; _i282 < _list280.size; ++_i282)
                  {
                    _elem281 = new com.wenshao.dal.thriftgen.Topic();
                    _elem281.read(iprot);
                    struct.success.add(_elem281);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter283 : struct.success)
            {
              _iter283.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQueryCustomNotCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryCustomNotCache_resultTupleScheme getScheme() {
        return new topicSelectQueryCustomNotCache_resultTupleScheme();
      }
    }

    private static class topicSelectQueryCustomNotCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQueryCustomNotCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter284 : struct.success)
            {
              _iter284.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list285 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list285.size);
            com.wenshao.dal.thriftgen.Topic _elem286;
            for (int _i287 = 0; _i287 < _list285.size; ++_i287)
            {
              _elem286 = new com.wenshao.dal.thriftgen.Topic();
              _elem286.read(iprot);
              struct.success.add(_elem286);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQueryNoCache_args implements org.apache.thrift.TBase<topicSelectQueryNoCache_args, topicSelectQueryNoCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQueryNoCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQueryNoCache_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQueryNoCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQueryNoCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required
    public com.wenshao.dal.thriftgen.Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQueryNoCache_args.class, metaDataMap);
    }

    public topicSelectQueryNoCache_args() {
    }

    public topicSelectQueryNoCache_args(
      com.wenshao.dal.thriftgen.Topic topic,
      com.wenshao.dal.thriftgen.Query query)
    {
      this();
      this.topic = topic;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQueryNoCache_args(topicSelectQueryNoCache_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
    }

    public topicSelectQueryNoCache_args deepCopy() {
      return new topicSelectQueryNoCache_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.query = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicSelectQueryNoCache_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicSelectQueryNoCache_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQueryNoCache_args)
        return this.equals((topicSelectQueryNoCache_args)that);
      return false;
    }

    public boolean equals(topicSelectQueryNoCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQueryNoCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQueryNoCache_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQueryNoCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryNoCache_argsStandardScheme getScheme() {
        return new topicSelectQueryNoCache_argsStandardScheme();
      }
    }

    private static class topicSelectQueryNoCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQueryNoCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQueryNoCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryNoCache_argsTupleScheme getScheme() {
        return new topicSelectQueryNoCache_argsTupleScheme();
      }
    }

    private static class topicSelectQueryNoCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQueryNoCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicSelectQueryNoCache_result implements org.apache.thrift.TBase<topicSelectQueryNoCache_result, topicSelectQueryNoCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicSelectQueryNoCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicSelectQueryNoCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicSelectQueryNoCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicSelectQueryNoCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.Topic> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicSelectQueryNoCache_result.class, metaDataMap);
    }

    public topicSelectQueryNoCache_result() {
    }

    public topicSelectQueryNoCache_result(
      java.util.List<com.wenshao.dal.thriftgen.Topic> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicSelectQueryNoCache_result(topicSelectQueryNoCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.Topic> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(other.success.size());
        for (com.wenshao.dal.thriftgen.Topic other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.Topic(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicSelectQueryNoCache_result deepCopy() {
      return new topicSelectQueryNoCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.Topic> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.Topic elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.Topic> getSuccess() {
      return this.success;
    }

    public topicSelectQueryNoCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.Topic> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.Topic>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicSelectQueryNoCache_result)
        return this.equals((topicSelectQueryNoCache_result)that);
      return false;
    }

    public boolean equals(topicSelectQueryNoCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicSelectQueryNoCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicSelectQueryNoCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicSelectQueryNoCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryNoCache_resultStandardScheme getScheme() {
        return new topicSelectQueryNoCache_resultStandardScheme();
      }
    }

    private static class topicSelectQueryNoCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicSelectQueryNoCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list288 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list288.size);
                  com.wenshao.dal.thriftgen.Topic _elem289;
                  for (int _i290 = 0; _i290 < _list288.size; ++_i290)
                  {
                    _elem289 = new com.wenshao.dal.thriftgen.Topic();
                    _elem289.read(iprot);
                    struct.success.add(_elem289);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.Topic _iter291 : struct.success)
            {
              _iter291.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicSelectQueryNoCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicSelectQueryNoCache_resultTupleScheme getScheme() {
        return new topicSelectQueryNoCache_resultTupleScheme();
      }
    }

    private static class topicSelectQueryNoCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicSelectQueryNoCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.Topic _iter292 : struct.success)
            {
              _iter292.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list293 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.Topic>(_list293.size);
            com.wenshao.dal.thriftgen.Topic _elem294;
            for (int _i295 = 0; _i295 < _list293.size; ++_i295)
            {
              _elem294 = new com.wenshao.dal.thriftgen.Topic();
              _elem294.read(iprot);
              struct.success.add(_elem294);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicCountSelectQuery_args implements org.apache.thrift.TBase<topicCountSelectQuery_args, topicCountSelectQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicCountSelectQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicCountSelectQuery_args");

    private static final org.apache.thrift.protocol.TField TOPIC_FIELD_DESC = new org.apache.thrift.protocol.TField("topic", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicCountSelectQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicCountSelectQuery_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.Topic topic; // required
    public com.wenshao.dal.thriftgen.Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC((short)1, "topic"),
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC
            return TOPIC;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC, new org.apache.thrift.meta_data.FieldMetaData("topic", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Topic.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicCountSelectQuery_args.class, metaDataMap);
    }

    public topicCountSelectQuery_args() {
    }

    public topicCountSelectQuery_args(
      com.wenshao.dal.thriftgen.Topic topic,
      com.wenshao.dal.thriftgen.Query query)
    {
      this();
      this.topic = topic;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicCountSelectQuery_args(topicCountSelectQuery_args other) {
      if (other.isSetTopic()) {
        this.topic = new com.wenshao.dal.thriftgen.Topic(other.topic);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
    }

    public topicCountSelectQuery_args deepCopy() {
      return new topicCountSelectQuery_args(this);
    }

    @Override
    public void clear() {
      this.topic = null;
      this.query = null;
    }

    public com.wenshao.dal.thriftgen.Topic getTopic() {
      return this.topic;
    }

    public topicCountSelectQuery_args setTopic(com.wenshao.dal.thriftgen.Topic topic) {
      this.topic = topic;
      return this;
    }

    public void unsetTopic() {
      this.topic = null;
    }

    /** Returns true if field topic is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic() {
      return this.topic != null;
    }

    public void setTopicIsSet(boolean value) {
      if (!value) {
        this.topic = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicCountSelectQuery_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC:
        if (value == null) {
          unsetTopic();
        } else {
          setTopic((com.wenshao.dal.thriftgen.Topic)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC:
        return getTopic();

      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC:
        return isSetTopic();
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicCountSelectQuery_args)
        return this.equals((topicCountSelectQuery_args)that);
      return false;
    }

    public boolean equals(topicCountSelectQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topic = true && this.isSetTopic();
      boolean that_present_topic = true && that.isSetTopic();
      if (this_present_topic || that_present_topic) {
        if (!(this_present_topic && that_present_topic))
          return false;
        if (!this.topic.equals(that.topic))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopic()) ? 131071 : 524287);
      if (isSetTopic())
        hashCode = hashCode * 8191 + topic.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicCountSelectQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopic()).compareTo(other.isSetTopic());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic, other.topic);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicCountSelectQuery_args(");
      boolean first = true;

      sb.append("topic:");
      if (this.topic == null) {
        sb.append("null");
      } else {
        sb.append(this.topic);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topic != null) {
        topic.validate();
      }
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicCountSelectQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCountSelectQuery_argsStandardScheme getScheme() {
        return new topicCountSelectQuery_argsStandardScheme();
      }
    }

    private static class topicCountSelectQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicCountSelectQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicCountSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topic = new com.wenshao.dal.thriftgen.Topic();
                struct.topic.read(iprot);
                struct.setTopicIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicCountSelectQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topic != null) {
          oprot.writeFieldBegin(TOPIC_FIELD_DESC);
          struct.topic.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicCountSelectQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCountSelectQuery_argsTupleScheme getScheme() {
        return new topicCountSelectQuery_argsTupleScheme();
      }
    }

    private static class topicCountSelectQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicCountSelectQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicCountSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopic()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopic()) {
          struct.topic.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicCountSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topic = new com.wenshao.dal.thriftgen.Topic();
          struct.topic.read(iprot);
          struct.setTopicIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicCountSelectQuery_result implements org.apache.thrift.TBase<topicCountSelectQuery_result, topicCountSelectQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicCountSelectQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicCountSelectQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicCountSelectQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicCountSelectQuery_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicCountSelectQuery_result.class, metaDataMap);
    }

    public topicCountSelectQuery_result() {
    }

    public topicCountSelectQuery_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicCountSelectQuery_result(topicCountSelectQuery_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicCountSelectQuery_result deepCopy() {
      return new topicCountSelectQuery_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicCountSelectQuery_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicCountSelectQuery_result)
        return this.equals((topicCountSelectQuery_result)that);
      return false;
    }

    public boolean equals(topicCountSelectQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicCountSelectQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicCountSelectQuery_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicCountSelectQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCountSelectQuery_resultStandardScheme getScheme() {
        return new topicCountSelectQuery_resultStandardScheme();
      }
    }

    private static class topicCountSelectQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicCountSelectQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicCountSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicCountSelectQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicCountSelectQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicCountSelectQuery_resultTupleScheme getScheme() {
        return new topicCountSelectQuery_resultTupleScheme();
      }
    }

    private static class topicCountSelectQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicCountSelectQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicCountSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicCountSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankInsert_args implements org.apache.thrift.TBase<topicBankInsert_args, topicBankInsert_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankInsert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankInsert_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankInsert_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankInsert_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankInsert_args.class, metaDataMap);
    }

    public topicBankInsert_args() {
    }

    public topicBankInsert_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankInsert_args(topicBankInsert_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankInsert_args deepCopy() {
      return new topicBankInsert_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankInsert_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankInsert_args)
        return this.equals((topicBankInsert_args)that);
      return false;
    }

    public boolean equals(topicBankInsert_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankInsert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankInsert_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankInsert_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_argsStandardScheme getScheme() {
        return new topicBankInsert_argsStandardScheme();
      }
    }

    private static class topicBankInsert_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankInsert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankInsert_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_argsTupleScheme getScheme() {
        return new topicBankInsert_argsTupleScheme();
      }
    }

    private static class topicBankInsert_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankInsert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankInsert_result implements org.apache.thrift.TBase<topicBankInsert_result, topicBankInsert_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankInsert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankInsert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankInsert_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankInsert_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankInsert_result.class, metaDataMap);
    }

    public topicBankInsert_result() {
    }

    public topicBankInsert_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankInsert_result(topicBankInsert_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankInsert_result deepCopy() {
      return new topicBankInsert_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankInsert_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankInsert_result)
        return this.equals((topicBankInsert_result)that);
      return false;
    }

    public boolean equals(topicBankInsert_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankInsert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankInsert_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankInsert_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_resultStandardScheme getScheme() {
        return new topicBankInsert_resultStandardScheme();
      }
    }

    private static class topicBankInsert_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankInsert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankInsert_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankInsert_resultTupleScheme getScheme() {
        return new topicBankInsert_resultTupleScheme();
      }
    }

    private static class topicBankInsert_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankInsert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankInsert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankUpdate_args implements org.apache.thrift.TBase<topicBankUpdate_args, topicBankUpdate_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankUpdate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankUpdate_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankUpdate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankUpdate_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankUpdate_args.class, metaDataMap);
    }

    public topicBankUpdate_args() {
    }

    public topicBankUpdate_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankUpdate_args(topicBankUpdate_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankUpdate_args deepCopy() {
      return new topicBankUpdate_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankUpdate_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankUpdate_args)
        return this.equals((topicBankUpdate_args)that);
      return false;
    }

    public boolean equals(topicBankUpdate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankUpdate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankUpdate_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankUpdate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_argsStandardScheme getScheme() {
        return new topicBankUpdate_argsStandardScheme();
      }
    }

    private static class topicBankUpdate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankUpdate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankUpdate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_argsTupleScheme getScheme() {
        return new topicBankUpdate_argsTupleScheme();
      }
    }

    private static class topicBankUpdate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankUpdate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankUpdate_result implements org.apache.thrift.TBase<topicBankUpdate_result, topicBankUpdate_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankUpdate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankUpdate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankUpdate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankUpdate_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankUpdate_result.class, metaDataMap);
    }

    public topicBankUpdate_result() {
    }

    public topicBankUpdate_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankUpdate_result(topicBankUpdate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankUpdate_result deepCopy() {
      return new topicBankUpdate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankUpdate_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankUpdate_result)
        return this.equals((topicBankUpdate_result)that);
      return false;
    }

    public boolean equals(topicBankUpdate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankUpdate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankUpdate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankUpdate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_resultStandardScheme getScheme() {
        return new topicBankUpdate_resultStandardScheme();
      }
    }

    private static class topicBankUpdate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankUpdate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankUpdate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankUpdate_resultTupleScheme getScheme() {
        return new topicBankUpdate_resultTupleScheme();
      }
    }

    private static class topicBankUpdate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankUpdate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankUpdate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankRemove_args implements org.apache.thrift.TBase<topicBankRemove_args, topicBankRemove_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankRemove_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankRemove_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankRemove_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankRemove_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankRemove_args.class, metaDataMap);
    }

    public topicBankRemove_args() {
    }

    public topicBankRemove_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankRemove_args(topicBankRemove_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankRemove_args deepCopy() {
      return new topicBankRemove_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankRemove_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankRemove_args)
        return this.equals((topicBankRemove_args)that);
      return false;
    }

    public boolean equals(topicBankRemove_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankRemove_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankRemove_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankRemove_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_argsStandardScheme getScheme() {
        return new topicBankRemove_argsStandardScheme();
      }
    }

    private static class topicBankRemove_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankRemove_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankRemove_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_argsTupleScheme getScheme() {
        return new topicBankRemove_argsTupleScheme();
      }
    }

    private static class topicBankRemove_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankRemove_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankRemove_result implements org.apache.thrift.TBase<topicBankRemove_result, topicBankRemove_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankRemove_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankRemove_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankRemove_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankRemove_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankRemove_result.class, metaDataMap);
    }

    public topicBankRemove_result() {
    }

    public topicBankRemove_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankRemove_result(topicBankRemove_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankRemove_result deepCopy() {
      return new topicBankRemove_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankRemove_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankRemove_result)
        return this.equals((topicBankRemove_result)that);
      return false;
    }

    public boolean equals(topicBankRemove_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankRemove_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankRemove_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankRemove_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_resultStandardScheme getScheme() {
        return new topicBankRemove_resultStandardScheme();
      }
    }

    private static class topicBankRemove_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankRemove_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankRemove_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemove_resultTupleScheme getScheme() {
        return new topicBankRemove_resultTupleScheme();
      }
    }

    private static class topicBankRemove_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankRemove_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankRemove_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankFindById_args implements org.apache.thrift.TBase<topicBankFindById_args, topicBankFindById_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankFindById_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankFindById_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankFindById_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankFindById_argsTupleSchemeFactory();

    public int id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankFindById_args.class, metaDataMap);
    }

    public topicBankFindById_args() {
    }

    public topicBankFindById_args(
      int id)
    {
      this();
      this.id = id;
      setIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankFindById_args(topicBankFindById_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.id = other.id;
    }

    public topicBankFindById_args deepCopy() {
      return new topicBankFindById_args(this);
    }

    @Override
    public void clear() {
      setIdIsSet(false);
      this.id = 0;
    }

    public int getId() {
      return this.id;
    }

    public topicBankFindById_args setId(int id) {
      this.id = id;
      setIdIsSet(true);
      return this;
    }

    public void unsetId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
    }

    public void setIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankFindById_args)
        return this.equals((topicBankFindById_args)that);
      return false;
    }

    public boolean equals(topicBankFindById_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_id = true;
      boolean that_present_id = true;
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (this.id != that.id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + id;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankFindById_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankFindById_args(");
      boolean first = true;

      sb.append("id:");
      sb.append(this.id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankFindById_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankFindById_argsStandardScheme getScheme() {
        return new topicBankFindById_argsStandardScheme();
      }
    }

    private static class topicBankFindById_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankFindById_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.id = iprot.readI32();
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankFindById_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeI32(struct.id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankFindById_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankFindById_argsTupleScheme getScheme() {
        return new topicBankFindById_argsTupleScheme();
      }
    }

    private static class topicBankFindById_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankFindById_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetId()) {
          oprot.writeI32(struct.id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankFindById_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.id = iprot.readI32();
          struct.setIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankFindById_result implements org.apache.thrift.TBase<topicBankFindById_result, topicBankFindById_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankFindById_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankFindById_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankFindById_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankFindById_resultTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankFindById_result.class, metaDataMap);
    }

    public topicBankFindById_result() {
    }

    public topicBankFindById_result(
      com.wenshao.dal.thriftgen.TopicBank success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankFindById_result(topicBankFindById_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.wenshao.dal.thriftgen.TopicBank(other.success);
      }
    }

    public topicBankFindById_result deepCopy() {
      return new topicBankFindById_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getSuccess() {
      return this.success;
    }

    public topicBankFindById_result setSuccess(com.wenshao.dal.thriftgen.TopicBank success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankFindById_result)
        return this.equals((topicBankFindById_result)that);
      return false;
    }

    public boolean equals(topicBankFindById_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankFindById_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankFindById_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankFindById_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankFindById_resultStandardScheme getScheme() {
        return new topicBankFindById_resultStandardScheme();
      }
    }

    private static class topicBankFindById_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankFindById_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.wenshao.dal.thriftgen.TopicBank();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankFindById_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankFindById_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankFindById_resultTupleScheme getScheme() {
        return new topicBankFindById_resultTupleScheme();
      }
    }

    private static class topicBankFindById_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankFindById_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankFindById_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new com.wenshao.dal.thriftgen.TopicBank();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelect_args implements org.apache.thrift.TBase<topicBankSelect_args, topicBankSelect_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelect_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelect_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelect_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelect_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelect_args.class, metaDataMap);
    }

    public topicBankSelect_args() {
    }

    public topicBankSelect_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank)
    {
      this();
      this.topicBank = topicBank;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelect_args(topicBankSelect_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
    }

    public topicBankSelect_args deepCopy() {
      return new topicBankSelect_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankSelect_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelect_args)
        return this.equals((topicBankSelect_args)that);
      return false;
    }

    public boolean equals(topicBankSelect_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelect_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelect_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelect_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_argsStandardScheme getScheme() {
        return new topicBankSelect_argsStandardScheme();
      }
    }

    private static class topicBankSelect_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelect_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelect_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_argsTupleScheme getScheme() {
        return new topicBankSelect_argsTupleScheme();
      }
    }

    private static class topicBankSelect_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelect_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelect_result implements org.apache.thrift.TBase<topicBankSelect_result, topicBankSelect_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelect_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelect_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelect_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelect_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelect_result.class, metaDataMap);
    }

    public topicBankSelect_result() {
    }

    public topicBankSelect_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelect_result(topicBankSelect_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicBankSelect_result deepCopy() {
      return new topicBankSelect_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelect_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelect_result)
        return this.equals((topicBankSelect_result)that);
      return false;
    }

    public boolean equals(topicBankSelect_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelect_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelect_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelect_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_resultStandardScheme getScheme() {
        return new topicBankSelect_resultStandardScheme();
      }
    }

    private static class topicBankSelect_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelect_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list296 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list296.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem297;
                  for (int _i298 = 0; _i298 < _list296.size; ++_i298)
                  {
                    _elem297 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem297.read(iprot);
                    struct.success.add(_elem297);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter299 : struct.success)
            {
              _iter299.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelect_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelect_resultTupleScheme getScheme() {
        return new topicBankSelect_resultTupleScheme();
      }
    }

    private static class topicBankSelect_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelect_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter300 : struct.success)
            {
              _iter300.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelect_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list301 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list301.size);
            com.wenshao.dal.thriftgen.TopicBank _elem302;
            for (int _i303 = 0; _i303 < _list301.size; ++_i303)
            {
              _elem302 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem302.read(iprot);
              struct.success.add(_elem302);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQuery_args implements org.apache.thrift.TBase<topicBankSelectQuery_args, topicBankSelectQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQuery_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQuery_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required
    public com.wenshao.dal.thriftgen.Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank"),
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQuery_args.class, metaDataMap);
    }

    public topicBankSelectQuery_args() {
    }

    public topicBankSelectQuery_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank,
      com.wenshao.dal.thriftgen.Query query)
    {
      this();
      this.topicBank = topicBank;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQuery_args(topicBankSelectQuery_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
    }

    public topicBankSelectQuery_args deepCopy() {
      return new topicBankSelectQuery_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
      this.query = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankSelectQuery_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicBankSelectQuery_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQuery_args)
        return this.equals((topicBankSelectQuery_args)that);
      return false;
    }

    public boolean equals(topicBankSelectQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQuery_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQuery_argsStandardScheme getScheme() {
        return new topicBankSelectQuery_argsStandardScheme();
      }
    }

    private static class topicBankSelectQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQuery_argsTupleScheme getScheme() {
        return new topicBankSelectQuery_argsTupleScheme();
      }
    }

    private static class topicBankSelectQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQuery_result implements org.apache.thrift.TBase<topicBankSelectQuery_result, topicBankSelectQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQuery_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQuery_result.class, metaDataMap);
    }

    public topicBankSelectQuery_result() {
    }

    public topicBankSelectQuery_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQuery_result(topicBankSelectQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicBankSelectQuery_result deepCopy() {
      return new topicBankSelectQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelectQuery_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQuery_result)
        return this.equals((topicBankSelectQuery_result)that);
      return false;
    }

    public boolean equals(topicBankSelectQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQuery_resultStandardScheme getScheme() {
        return new topicBankSelectQuery_resultStandardScheme();
      }
    }

    private static class topicBankSelectQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list304 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list304.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem305;
                  for (int _i306 = 0; _i306 < _list304.size; ++_i306)
                  {
                    _elem305 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem305.read(iprot);
                    struct.success.add(_elem305);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter307 : struct.success)
            {
              _iter307.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQuery_resultTupleScheme getScheme() {
        return new topicBankSelectQuery_resultTupleScheme();
      }
    }

    private static class topicBankSelectQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter308 : struct.success)
            {
              _iter308.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list309 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list309.size);
            com.wenshao.dal.thriftgen.TopicBank _elem310;
            for (int _i311 = 0; _i311 < _list309.size; ++_i311)
            {
              _elem310 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem310.read(iprot);
              struct.success.add(_elem310);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectCustom_args implements org.apache.thrift.TBase<topicBankSelectCustom_args, topicBankSelectCustom_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectCustom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectCustom_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectCustom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectCustom_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required
    public com.wenshao.dal.thriftgen.Custom custom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank"),
      CUSTOM((short)2, "custom");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          case 2: // CUSTOM
            return CUSTOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Custom.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectCustom_args.class, metaDataMap);
    }

    public topicBankSelectCustom_args() {
    }

    public topicBankSelectCustom_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank,
      com.wenshao.dal.thriftgen.Custom custom)
    {
      this();
      this.topicBank = topicBank;
      this.custom = custom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectCustom_args(topicBankSelectCustom_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
      if (other.isSetCustom()) {
        this.custom = new com.wenshao.dal.thriftgen.Custom(other.custom);
      }
    }

    public topicBankSelectCustom_args deepCopy() {
      return new topicBankSelectCustom_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
      this.custom = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankSelectCustom_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public com.wenshao.dal.thriftgen.Custom getCustom() {
      return this.custom;
    }

    public topicBankSelectCustom_args setCustom(com.wenshao.dal.thriftgen.Custom custom) {
      this.custom = custom;
      return this;
    }

    public void unsetCustom() {
      this.custom = null;
    }

    /** Returns true if field custom is set (has been assigned a value) and false otherwise */
    public boolean isSetCustom() {
      return this.custom != null;
    }

    public void setCustomIsSet(boolean value) {
      if (!value) {
        this.custom = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      case CUSTOM:
        if (value == null) {
          unsetCustom();
        } else {
          setCustom((com.wenshao.dal.thriftgen.Custom)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      case CUSTOM:
        return getCustom();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      case CUSTOM:
        return isSetCustom();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectCustom_args)
        return this.equals((topicBankSelectCustom_args)that);
      return false;
    }

    public boolean equals(topicBankSelectCustom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      boolean this_present_custom = true && this.isSetCustom();
      boolean that_present_custom = true && that.isSetCustom();
      if (this_present_custom || that_present_custom) {
        if (!(this_present_custom && that_present_custom))
          return false;
        if (!this.custom.equals(that.custom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      hashCode = hashCode * 8191 + ((isSetCustom()) ? 131071 : 524287);
      if (isSetCustom())
        hashCode = hashCode * 8191 + custom.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectCustom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectCustom_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
      if (custom != null) {
        custom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectCustom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectCustom_argsStandardScheme getScheme() {
        return new topicBankSelectCustom_argsStandardScheme();
      }
    }

    private static class topicBankSelectCustom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectCustom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CUSTOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.custom = new com.wenshao.dal.thriftgen.Custom();
                struct.custom.read(iprot);
                struct.setCustomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectCustom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.custom != null) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          struct.custom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectCustom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectCustom_argsTupleScheme getScheme() {
        return new topicBankSelectCustom_argsTupleScheme();
      }
    }

    private static class topicBankSelectCustom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectCustom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        if (struct.isSetCustom()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
        if (struct.isSetCustom()) {
          struct.custom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.custom = new com.wenshao.dal.thriftgen.Custom();
          struct.custom.read(iprot);
          struct.setCustomIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectCustom_result implements org.apache.thrift.TBase<topicBankSelectCustom_result, topicBankSelectCustom_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectCustom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectCustom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectCustom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectCustom_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectCustom_result.class, metaDataMap);
    }

    public topicBankSelectCustom_result() {
    }

    public topicBankSelectCustom_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectCustom_result(topicBankSelectCustom_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicBankSelectCustom_result deepCopy() {
      return new topicBankSelectCustom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelectCustom_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectCustom_result)
        return this.equals((topicBankSelectCustom_result)that);
      return false;
    }

    public boolean equals(topicBankSelectCustom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectCustom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectCustom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectCustom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectCustom_resultStandardScheme getScheme() {
        return new topicBankSelectCustom_resultStandardScheme();
      }
    }

    private static class topicBankSelectCustom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectCustom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list312 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list312.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem313;
                  for (int _i314 = 0; _i314 < _list312.size; ++_i314)
                  {
                    _elem313 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem313.read(iprot);
                    struct.success.add(_elem313);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectCustom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter315 : struct.success)
            {
              _iter315.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectCustom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectCustom_resultTupleScheme getScheme() {
        return new topicBankSelectCustom_resultTupleScheme();
      }
    }

    private static class topicBankSelectCustom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectCustom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter316 : struct.success)
            {
              _iter316.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list317 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list317.size);
            com.wenshao.dal.thriftgen.TopicBank _elem318;
            for (int _i319 = 0; _i319 < _list317.size; ++_i319)
            {
              _elem318 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem318.read(iprot);
              struct.success.add(_elem318);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQueryCustom_args implements org.apache.thrift.TBase<topicBankSelectQueryCustom_args, topicBankSelectQueryCustom_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQueryCustom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQueryCustom_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQueryCustom_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQueryCustom_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required
    public com.wenshao.dal.thriftgen.Query query; // required
    public com.wenshao.dal.thriftgen.Custom custom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank"),
      QUERY((short)2, "query"),
      CUSTOM((short)3, "custom");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          case 2: // QUERY
            return QUERY;
          case 3: // CUSTOM
            return CUSTOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Custom.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQueryCustom_args.class, metaDataMap);
    }

    public topicBankSelectQueryCustom_args() {
    }

    public topicBankSelectQueryCustom_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank,
      com.wenshao.dal.thriftgen.Query query,
      com.wenshao.dal.thriftgen.Custom custom)
    {
      this();
      this.topicBank = topicBank;
      this.query = query;
      this.custom = custom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQueryCustom_args(topicBankSelectQueryCustom_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
      if (other.isSetCustom()) {
        this.custom = new com.wenshao.dal.thriftgen.Custom(other.custom);
      }
    }

    public topicBankSelectQueryCustom_args deepCopy() {
      return new topicBankSelectQueryCustom_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
      this.query = null;
      this.custom = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankSelectQueryCustom_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicBankSelectQueryCustom_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.wenshao.dal.thriftgen.Custom getCustom() {
      return this.custom;
    }

    public topicBankSelectQueryCustom_args setCustom(com.wenshao.dal.thriftgen.Custom custom) {
      this.custom = custom;
      return this;
    }

    public void unsetCustom() {
      this.custom = null;
    }

    /** Returns true if field custom is set (has been assigned a value) and false otherwise */
    public boolean isSetCustom() {
      return this.custom != null;
    }

    public void setCustomIsSet(boolean value) {
      if (!value) {
        this.custom = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      case CUSTOM:
        if (value == null) {
          unsetCustom();
        } else {
          setCustom((com.wenshao.dal.thriftgen.Custom)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      case QUERY:
        return getQuery();

      case CUSTOM:
        return getCustom();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      case QUERY:
        return isSetQuery();
      case CUSTOM:
        return isSetCustom();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQueryCustom_args)
        return this.equals((topicBankSelectQueryCustom_args)that);
      return false;
    }

    public boolean equals(topicBankSelectQueryCustom_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_custom = true && this.isSetCustom();
      boolean that_present_custom = true && that.isSetCustom();
      if (this_present_custom || that_present_custom) {
        if (!(this_present_custom && that_present_custom))
          return false;
        if (!this.custom.equals(that.custom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCustom()) ? 131071 : 524287);
      if (isSetCustom())
        hashCode = hashCode * 8191 + custom.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQueryCustom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQueryCustom_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
      if (query != null) {
        query.validate();
      }
      if (custom != null) {
        custom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQueryCustom_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustom_argsStandardScheme getScheme() {
        return new topicBankSelectQueryCustom_argsStandardScheme();
      }
    }

    private static class topicBankSelectQueryCustom_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQueryCustom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CUSTOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.custom = new com.wenshao.dal.thriftgen.Custom();
                struct.custom.read(iprot);
                struct.setCustomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.custom != null) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          struct.custom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQueryCustom_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustom_argsTupleScheme getScheme() {
        return new topicBankSelectQueryCustom_argsTupleScheme();
      }
    }

    private static class topicBankSelectQueryCustom_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQueryCustom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        if (struct.isSetCustom()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetCustom()) {
          struct.custom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.custom = new com.wenshao.dal.thriftgen.Custom();
          struct.custom.read(iprot);
          struct.setCustomIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQueryCustom_result implements org.apache.thrift.TBase<topicBankSelectQueryCustom_result, topicBankSelectQueryCustom_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQueryCustom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQueryCustom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQueryCustom_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQueryCustom_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQueryCustom_result.class, metaDataMap);
    }

    public topicBankSelectQueryCustom_result() {
    }

    public topicBankSelectQueryCustom_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQueryCustom_result(topicBankSelectQueryCustom_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicBankSelectQueryCustom_result deepCopy() {
      return new topicBankSelectQueryCustom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelectQueryCustom_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQueryCustom_result)
        return this.equals((topicBankSelectQueryCustom_result)that);
      return false;
    }

    public boolean equals(topicBankSelectQueryCustom_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQueryCustom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQueryCustom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQueryCustom_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustom_resultStandardScheme getScheme() {
        return new topicBankSelectQueryCustom_resultStandardScheme();
      }
    }

    private static class topicBankSelectQueryCustom_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQueryCustom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list320 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list320.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem321;
                  for (int _i322 = 0; _i322 < _list320.size; ++_i322)
                  {
                    _elem321 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem321.read(iprot);
                    struct.success.add(_elem321);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter323 : struct.success)
            {
              _iter323.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQueryCustom_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustom_resultTupleScheme getScheme() {
        return new topicBankSelectQueryCustom_resultTupleScheme();
      }
    }

    private static class topicBankSelectQueryCustom_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQueryCustom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter324 : struct.success)
            {
              _iter324.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list325 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list325.size);
            com.wenshao.dal.thriftgen.TopicBank _elem326;
            for (int _i327 = 0; _i327 < _list325.size; ++_i327)
            {
              _elem326 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem326.read(iprot);
              struct.success.add(_elem326);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQueryCustomNotCache_args implements org.apache.thrift.TBase<topicBankSelectQueryCustomNotCache_args, topicBankSelectQueryCustomNotCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQueryCustomNotCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQueryCustomNotCache_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField CUSTOM_FIELD_DESC = new org.apache.thrift.protocol.TField("custom", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQueryCustomNotCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQueryCustomNotCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required
    public com.wenshao.dal.thriftgen.Query query; // required
    public com.wenshao.dal.thriftgen.Custom custom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank"),
      QUERY((short)2, "query"),
      CUSTOM((short)3, "custom");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          case 2: // QUERY
            return QUERY;
          case 3: // CUSTOM
            return CUSTOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      tmpMap.put(_Fields.CUSTOM, new org.apache.thrift.meta_data.FieldMetaData("custom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Custom.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQueryCustomNotCache_args.class, metaDataMap);
    }

    public topicBankSelectQueryCustomNotCache_args() {
    }

    public topicBankSelectQueryCustomNotCache_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank,
      com.wenshao.dal.thriftgen.Query query,
      com.wenshao.dal.thriftgen.Custom custom)
    {
      this();
      this.topicBank = topicBank;
      this.query = query;
      this.custom = custom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQueryCustomNotCache_args(topicBankSelectQueryCustomNotCache_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
      if (other.isSetCustom()) {
        this.custom = new com.wenshao.dal.thriftgen.Custom(other.custom);
      }
    }

    public topicBankSelectQueryCustomNotCache_args deepCopy() {
      return new topicBankSelectQueryCustomNotCache_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
      this.query = null;
      this.custom = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankSelectQueryCustomNotCache_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicBankSelectQueryCustomNotCache_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public com.wenshao.dal.thriftgen.Custom getCustom() {
      return this.custom;
    }

    public topicBankSelectQueryCustomNotCache_args setCustom(com.wenshao.dal.thriftgen.Custom custom) {
      this.custom = custom;
      return this;
    }

    public void unsetCustom() {
      this.custom = null;
    }

    /** Returns true if field custom is set (has been assigned a value) and false otherwise */
    public boolean isSetCustom() {
      return this.custom != null;
    }

    public void setCustomIsSet(boolean value) {
      if (!value) {
        this.custom = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      case CUSTOM:
        if (value == null) {
          unsetCustom();
        } else {
          setCustom((com.wenshao.dal.thriftgen.Custom)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      case QUERY:
        return getQuery();

      case CUSTOM:
        return getCustom();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      case QUERY:
        return isSetQuery();
      case CUSTOM:
        return isSetCustom();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQueryCustomNotCache_args)
        return this.equals((topicBankSelectQueryCustomNotCache_args)that);
      return false;
    }

    public boolean equals(topicBankSelectQueryCustomNotCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      boolean this_present_custom = true && this.isSetCustom();
      boolean that_present_custom = true && that.isSetCustom();
      if (this_present_custom || that_present_custom) {
        if (!(this_present_custom && that_present_custom))
          return false;
        if (!this.custom.equals(that.custom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      hashCode = hashCode * 8191 + ((isSetCustom()) ? 131071 : 524287);
      if (isSetCustom())
        hashCode = hashCode * 8191 + custom.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQueryCustomNotCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCustom()).compareTo(other.isSetCustom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCustom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.custom, other.custom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQueryCustomNotCache_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("custom:");
      if (this.custom == null) {
        sb.append("null");
      } else {
        sb.append(this.custom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
      if (query != null) {
        query.validate();
      }
      if (custom != null) {
        custom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQueryCustomNotCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustomNotCache_argsStandardScheme getScheme() {
        return new topicBankSelectQueryCustomNotCache_argsStandardScheme();
      }
    }

    private static class topicBankSelectQueryCustomNotCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQueryCustomNotCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CUSTOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.custom = new com.wenshao.dal.thriftgen.Custom();
                struct.custom.read(iprot);
                struct.setCustomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.custom != null) {
          oprot.writeFieldBegin(CUSTOM_FIELD_DESC);
          struct.custom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQueryCustomNotCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustomNotCache_argsTupleScheme getScheme() {
        return new topicBankSelectQueryCustomNotCache_argsTupleScheme();
      }
    }

    private static class topicBankSelectQueryCustomNotCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQueryCustomNotCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        if (struct.isSetCustom()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
        if (struct.isSetCustom()) {
          struct.custom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustomNotCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
        if (incoming.get(2)) {
          struct.custom = new com.wenshao.dal.thriftgen.Custom();
          struct.custom.read(iprot);
          struct.setCustomIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQueryCustomNotCache_result implements org.apache.thrift.TBase<topicBankSelectQueryCustomNotCache_result, topicBankSelectQueryCustomNotCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQueryCustomNotCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQueryCustomNotCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQueryCustomNotCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQueryCustomNotCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQueryCustomNotCache_result.class, metaDataMap);
    }

    public topicBankSelectQueryCustomNotCache_result() {
    }

    public topicBankSelectQueryCustomNotCache_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQueryCustomNotCache_result(topicBankSelectQueryCustomNotCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicBankSelectQueryCustomNotCache_result deepCopy() {
      return new topicBankSelectQueryCustomNotCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelectQueryCustomNotCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQueryCustomNotCache_result)
        return this.equals((topicBankSelectQueryCustomNotCache_result)that);
      return false;
    }

    public boolean equals(topicBankSelectQueryCustomNotCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQueryCustomNotCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQueryCustomNotCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQueryCustomNotCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustomNotCache_resultStandardScheme getScheme() {
        return new topicBankSelectQueryCustomNotCache_resultStandardScheme();
      }
    }

    private static class topicBankSelectQueryCustomNotCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQueryCustomNotCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list328 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list328.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem329;
                  for (int _i330 = 0; _i330 < _list328.size; ++_i330)
                  {
                    _elem329 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem329.read(iprot);
                    struct.success.add(_elem329);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter331 : struct.success)
            {
              _iter331.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQueryCustomNotCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryCustomNotCache_resultTupleScheme getScheme() {
        return new topicBankSelectQueryCustomNotCache_resultTupleScheme();
      }
    }

    private static class topicBankSelectQueryCustomNotCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQueryCustomNotCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter332 : struct.success)
            {
              _iter332.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryCustomNotCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list333 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list333.size);
            com.wenshao.dal.thriftgen.TopicBank _elem334;
            for (int _i335 = 0; _i335 < _list333.size; ++_i335)
            {
              _elem334 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem334.read(iprot);
              struct.success.add(_elem334);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQueryNoCache_args implements org.apache.thrift.TBase<topicBankSelectQueryNoCache_args, topicBankSelectQueryNoCache_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQueryNoCache_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQueryNoCache_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQueryNoCache_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQueryNoCache_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required
    public com.wenshao.dal.thriftgen.Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank"),
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQueryNoCache_args.class, metaDataMap);
    }

    public topicBankSelectQueryNoCache_args() {
    }

    public topicBankSelectQueryNoCache_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank,
      com.wenshao.dal.thriftgen.Query query)
    {
      this();
      this.topicBank = topicBank;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQueryNoCache_args(topicBankSelectQueryNoCache_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
    }

    public topicBankSelectQueryNoCache_args deepCopy() {
      return new topicBankSelectQueryNoCache_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
      this.query = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankSelectQueryNoCache_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicBankSelectQueryNoCache_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQueryNoCache_args)
        return this.equals((topicBankSelectQueryNoCache_args)that);
      return false;
    }

    public boolean equals(topicBankSelectQueryNoCache_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQueryNoCache_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQueryNoCache_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQueryNoCache_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryNoCache_argsStandardScheme getScheme() {
        return new topicBankSelectQueryNoCache_argsStandardScheme();
      }
    }

    private static class topicBankSelectQueryNoCache_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQueryNoCache_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQueryNoCache_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryNoCache_argsTupleScheme getScheme() {
        return new topicBankSelectQueryNoCache_argsTupleScheme();
      }
    }

    private static class topicBankSelectQueryNoCache_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQueryNoCache_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryNoCache_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankSelectQueryNoCache_result implements org.apache.thrift.TBase<topicBankSelectQueryNoCache_result, topicBankSelectQueryNoCache_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankSelectQueryNoCache_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankSelectQueryNoCache_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankSelectQueryNoCache_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankSelectQueryNoCache_resultTupleSchemeFactory();

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankSelectQueryNoCache_result.class, metaDataMap);
    }

    public topicBankSelectQueryNoCache_result() {
    }

    public topicBankSelectQueryNoCache_result(
      java.util.List<com.wenshao.dal.thriftgen.TopicBank> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankSelectQueryNoCache_result(topicBankSelectQueryNoCache_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.wenshao.dal.thriftgen.TopicBank> __this__success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(other.success.size());
        for (com.wenshao.dal.thriftgen.TopicBank other_element : other.success) {
          __this__success.add(new com.wenshao.dal.thriftgen.TopicBank(other_element));
        }
        this.success = __this__success;
      }
    }

    public topicBankSelectQueryNoCache_result deepCopy() {
      return new topicBankSelectQueryNoCache_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.wenshao.dal.thriftgen.TopicBank> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.wenshao.dal.thriftgen.TopicBank elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.wenshao.dal.thriftgen.TopicBank> getSuccess() {
      return this.success;
    }

    public topicBankSelectQueryNoCache_result setSuccess(java.util.List<com.wenshao.dal.thriftgen.TopicBank> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.wenshao.dal.thriftgen.TopicBank>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankSelectQueryNoCache_result)
        return this.equals((topicBankSelectQueryNoCache_result)that);
      return false;
    }

    public boolean equals(topicBankSelectQueryNoCache_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankSelectQueryNoCache_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankSelectQueryNoCache_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankSelectQueryNoCache_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryNoCache_resultStandardScheme getScheme() {
        return new topicBankSelectQueryNoCache_resultStandardScheme();
      }
    }

    private static class topicBankSelectQueryNoCache_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankSelectQueryNoCache_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list336 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list336.size);
                  com.wenshao.dal.thriftgen.TopicBank _elem337;
                  for (int _i338 = 0; _i338 < _list336.size; ++_i338)
                  {
                    _elem337 = new com.wenshao.dal.thriftgen.TopicBank();
                    _elem337.read(iprot);
                    struct.success.add(_elem337);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.wenshao.dal.thriftgen.TopicBank _iter339 : struct.success)
            {
              _iter339.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankSelectQueryNoCache_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankSelectQueryNoCache_resultTupleScheme getScheme() {
        return new topicBankSelectQueryNoCache_resultTupleScheme();
      }
    }

    private static class topicBankSelectQueryNoCache_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankSelectQueryNoCache_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.wenshao.dal.thriftgen.TopicBank _iter340 : struct.success)
            {
              _iter340.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankSelectQueryNoCache_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list341 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.wenshao.dal.thriftgen.TopicBank>(_list341.size);
            com.wenshao.dal.thriftgen.TopicBank _elem342;
            for (int _i343 = 0; _i343 < _list341.size; ++_i343)
            {
              _elem342 = new com.wenshao.dal.thriftgen.TopicBank();
              _elem342.read(iprot);
              struct.success.add(_elem342);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankCountSelectQuery_args implements org.apache.thrift.TBase<topicBankCountSelectQuery_args, topicBankCountSelectQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankCountSelectQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankCountSelectQuery_args");

    private static final org.apache.thrift.protocol.TField TOPIC_BANK_FIELD_DESC = new org.apache.thrift.protocol.TField("topicBank", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankCountSelectQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankCountSelectQuery_argsTupleSchemeFactory();

    public com.wenshao.dal.thriftgen.TopicBank topicBank; // required
    public com.wenshao.dal.thriftgen.Query query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TOPIC_BANK((short)1, "topicBank"),
      QUERY((short)2, "query");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TOPIC_BANK
            return TOPIC_BANK;
          case 2: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TOPIC_BANK, new org.apache.thrift.meta_data.FieldMetaData("topicBank", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.TopicBank.class)));
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.wenshao.dal.thriftgen.Query.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankCountSelectQuery_args.class, metaDataMap);
    }

    public topicBankCountSelectQuery_args() {
    }

    public topicBankCountSelectQuery_args(
      com.wenshao.dal.thriftgen.TopicBank topicBank,
      com.wenshao.dal.thriftgen.Query query)
    {
      this();
      this.topicBank = topicBank;
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankCountSelectQuery_args(topicBankCountSelectQuery_args other) {
      if (other.isSetTopicBank()) {
        this.topicBank = new com.wenshao.dal.thriftgen.TopicBank(other.topicBank);
      }
      if (other.isSetQuery()) {
        this.query = new com.wenshao.dal.thriftgen.Query(other.query);
      }
    }

    public topicBankCountSelectQuery_args deepCopy() {
      return new topicBankCountSelectQuery_args(this);
    }

    @Override
    public void clear() {
      this.topicBank = null;
      this.query = null;
    }

    public com.wenshao.dal.thriftgen.TopicBank getTopicBank() {
      return this.topicBank;
    }

    public topicBankCountSelectQuery_args setTopicBank(com.wenshao.dal.thriftgen.TopicBank topicBank) {
      this.topicBank = topicBank;
      return this;
    }

    public void unsetTopicBank() {
      this.topicBank = null;
    }

    /** Returns true if field topicBank is set (has been assigned a value) and false otherwise */
    public boolean isSetTopicBank() {
      return this.topicBank != null;
    }

    public void setTopicBankIsSet(boolean value) {
      if (!value) {
        this.topicBank = null;
      }
    }

    public com.wenshao.dal.thriftgen.Query getQuery() {
      return this.query;
    }

    public topicBankCountSelectQuery_args setQuery(com.wenshao.dal.thriftgen.Query query) {
      this.query = query;
      return this;
    }

    public void unsetQuery() {
      this.query = null;
    }

    /** Returns true if field query is set (has been assigned a value) and false otherwise */
    public boolean isSetQuery() {
      return this.query != null;
    }

    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TOPIC_BANK:
        if (value == null) {
          unsetTopicBank();
        } else {
          setTopicBank((com.wenshao.dal.thriftgen.TopicBank)value);
        }
        break;

      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((com.wenshao.dal.thriftgen.Query)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TOPIC_BANK:
        return getTopicBank();

      case QUERY:
        return getQuery();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TOPIC_BANK:
        return isSetTopicBank();
      case QUERY:
        return isSetQuery();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankCountSelectQuery_args)
        return this.equals((topicBankCountSelectQuery_args)that);
      return false;
    }

    public boolean equals(topicBankCountSelectQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_topicBank = true && this.isSetTopicBank();
      boolean that_present_topicBank = true && that.isSetTopicBank();
      if (this_present_topicBank || that_present_topicBank) {
        if (!(this_present_topicBank && that_present_topicBank))
          return false;
        if (!this.topicBank.equals(that.topicBank))
          return false;
      }

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTopicBank()) ? 131071 : 524287);
      if (isSetTopicBank())
        hashCode = hashCode * 8191 + topicBank.hashCode();

      hashCode = hashCode * 8191 + ((isSetQuery()) ? 131071 : 524287);
      if (isSetQuery())
        hashCode = hashCode * 8191 + query.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(topicBankCountSelectQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTopicBank()).compareTo(other.isSetTopicBank());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopicBank()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicBank, other.topicBank);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankCountSelectQuery_args(");
      boolean first = true;

      sb.append("topicBank:");
      if (this.topicBank == null) {
        sb.append("null");
      } else {
        sb.append(this.topicBank);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (topicBank != null) {
        topicBank.validate();
      }
      if (query != null) {
        query.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankCountSelectQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCountSelectQuery_argsStandardScheme getScheme() {
        return new topicBankCountSelectQuery_argsStandardScheme();
      }
    }

    private static class topicBankCountSelectQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankCountSelectQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankCountSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TOPIC_BANK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
                struct.topicBank.read(iprot);
                struct.setTopicBankIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new com.wenshao.dal.thriftgen.Query();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankCountSelectQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.topicBank != null) {
          oprot.writeFieldBegin(TOPIC_BANK_FIELD_DESC);
          struct.topicBank.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankCountSelectQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCountSelectQuery_argsTupleScheme getScheme() {
        return new topicBankCountSelectQuery_argsTupleScheme();
      }
    }

    private static class topicBankCountSelectQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankCountSelectQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankCountSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTopicBank()) {
          optionals.set(0);
        }
        if (struct.isSetQuery()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTopicBank()) {
          struct.topicBank.write(oprot);
        }
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankCountSelectQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.topicBank = new com.wenshao.dal.thriftgen.TopicBank();
          struct.topicBank.read(iprot);
          struct.setTopicBankIsSet(true);
        }
        if (incoming.get(1)) {
          struct.query = new com.wenshao.dal.thriftgen.Query();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankCountSelectQuery_result implements org.apache.thrift.TBase<topicBankCountSelectQuery_result, topicBankCountSelectQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankCountSelectQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankCountSelectQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankCountSelectQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankCountSelectQuery_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankCountSelectQuery_result.class, metaDataMap);
    }

    public topicBankCountSelectQuery_result() {
    }

    public topicBankCountSelectQuery_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankCountSelectQuery_result(topicBankCountSelectQuery_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankCountSelectQuery_result deepCopy() {
      return new topicBankCountSelectQuery_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankCountSelectQuery_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankCountSelectQuery_result)
        return this.equals((topicBankCountSelectQuery_result)that);
      return false;
    }

    public boolean equals(topicBankCountSelectQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankCountSelectQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankCountSelectQuery_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankCountSelectQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCountSelectQuery_resultStandardScheme getScheme() {
        return new topicBankCountSelectQuery_resultStandardScheme();
      }
    }

    private static class topicBankCountSelectQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankCountSelectQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankCountSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankCountSelectQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankCountSelectQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankCountSelectQuery_resultTupleScheme getScheme() {
        return new topicBankCountSelectQuery_resultTupleScheme();
      }
    }

    private static class topicBankCountSelectQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankCountSelectQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankCountSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankCountSelectQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankAddTopic_args implements org.apache.thrift.TBase<topicBankAddTopic_args, topicBankAddTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankAddTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankAddTopic_args");

    private static final org.apache.thrift.protocol.TField TB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankAddTopic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankAddTopic_argsTupleSchemeFactory();

    public int tb_id; // required
    public int topic_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_ID((short)1, "tb_id"),
      TOPIC_ID((short)2, "topic_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_ID
            return TB_ID;
          case 2: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TB_ID_ISSET_ID = 0;
    private static final int __TOPIC_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_ID, new org.apache.thrift.meta_data.FieldMetaData("tb_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topic_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankAddTopic_args.class, metaDataMap);
    }

    public topicBankAddTopic_args() {
    }

    public topicBankAddTopic_args(
      int tb_id,
      int topic_id)
    {
      this();
      this.tb_id = tb_id;
      setTb_idIsSet(true);
      this.topic_id = topic_id;
      setTopic_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankAddTopic_args(topicBankAddTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tb_id = other.tb_id;
      this.topic_id = other.topic_id;
    }

    public topicBankAddTopic_args deepCopy() {
      return new topicBankAddTopic_args(this);
    }

    @Override
    public void clear() {
      setTb_idIsSet(false);
      this.tb_id = 0;
      setTopic_idIsSet(false);
      this.topic_id = 0;
    }

    public int getTb_id() {
      return this.tb_id;
    }

    public topicBankAddTopic_args setTb_id(int tb_id) {
      this.tb_id = tb_id;
      setTb_idIsSet(true);
      return this;
    }

    public void unsetTb_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TB_ID_ISSET_ID);
    }

    /** Returns true if field tb_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTb_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TB_ID_ISSET_ID);
    }

    public void setTb_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TB_ID_ISSET_ID, value);
    }

    public int getTopic_id() {
      return this.topic_id;
    }

    public topicBankAddTopic_args setTopic_id(int topic_id) {
      this.topic_id = topic_id;
      setTopic_idIsSet(true);
      return this;
    }

    public void unsetTopic_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPIC_ID_ISSET_ID);
    }

    /** Returns true if field topic_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPIC_ID_ISSET_ID);
    }

    public void setTopic_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPIC_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TB_ID:
        if (value == null) {
          unsetTb_id();
        } else {
          setTb_id((java.lang.Integer)value);
        }
        break;

      case TOPIC_ID:
        if (value == null) {
          unsetTopic_id();
        } else {
          setTopic_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_ID:
        return getTb_id();

      case TOPIC_ID:
        return getTopic_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TB_ID:
        return isSetTb_id();
      case TOPIC_ID:
        return isSetTopic_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankAddTopic_args)
        return this.equals((topicBankAddTopic_args)that);
      return false;
    }

    public boolean equals(topicBankAddTopic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tb_id = true;
      boolean that_present_tb_id = true;
      if (this_present_tb_id || that_present_tb_id) {
        if (!(this_present_tb_id && that_present_tb_id))
          return false;
        if (this.tb_id != that.tb_id)
          return false;
      }

      boolean this_present_topic_id = true;
      boolean that_present_topic_id = true;
      if (this_present_topic_id || that_present_topic_id) {
        if (!(this_present_topic_id && that_present_topic_id))
          return false;
        if (this.topic_id != that.topic_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + tb_id;

      hashCode = hashCode * 8191 + topic_id;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankAddTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTb_id()).compareTo(other.isSetTb_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_id, other.tb_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopic_id()).compareTo(other.isSetTopic_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_id, other.topic_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankAddTopic_args(");
      boolean first = true;

      sb.append("tb_id:");
      sb.append(this.tb_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic_id:");
      sb.append(this.topic_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankAddTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankAddTopic_argsStandardScheme getScheme() {
        return new topicBankAddTopic_argsStandardScheme();
      }
    }

    private static class topicBankAddTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankAddTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankAddTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tb_id = iprot.readI32();
                struct.setTb_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.topic_id = iprot.readI32();
                struct.setTopic_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankAddTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TB_ID_FIELD_DESC);
        oprot.writeI32(struct.tb_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI32(struct.topic_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankAddTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankAddTopic_argsTupleScheme getScheme() {
        return new topicBankAddTopic_argsTupleScheme();
      }
    }

    private static class topicBankAddTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankAddTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankAddTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTb_id()) {
          optionals.set(0);
        }
        if (struct.isSetTopic_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTb_id()) {
          oprot.writeI32(struct.tb_id);
        }
        if (struct.isSetTopic_id()) {
          oprot.writeI32(struct.topic_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankAddTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tb_id = iprot.readI32();
          struct.setTb_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topic_id = iprot.readI32();
          struct.setTopic_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankAddTopic_result implements org.apache.thrift.TBase<topicBankAddTopic_result, topicBankAddTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankAddTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankAddTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankAddTopic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankAddTopic_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankAddTopic_result.class, metaDataMap);
    }

    public topicBankAddTopic_result() {
    }

    public topicBankAddTopic_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankAddTopic_result(topicBankAddTopic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankAddTopic_result deepCopy() {
      return new topicBankAddTopic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankAddTopic_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankAddTopic_result)
        return this.equals((topicBankAddTopic_result)that);
      return false;
    }

    public boolean equals(topicBankAddTopic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankAddTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankAddTopic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankAddTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankAddTopic_resultStandardScheme getScheme() {
        return new topicBankAddTopic_resultStandardScheme();
      }
    }

    private static class topicBankAddTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankAddTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankAddTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankAddTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankAddTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankAddTopic_resultTupleScheme getScheme() {
        return new topicBankAddTopic_resultTupleScheme();
      }
    }

    private static class topicBankAddTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankAddTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankAddTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankAddTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankRemoveTopic_args implements org.apache.thrift.TBase<topicBankRemoveTopic_args, topicBankRemoveTopic_args._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankRemoveTopic_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankRemoveTopic_args");

    private static final org.apache.thrift.protocol.TField TB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_id", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_id", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankRemoveTopic_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankRemoveTopic_argsTupleSchemeFactory();

    public int tb_id; // required
    public int topic_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TB_ID((short)1, "tb_id"),
      TOPIC_ID((short)2, "topic_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TB_ID
            return TB_ID;
          case 2: // TOPIC_ID
            return TOPIC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TB_ID_ISSET_ID = 0;
    private static final int __TOPIC_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TB_ID, new org.apache.thrift.meta_data.FieldMetaData("tb_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topic_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankRemoveTopic_args.class, metaDataMap);
    }

    public topicBankRemoveTopic_args() {
    }

    public topicBankRemoveTopic_args(
      int tb_id,
      int topic_id)
    {
      this();
      this.tb_id = tb_id;
      setTb_idIsSet(true);
      this.topic_id = topic_id;
      setTopic_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankRemoveTopic_args(topicBankRemoveTopic_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.tb_id = other.tb_id;
      this.topic_id = other.topic_id;
    }

    public topicBankRemoveTopic_args deepCopy() {
      return new topicBankRemoveTopic_args(this);
    }

    @Override
    public void clear() {
      setTb_idIsSet(false);
      this.tb_id = 0;
      setTopic_idIsSet(false);
      this.topic_id = 0;
    }

    public int getTb_id() {
      return this.tb_id;
    }

    public topicBankRemoveTopic_args setTb_id(int tb_id) {
      this.tb_id = tb_id;
      setTb_idIsSet(true);
      return this;
    }

    public void unsetTb_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TB_ID_ISSET_ID);
    }

    /** Returns true if field tb_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTb_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TB_ID_ISSET_ID);
    }

    public void setTb_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TB_ID_ISSET_ID, value);
    }

    public int getTopic_id() {
      return this.topic_id;
    }

    public topicBankRemoveTopic_args setTopic_id(int topic_id) {
      this.topic_id = topic_id;
      setTopic_idIsSet(true);
      return this;
    }

    public void unsetTopic_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPIC_ID_ISSET_ID);
    }

    /** Returns true if field topic_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTopic_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPIC_ID_ISSET_ID);
    }

    public void setTopic_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPIC_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TB_ID:
        if (value == null) {
          unsetTb_id();
        } else {
          setTb_id((java.lang.Integer)value);
        }
        break;

      case TOPIC_ID:
        if (value == null) {
          unsetTopic_id();
        } else {
          setTopic_id((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TB_ID:
        return getTb_id();

      case TOPIC_ID:
        return getTopic_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TB_ID:
        return isSetTb_id();
      case TOPIC_ID:
        return isSetTopic_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankRemoveTopic_args)
        return this.equals((topicBankRemoveTopic_args)that);
      return false;
    }

    public boolean equals(topicBankRemoveTopic_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_tb_id = true;
      boolean that_present_tb_id = true;
      if (this_present_tb_id || that_present_tb_id) {
        if (!(this_present_tb_id && that_present_tb_id))
          return false;
        if (this.tb_id != that.tb_id)
          return false;
      }

      boolean this_present_topic_id = true;
      boolean that_present_topic_id = true;
      if (this_present_topic_id || that_present_topic_id) {
        if (!(this_present_topic_id && that_present_topic_id))
          return false;
        if (this.topic_id != that.topic_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + tb_id;

      hashCode = hashCode * 8191 + topic_id;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankRemoveTopic_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTb_id()).compareTo(other.isSetTb_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTb_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_id, other.tb_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTopic_id()).compareTo(other.isSetTopic_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTopic_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_id, other.topic_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankRemoveTopic_args(");
      boolean first = true;

      sb.append("tb_id:");
      sb.append(this.tb_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("topic_id:");
      sb.append(this.topic_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankRemoveTopic_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemoveTopic_argsStandardScheme getScheme() {
        return new topicBankRemoveTopic_argsStandardScheme();
      }
    }

    private static class topicBankRemoveTopic_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankRemoveTopic_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankRemoveTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.tb_id = iprot.readI32();
                struct.setTb_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TOPIC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.topic_id = iprot.readI32();
                struct.setTopic_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankRemoveTopic_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TB_ID_FIELD_DESC);
        oprot.writeI32(struct.tb_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
        oprot.writeI32(struct.topic_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankRemoveTopic_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemoveTopic_argsTupleScheme getScheme() {
        return new topicBankRemoveTopic_argsTupleScheme();
      }
    }

    private static class topicBankRemoveTopic_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankRemoveTopic_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankRemoveTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTb_id()) {
          optionals.set(0);
        }
        if (struct.isSetTopic_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTb_id()) {
          oprot.writeI32(struct.tb_id);
        }
        if (struct.isSetTopic_id()) {
          oprot.writeI32(struct.topic_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankRemoveTopic_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tb_id = iprot.readI32();
          struct.setTb_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.topic_id = iprot.readI32();
          struct.setTopic_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class topicBankRemoveTopic_result implements org.apache.thrift.TBase<topicBankRemoveTopic_result, topicBankRemoveTopic_result._Fields>, java.io.Serializable, Cloneable, Comparable<topicBankRemoveTopic_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("topicBankRemoveTopic_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new topicBankRemoveTopic_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new topicBankRemoveTopic_resultTupleSchemeFactory();

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(topicBankRemoveTopic_result.class, metaDataMap);
    }

    public topicBankRemoveTopic_result() {
    }

    public topicBankRemoveTopic_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public topicBankRemoveTopic_result(topicBankRemoveTopic_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public topicBankRemoveTopic_result deepCopy() {
      return new topicBankRemoveTopic_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public topicBankRemoveTopic_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof topicBankRemoveTopic_result)
        return this.equals((topicBankRemoveTopic_result)that);
      return false;
    }

    public boolean equals(topicBankRemoveTopic_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      return hashCode;
    }

    @Override
    public int compareTo(topicBankRemoveTopic_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("topicBankRemoveTopic_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class topicBankRemoveTopic_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemoveTopic_resultStandardScheme getScheme() {
        return new topicBankRemoveTopic_resultStandardScheme();
      }
    }

    private static class topicBankRemoveTopic_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<topicBankRemoveTopic_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, topicBankRemoveTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, topicBankRemoveTopic_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class topicBankRemoveTopic_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public topicBankRemoveTopic_resultTupleScheme getScheme() {
        return new topicBankRemoveTopic_resultTupleScheme();
      }
    }

    private static class topicBankRemoveTopic_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<topicBankRemoveTopic_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, topicBankRemoveTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, topicBankRemoveTopic_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
