/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-27")
public class Topic implements org.apache.thrift.TBase<Topic, Topic._Fields>, java.io.Serializable, Cloneable, Comparable<Topic> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Topic");

  private static final org.apache.thrift.protocol.TField TOPIC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TOPIC_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_title", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TOPIC_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TOPIC_ANALYSIS_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_analysis", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TOPIC_CORRECT_ANSWER_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_correct_answer", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOPIC_SCORE_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_score", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField TOPIC_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_create_time", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOPIC_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("topic_update_time", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TOPIC_OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("topicOptions", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicTupleSchemeFactory();

  public int topic_id; // required
  public java.lang.String topic_title; // required
  public java.lang.String topic_type; // required
  public java.lang.String topic_analysis; // required
  public java.lang.String topic_correct_answer; // required
  public double topic_score; // required
  public java.lang.String topic_create_time; // required
  public java.lang.String topic_update_time; // required
  public java.util.List<TopicOption> topicOptions; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOPIC_ID((short)1, "topic_id"),
    TOPIC_TITLE((short)2, "topic_title"),
    TOPIC_TYPE((short)3, "topic_type"),
    TOPIC_ANALYSIS((short)4, "topic_analysis"),
    TOPIC_CORRECT_ANSWER((short)5, "topic_correct_answer"),
    TOPIC_SCORE((short)6, "topic_score"),
    TOPIC_CREATE_TIME((short)7, "topic_create_time"),
    TOPIC_UPDATE_TIME((short)8, "topic_update_time"),
    TOPIC_OPTIONS((short)9, "topicOptions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOPIC_ID
          return TOPIC_ID;
        case 2: // TOPIC_TITLE
          return TOPIC_TITLE;
        case 3: // TOPIC_TYPE
          return TOPIC_TYPE;
        case 4: // TOPIC_ANALYSIS
          return TOPIC_ANALYSIS;
        case 5: // TOPIC_CORRECT_ANSWER
          return TOPIC_CORRECT_ANSWER;
        case 6: // TOPIC_SCORE
          return TOPIC_SCORE;
        case 7: // TOPIC_CREATE_TIME
          return TOPIC_CREATE_TIME;
        case 8: // TOPIC_UPDATE_TIME
          return TOPIC_UPDATE_TIME;
        case 9: // TOPIC_OPTIONS
          return TOPIC_OPTIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TOPIC_ID_ISSET_ID = 0;
  private static final int __TOPIC_SCORE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOPIC_ID, new org.apache.thrift.meta_data.FieldMetaData("topic_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOPIC_TITLE, new org.apache.thrift.meta_data.FieldMetaData("topic_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_TYPE, new org.apache.thrift.meta_data.FieldMetaData("topic_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_ANALYSIS, new org.apache.thrift.meta_data.FieldMetaData("topic_analysis", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_CORRECT_ANSWER, new org.apache.thrift.meta_data.FieldMetaData("topic_correct_answer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_SCORE, new org.apache.thrift.meta_data.FieldMetaData("topic_score", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TOPIC_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("topic_create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("topic_update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPIC_OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("topicOptions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TopicOption.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Topic.class, metaDataMap);
  }

  public Topic() {
  }

  public Topic(
    int topic_id,
    java.lang.String topic_title,
    java.lang.String topic_type,
    java.lang.String topic_analysis,
    java.lang.String topic_correct_answer,
    double topic_score,
    java.lang.String topic_create_time,
    java.lang.String topic_update_time,
    java.util.List<TopicOption> topicOptions)
  {
    this();
    this.topic_id = topic_id;
    setTopic_idIsSet(true);
    this.topic_title = topic_title;
    this.topic_type = topic_type;
    this.topic_analysis = topic_analysis;
    this.topic_correct_answer = topic_correct_answer;
    this.topic_score = topic_score;
    setTopic_scoreIsSet(true);
    this.topic_create_time = topic_create_time;
    this.topic_update_time = topic_update_time;
    this.topicOptions = topicOptions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Topic(Topic other) {
    __isset_bitfield = other.__isset_bitfield;
    this.topic_id = other.topic_id;
    if (other.isSetTopic_title()) {
      this.topic_title = other.topic_title;
    }
    if (other.isSetTopic_type()) {
      this.topic_type = other.topic_type;
    }
    if (other.isSetTopic_analysis()) {
      this.topic_analysis = other.topic_analysis;
    }
    if (other.isSetTopic_correct_answer()) {
      this.topic_correct_answer = other.topic_correct_answer;
    }
    this.topic_score = other.topic_score;
    if (other.isSetTopic_create_time()) {
      this.topic_create_time = other.topic_create_time;
    }
    if (other.isSetTopic_update_time()) {
      this.topic_update_time = other.topic_update_time;
    }
    if (other.isSetTopicOptions()) {
      java.util.List<TopicOption> __this__topicOptions = new java.util.ArrayList<TopicOption>(other.topicOptions.size());
      for (TopicOption other_element : other.topicOptions) {
        __this__topicOptions.add(new TopicOption(other_element));
      }
      this.topicOptions = __this__topicOptions;
    }
  }

  public Topic deepCopy() {
    return new Topic(this);
  }

  @Override
  public void clear() {
    setTopic_idIsSet(false);
    this.topic_id = 0;
    this.topic_title = null;
    this.topic_type = null;
    this.topic_analysis = null;
    this.topic_correct_answer = null;
    setTopic_scoreIsSet(false);
    this.topic_score = 0.0;
    this.topic_create_time = null;
    this.topic_update_time = null;
    this.topicOptions = null;
  }

  public int getTopic_id() {
    return this.topic_id;
  }

  public Topic setTopic_id(int topic_id) {
    this.topic_id = topic_id;
    setTopic_idIsSet(true);
    return this;
  }

  public void unsetTopic_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPIC_ID_ISSET_ID);
  }

  /** Returns true if field topic_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPIC_ID_ISSET_ID);
  }

  public void setTopic_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPIC_ID_ISSET_ID, value);
  }

  public java.lang.String getTopic_title() {
    return this.topic_title;
  }

  public Topic setTopic_title(java.lang.String topic_title) {
    this.topic_title = topic_title;
    return this;
  }

  public void unsetTopic_title() {
    this.topic_title = null;
  }

  /** Returns true if field topic_title is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_title() {
    return this.topic_title != null;
  }

  public void setTopic_titleIsSet(boolean value) {
    if (!value) {
      this.topic_title = null;
    }
  }

  public java.lang.String getTopic_type() {
    return this.topic_type;
  }

  public Topic setTopic_type(java.lang.String topic_type) {
    this.topic_type = topic_type;
    return this;
  }

  public void unsetTopic_type() {
    this.topic_type = null;
  }

  /** Returns true if field topic_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_type() {
    return this.topic_type != null;
  }

  public void setTopic_typeIsSet(boolean value) {
    if (!value) {
      this.topic_type = null;
    }
  }

  public java.lang.String getTopic_analysis() {
    return this.topic_analysis;
  }

  public Topic setTopic_analysis(java.lang.String topic_analysis) {
    this.topic_analysis = topic_analysis;
    return this;
  }

  public void unsetTopic_analysis() {
    this.topic_analysis = null;
  }

  /** Returns true if field topic_analysis is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_analysis() {
    return this.topic_analysis != null;
  }

  public void setTopic_analysisIsSet(boolean value) {
    if (!value) {
      this.topic_analysis = null;
    }
  }

  public java.lang.String getTopic_correct_answer() {
    return this.topic_correct_answer;
  }

  public Topic setTopic_correct_answer(java.lang.String topic_correct_answer) {
    this.topic_correct_answer = topic_correct_answer;
    return this;
  }

  public void unsetTopic_correct_answer() {
    this.topic_correct_answer = null;
  }

  /** Returns true if field topic_correct_answer is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_correct_answer() {
    return this.topic_correct_answer != null;
  }

  public void setTopic_correct_answerIsSet(boolean value) {
    if (!value) {
      this.topic_correct_answer = null;
    }
  }

  public double getTopic_score() {
    return this.topic_score;
  }

  public Topic setTopic_score(double topic_score) {
    this.topic_score = topic_score;
    setTopic_scoreIsSet(true);
    return this;
  }

  public void unsetTopic_score() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TOPIC_SCORE_ISSET_ID);
  }

  /** Returns true if field topic_score is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_score() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TOPIC_SCORE_ISSET_ID);
  }

  public void setTopic_scoreIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TOPIC_SCORE_ISSET_ID, value);
  }

  public java.lang.String getTopic_create_time() {
    return this.topic_create_time;
  }

  public Topic setTopic_create_time(java.lang.String topic_create_time) {
    this.topic_create_time = topic_create_time;
    return this;
  }

  public void unsetTopic_create_time() {
    this.topic_create_time = null;
  }

  /** Returns true if field topic_create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_create_time() {
    return this.topic_create_time != null;
  }

  public void setTopic_create_timeIsSet(boolean value) {
    if (!value) {
      this.topic_create_time = null;
    }
  }

  public java.lang.String getTopic_update_time() {
    return this.topic_update_time;
  }

  public Topic setTopic_update_time(java.lang.String topic_update_time) {
    this.topic_update_time = topic_update_time;
    return this;
  }

  public void unsetTopic_update_time() {
    this.topic_update_time = null;
  }

  /** Returns true if field topic_update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTopic_update_time() {
    return this.topic_update_time != null;
  }

  public void setTopic_update_timeIsSet(boolean value) {
    if (!value) {
      this.topic_update_time = null;
    }
  }

  public int getTopicOptionsSize() {
    return (this.topicOptions == null) ? 0 : this.topicOptions.size();
  }

  public java.util.Iterator<TopicOption> getTopicOptionsIterator() {
    return (this.topicOptions == null) ? null : this.topicOptions.iterator();
  }

  public void addToTopicOptions(TopicOption elem) {
    if (this.topicOptions == null) {
      this.topicOptions = new java.util.ArrayList<TopicOption>();
    }
    this.topicOptions.add(elem);
  }

  public java.util.List<TopicOption> getTopicOptions() {
    return this.topicOptions;
  }

  public Topic setTopicOptions(java.util.List<TopicOption> topicOptions) {
    this.topicOptions = topicOptions;
    return this;
  }

  public void unsetTopicOptions() {
    this.topicOptions = null;
  }

  /** Returns true if field topicOptions is set (has been assigned a value) and false otherwise */
  public boolean isSetTopicOptions() {
    return this.topicOptions != null;
  }

  public void setTopicOptionsIsSet(boolean value) {
    if (!value) {
      this.topicOptions = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TOPIC_ID:
      if (value == null) {
        unsetTopic_id();
      } else {
        setTopic_id((java.lang.Integer)value);
      }
      break;

    case TOPIC_TITLE:
      if (value == null) {
        unsetTopic_title();
      } else {
        setTopic_title((java.lang.String)value);
      }
      break;

    case TOPIC_TYPE:
      if (value == null) {
        unsetTopic_type();
      } else {
        setTopic_type((java.lang.String)value);
      }
      break;

    case TOPIC_ANALYSIS:
      if (value == null) {
        unsetTopic_analysis();
      } else {
        setTopic_analysis((java.lang.String)value);
      }
      break;

    case TOPIC_CORRECT_ANSWER:
      if (value == null) {
        unsetTopic_correct_answer();
      } else {
        setTopic_correct_answer((java.lang.String)value);
      }
      break;

    case TOPIC_SCORE:
      if (value == null) {
        unsetTopic_score();
      } else {
        setTopic_score((java.lang.Double)value);
      }
      break;

    case TOPIC_CREATE_TIME:
      if (value == null) {
        unsetTopic_create_time();
      } else {
        setTopic_create_time((java.lang.String)value);
      }
      break;

    case TOPIC_UPDATE_TIME:
      if (value == null) {
        unsetTopic_update_time();
      } else {
        setTopic_update_time((java.lang.String)value);
      }
      break;

    case TOPIC_OPTIONS:
      if (value == null) {
        unsetTopicOptions();
      } else {
        setTopicOptions((java.util.List<TopicOption>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOPIC_ID:
      return getTopic_id();

    case TOPIC_TITLE:
      return getTopic_title();

    case TOPIC_TYPE:
      return getTopic_type();

    case TOPIC_ANALYSIS:
      return getTopic_analysis();

    case TOPIC_CORRECT_ANSWER:
      return getTopic_correct_answer();

    case TOPIC_SCORE:
      return getTopic_score();

    case TOPIC_CREATE_TIME:
      return getTopic_create_time();

    case TOPIC_UPDATE_TIME:
      return getTopic_update_time();

    case TOPIC_OPTIONS:
      return getTopicOptions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOPIC_ID:
      return isSetTopic_id();
    case TOPIC_TITLE:
      return isSetTopic_title();
    case TOPIC_TYPE:
      return isSetTopic_type();
    case TOPIC_ANALYSIS:
      return isSetTopic_analysis();
    case TOPIC_CORRECT_ANSWER:
      return isSetTopic_correct_answer();
    case TOPIC_SCORE:
      return isSetTopic_score();
    case TOPIC_CREATE_TIME:
      return isSetTopic_create_time();
    case TOPIC_UPDATE_TIME:
      return isSetTopic_update_time();
    case TOPIC_OPTIONS:
      return isSetTopicOptions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Topic)
      return this.equals((Topic)that);
    return false;
  }

  public boolean equals(Topic that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_topic_id = true;
    boolean that_present_topic_id = true;
    if (this_present_topic_id || that_present_topic_id) {
      if (!(this_present_topic_id && that_present_topic_id))
        return false;
      if (this.topic_id != that.topic_id)
        return false;
    }

    boolean this_present_topic_title = true && this.isSetTopic_title();
    boolean that_present_topic_title = true && that.isSetTopic_title();
    if (this_present_topic_title || that_present_topic_title) {
      if (!(this_present_topic_title && that_present_topic_title))
        return false;
      if (!this.topic_title.equals(that.topic_title))
        return false;
    }

    boolean this_present_topic_type = true && this.isSetTopic_type();
    boolean that_present_topic_type = true && that.isSetTopic_type();
    if (this_present_topic_type || that_present_topic_type) {
      if (!(this_present_topic_type && that_present_topic_type))
        return false;
      if (!this.topic_type.equals(that.topic_type))
        return false;
    }

    boolean this_present_topic_analysis = true && this.isSetTopic_analysis();
    boolean that_present_topic_analysis = true && that.isSetTopic_analysis();
    if (this_present_topic_analysis || that_present_topic_analysis) {
      if (!(this_present_topic_analysis && that_present_topic_analysis))
        return false;
      if (!this.topic_analysis.equals(that.topic_analysis))
        return false;
    }

    boolean this_present_topic_correct_answer = true && this.isSetTopic_correct_answer();
    boolean that_present_topic_correct_answer = true && that.isSetTopic_correct_answer();
    if (this_present_topic_correct_answer || that_present_topic_correct_answer) {
      if (!(this_present_topic_correct_answer && that_present_topic_correct_answer))
        return false;
      if (!this.topic_correct_answer.equals(that.topic_correct_answer))
        return false;
    }

    boolean this_present_topic_score = true;
    boolean that_present_topic_score = true;
    if (this_present_topic_score || that_present_topic_score) {
      if (!(this_present_topic_score && that_present_topic_score))
        return false;
      if (this.topic_score != that.topic_score)
        return false;
    }

    boolean this_present_topic_create_time = true && this.isSetTopic_create_time();
    boolean that_present_topic_create_time = true && that.isSetTopic_create_time();
    if (this_present_topic_create_time || that_present_topic_create_time) {
      if (!(this_present_topic_create_time && that_present_topic_create_time))
        return false;
      if (!this.topic_create_time.equals(that.topic_create_time))
        return false;
    }

    boolean this_present_topic_update_time = true && this.isSetTopic_update_time();
    boolean that_present_topic_update_time = true && that.isSetTopic_update_time();
    if (this_present_topic_update_time || that_present_topic_update_time) {
      if (!(this_present_topic_update_time && that_present_topic_update_time))
        return false;
      if (!this.topic_update_time.equals(that.topic_update_time))
        return false;
    }

    boolean this_present_topicOptions = true && this.isSetTopicOptions();
    boolean that_present_topicOptions = true && that.isSetTopicOptions();
    if (this_present_topicOptions || that_present_topicOptions) {
      if (!(this_present_topicOptions && that_present_topicOptions))
        return false;
      if (!this.topicOptions.equals(that.topicOptions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + topic_id;

    hashCode = hashCode * 8191 + ((isSetTopic_title()) ? 131071 : 524287);
    if (isSetTopic_title())
      hashCode = hashCode * 8191 + topic_title.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopic_type()) ? 131071 : 524287);
    if (isSetTopic_type())
      hashCode = hashCode * 8191 + topic_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopic_analysis()) ? 131071 : 524287);
    if (isSetTopic_analysis())
      hashCode = hashCode * 8191 + topic_analysis.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopic_correct_answer()) ? 131071 : 524287);
    if (isSetTopic_correct_answer())
      hashCode = hashCode * 8191 + topic_correct_answer.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(topic_score);

    hashCode = hashCode * 8191 + ((isSetTopic_create_time()) ? 131071 : 524287);
    if (isSetTopic_create_time())
      hashCode = hashCode * 8191 + topic_create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopic_update_time()) ? 131071 : 524287);
    if (isSetTopic_update_time())
      hashCode = hashCode * 8191 + topic_update_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopicOptions()) ? 131071 : 524287);
    if (isSetTopicOptions())
      hashCode = hashCode * 8191 + topicOptions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Topic other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTopic_id()).compareTo(other.isSetTopic_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_id, other.topic_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_title()).compareTo(other.isSetTopic_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_title, other.topic_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_type()).compareTo(other.isSetTopic_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_type, other.topic_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_analysis()).compareTo(other.isSetTopic_analysis());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_analysis()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_analysis, other.topic_analysis);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_correct_answer()).compareTo(other.isSetTopic_correct_answer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_correct_answer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_correct_answer, other.topic_correct_answer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_score()).compareTo(other.isSetTopic_score());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_score()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_score, other.topic_score);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_create_time()).compareTo(other.isSetTopic_create_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_create_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_create_time, other.topic_create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopic_update_time()).compareTo(other.isSetTopic_update_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopic_update_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topic_update_time, other.topic_update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopicOptions()).compareTo(other.isSetTopicOptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopicOptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topicOptions, other.topicOptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Topic(");
    boolean first = true;

    sb.append("topic_id:");
    sb.append(this.topic_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_title:");
    if (this.topic_title == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_type:");
    if (this.topic_type == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_analysis:");
    if (this.topic_analysis == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_analysis);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_correct_answer:");
    if (this.topic_correct_answer == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_correct_answer);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_score:");
    sb.append(this.topic_score);
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_create_time:");
    if (this.topic_create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topic_update_time:");
    if (this.topic_update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.topic_update_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topicOptions:");
    if (this.topicOptions == null) {
      sb.append("null");
    } else {
      sb.append(this.topicOptions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicStandardScheme getScheme() {
      return new TopicStandardScheme();
    }
  }

  private static class TopicStandardScheme extends org.apache.thrift.scheme.StandardScheme<Topic> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOPIC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.topic_id = iprot.readI32();
              struct.setTopic_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TOPIC_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_title = iprot.readString();
              struct.setTopic_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TOPIC_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_type = iprot.readString();
              struct.setTopic_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TOPIC_ANALYSIS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_analysis = iprot.readString();
              struct.setTopic_analysisIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOPIC_CORRECT_ANSWER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_correct_answer = iprot.readString();
              struct.setTopic_correct_answerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOPIC_SCORE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.topic_score = iprot.readDouble();
              struct.setTopic_scoreIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOPIC_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_create_time = iprot.readString();
              struct.setTopic_create_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOPIC_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.topic_update_time = iprot.readString();
              struct.setTopic_update_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TOPIC_OPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list106 = iprot.readListBegin();
                struct.topicOptions = new java.util.ArrayList<TopicOption>(_list106.size);
                TopicOption _elem107;
                for (int _i108 = 0; _i108 < _list106.size; ++_i108)
                {
                  _elem107 = new TopicOption();
                  _elem107.read(iprot);
                  struct.topicOptions.add(_elem107);
                }
                iprot.readListEnd();
              }
              struct.setTopicOptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Topic struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TOPIC_ID_FIELD_DESC);
      oprot.writeI32(struct.topic_id);
      oprot.writeFieldEnd();
      if (struct.topic_title != null) {
        oprot.writeFieldBegin(TOPIC_TITLE_FIELD_DESC);
        oprot.writeString(struct.topic_title);
        oprot.writeFieldEnd();
      }
      if (struct.topic_type != null) {
        oprot.writeFieldBegin(TOPIC_TYPE_FIELD_DESC);
        oprot.writeString(struct.topic_type);
        oprot.writeFieldEnd();
      }
      if (struct.topic_analysis != null) {
        oprot.writeFieldBegin(TOPIC_ANALYSIS_FIELD_DESC);
        oprot.writeString(struct.topic_analysis);
        oprot.writeFieldEnd();
      }
      if (struct.topic_correct_answer != null) {
        oprot.writeFieldBegin(TOPIC_CORRECT_ANSWER_FIELD_DESC);
        oprot.writeString(struct.topic_correct_answer);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TOPIC_SCORE_FIELD_DESC);
      oprot.writeDouble(struct.topic_score);
      oprot.writeFieldEnd();
      if (struct.topic_create_time != null) {
        oprot.writeFieldBegin(TOPIC_CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.topic_create_time);
        oprot.writeFieldEnd();
      }
      if (struct.topic_update_time != null) {
        oprot.writeFieldBegin(TOPIC_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.topic_update_time);
        oprot.writeFieldEnd();
      }
      if (struct.topicOptions != null) {
        oprot.writeFieldBegin(TOPIC_OPTIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topicOptions.size()));
          for (TopicOption _iter109 : struct.topicOptions)
          {
            _iter109.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicTupleScheme getScheme() {
      return new TopicTupleScheme();
    }
  }

  private static class TopicTupleScheme extends org.apache.thrift.scheme.TupleScheme<Topic> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTopic_id()) {
        optionals.set(0);
      }
      if (struct.isSetTopic_title()) {
        optionals.set(1);
      }
      if (struct.isSetTopic_type()) {
        optionals.set(2);
      }
      if (struct.isSetTopic_analysis()) {
        optionals.set(3);
      }
      if (struct.isSetTopic_correct_answer()) {
        optionals.set(4);
      }
      if (struct.isSetTopic_score()) {
        optionals.set(5);
      }
      if (struct.isSetTopic_create_time()) {
        optionals.set(6);
      }
      if (struct.isSetTopic_update_time()) {
        optionals.set(7);
      }
      if (struct.isSetTopicOptions()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTopic_id()) {
        oprot.writeI32(struct.topic_id);
      }
      if (struct.isSetTopic_title()) {
        oprot.writeString(struct.topic_title);
      }
      if (struct.isSetTopic_type()) {
        oprot.writeString(struct.topic_type);
      }
      if (struct.isSetTopic_analysis()) {
        oprot.writeString(struct.topic_analysis);
      }
      if (struct.isSetTopic_correct_answer()) {
        oprot.writeString(struct.topic_correct_answer);
      }
      if (struct.isSetTopic_score()) {
        oprot.writeDouble(struct.topic_score);
      }
      if (struct.isSetTopic_create_time()) {
        oprot.writeString(struct.topic_create_time);
      }
      if (struct.isSetTopic_update_time()) {
        oprot.writeString(struct.topic_update_time);
      }
      if (struct.isSetTopicOptions()) {
        {
          oprot.writeI32(struct.topicOptions.size());
          for (TopicOption _iter110 : struct.topicOptions)
          {
            _iter110.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Topic struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.topic_id = iprot.readI32();
        struct.setTopic_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.topic_title = iprot.readString();
        struct.setTopic_titleIsSet(true);
      }
      if (incoming.get(2)) {
        struct.topic_type = iprot.readString();
        struct.setTopic_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.topic_analysis = iprot.readString();
        struct.setTopic_analysisIsSet(true);
      }
      if (incoming.get(4)) {
        struct.topic_correct_answer = iprot.readString();
        struct.setTopic_correct_answerIsSet(true);
      }
      if (incoming.get(5)) {
        struct.topic_score = iprot.readDouble();
        struct.setTopic_scoreIsSet(true);
      }
      if (incoming.get(6)) {
        struct.topic_create_time = iprot.readString();
        struct.setTopic_create_timeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.topic_update_time = iprot.readString();
        struct.setTopic_update_timeIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list111 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.topicOptions = new java.util.ArrayList<TopicOption>(_list111.size);
          TopicOption _elem112;
          for (int _i113 = 0; _i113 < _list111.size; ++_i113)
          {
            _elem112 = new TopicOption();
            _elem112.read(iprot);
            struct.topicOptions.add(_elem112);
          }
        }
        struct.setTopicOptionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

