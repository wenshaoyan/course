/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-27")
public class Include implements org.apache.thrift.TBase<Include, Include._Fields>, java.io.Serializable, Cloneable, Comparable<Include> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Include");

  private static final org.apache.thrift.protocol.TField ASSOCIATION_FIELD_DESC = new org.apache.thrift.protocol.TField("association", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IS_REQUIRED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRequired", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField WHERE_FIELD_DESC = new org.apache.thrift.protocol.TField("where", org.apache.thrift.protocol.TType.STRUCT, (short)3);
  private static final org.apache.thrift.protocol.TField INCLUDES_FIELD_DESC = new org.apache.thrift.protocol.TField("includes", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new IncludeStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new IncludeTupleSchemeFactory();

  public java.lang.String association; // required
  public boolean isRequired; // required
  public Where where; // required
  public java.util.List<Include> includes; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ASSOCIATION((short)1, "association"),
    IS_REQUIRED((short)2, "isRequired"),
    WHERE((short)3, "where"),
    INCLUDES((short)4, "includes");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ASSOCIATION
          return ASSOCIATION;
        case 2: // IS_REQUIRED
          return IS_REQUIRED;
        case 3: // WHERE
          return WHERE;
        case 4: // INCLUDES
          return INCLUDES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISREQUIRED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ASSOCIATION, new org.apache.thrift.meta_data.FieldMetaData("association", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_REQUIRED, new org.apache.thrift.meta_data.FieldMetaData("isRequired", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WHERE, new org.apache.thrift.meta_data.FieldMetaData("where", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Where.class)));
    tmpMap.put(_Fields.INCLUDES, new org.apache.thrift.meta_data.FieldMetaData("includes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "Include"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Include.class, metaDataMap);
  }

  public Include() {
  }

  public Include(
    java.lang.String association,
    boolean isRequired,
    Where where,
    java.util.List<Include> includes)
  {
    this();
    this.association = association;
    this.isRequired = isRequired;
    setIsRequiredIsSet(true);
    this.where = where;
    this.includes = includes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Include(Include other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAssociation()) {
      this.association = other.association;
    }
    this.isRequired = other.isRequired;
    if (other.isSetWhere()) {
      this.where = new Where(other.where);
    }
    if (other.isSetIncludes()) {
      java.util.List<Include> __this__includes = new java.util.ArrayList<Include>(other.includes.size());
      for (Include other_element : other.includes) {
        __this__includes.add(other_element);
      }
      this.includes = __this__includes;
    }
  }

  public Include deepCopy() {
    return new Include(this);
  }

  @Override
  public void clear() {
    this.association = null;
    setIsRequiredIsSet(false);
    this.isRequired = false;
    this.where = null;
    this.includes = null;
  }

  public java.lang.String getAssociation() {
    return this.association;
  }

  public Include setAssociation(java.lang.String association) {
    this.association = association;
    return this;
  }

  public void unsetAssociation() {
    this.association = null;
  }

  /** Returns true if field association is set (has been assigned a value) and false otherwise */
  public boolean isSetAssociation() {
    return this.association != null;
  }

  public void setAssociationIsSet(boolean value) {
    if (!value) {
      this.association = null;
    }
  }

  public boolean isIsRequired() {
    return this.isRequired;
  }

  public Include setIsRequired(boolean isRequired) {
    this.isRequired = isRequired;
    setIsRequiredIsSet(true);
    return this;
  }

  public void unsetIsRequired() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISREQUIRED_ISSET_ID);
  }

  /** Returns true if field isRequired is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRequired() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISREQUIRED_ISSET_ID);
  }

  public void setIsRequiredIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISREQUIRED_ISSET_ID, value);
  }

  public Where getWhere() {
    return this.where;
  }

  public Include setWhere(Where where) {
    this.where = where;
    return this;
  }

  public void unsetWhere() {
    this.where = null;
  }

  /** Returns true if field where is set (has been assigned a value) and false otherwise */
  public boolean isSetWhere() {
    return this.where != null;
  }

  public void setWhereIsSet(boolean value) {
    if (!value) {
      this.where = null;
    }
  }

  public int getIncludesSize() {
    return (this.includes == null) ? 0 : this.includes.size();
  }

  public java.util.Iterator<Include> getIncludesIterator() {
    return (this.includes == null) ? null : this.includes.iterator();
  }

  public void addToIncludes(Include elem) {
    if (this.includes == null) {
      this.includes = new java.util.ArrayList<Include>();
    }
    this.includes.add(elem);
  }

  public java.util.List<Include> getIncludes() {
    return this.includes;
  }

  public Include setIncludes(java.util.List<Include> includes) {
    this.includes = includes;
    return this;
  }

  public void unsetIncludes() {
    this.includes = null;
  }

  /** Returns true if field includes is set (has been assigned a value) and false otherwise */
  public boolean isSetIncludes() {
    return this.includes != null;
  }

  public void setIncludesIsSet(boolean value) {
    if (!value) {
      this.includes = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ASSOCIATION:
      if (value == null) {
        unsetAssociation();
      } else {
        setAssociation((java.lang.String)value);
      }
      break;

    case IS_REQUIRED:
      if (value == null) {
        unsetIsRequired();
      } else {
        setIsRequired((java.lang.Boolean)value);
      }
      break;

    case WHERE:
      if (value == null) {
        unsetWhere();
      } else {
        setWhere((Where)value);
      }
      break;

    case INCLUDES:
      if (value == null) {
        unsetIncludes();
      } else {
        setIncludes((java.util.List<Include>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ASSOCIATION:
      return getAssociation();

    case IS_REQUIRED:
      return isIsRequired();

    case WHERE:
      return getWhere();

    case INCLUDES:
      return getIncludes();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ASSOCIATION:
      return isSetAssociation();
    case IS_REQUIRED:
      return isSetIsRequired();
    case WHERE:
      return isSetWhere();
    case INCLUDES:
      return isSetIncludes();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Include)
      return this.equals((Include)that);
    return false;
  }

  public boolean equals(Include that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_association = true && this.isSetAssociation();
    boolean that_present_association = true && that.isSetAssociation();
    if (this_present_association || that_present_association) {
      if (!(this_present_association && that_present_association))
        return false;
      if (!this.association.equals(that.association))
        return false;
    }

    boolean this_present_isRequired = true;
    boolean that_present_isRequired = true;
    if (this_present_isRequired || that_present_isRequired) {
      if (!(this_present_isRequired && that_present_isRequired))
        return false;
      if (this.isRequired != that.isRequired)
        return false;
    }

    boolean this_present_where = true && this.isSetWhere();
    boolean that_present_where = true && that.isSetWhere();
    if (this_present_where || that_present_where) {
      if (!(this_present_where && that_present_where))
        return false;
      if (!this.where.equals(that.where))
        return false;
    }

    boolean this_present_includes = true && this.isSetIncludes();
    boolean that_present_includes = true && that.isSetIncludes();
    if (this_present_includes || that_present_includes) {
      if (!(this_present_includes && that_present_includes))
        return false;
      if (!this.includes.equals(that.includes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAssociation()) ? 131071 : 524287);
    if (isSetAssociation())
      hashCode = hashCode * 8191 + association.hashCode();

    hashCode = hashCode * 8191 + ((isRequired) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetWhere()) ? 131071 : 524287);
    if (isSetWhere())
      hashCode = hashCode * 8191 + where.hashCode();

    hashCode = hashCode * 8191 + ((isSetIncludes()) ? 131071 : 524287);
    if (isSetIncludes())
      hashCode = hashCode * 8191 + includes.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Include other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAssociation()).compareTo(other.isSetAssociation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAssociation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.association, other.association);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIsRequired()).compareTo(other.isSetIsRequired());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRequired()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRequired, other.isRequired);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWhere()).compareTo(other.isSetWhere());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWhere()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.where, other.where);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIncludes()).compareTo(other.isSetIncludes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIncludes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includes, other.includes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Include(");
    boolean first = true;

    sb.append("association:");
    if (this.association == null) {
      sb.append("null");
    } else {
      sb.append(this.association);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRequired:");
    sb.append(this.isRequired);
    first = false;
    if (!first) sb.append(", ");
    sb.append("where:");
    if (this.where == null) {
      sb.append("null");
    } else {
      sb.append(this.where);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("includes:");
    if (this.includes == null) {
      sb.append("null");
    } else {
      sb.append(this.includes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (where != null) {
      where.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IncludeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IncludeStandardScheme getScheme() {
      return new IncludeStandardScheme();
    }
  }

  private static class IncludeStandardScheme extends org.apache.thrift.scheme.StandardScheme<Include> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Include struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ASSOCIATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.association = iprot.readString();
              struct.setAssociationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_REQUIRED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRequired = iprot.readBool();
              struct.setIsRequiredIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WHERE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.where = new Where();
              struct.where.read(iprot);
              struct.setWhereIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INCLUDES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                struct.includes = new java.util.ArrayList<Include>(_list64.size);
                Include _elem65;
                for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                {
                  _elem65 = new Include();
                  _elem65.read(iprot);
                  struct.includes.add(_elem65);
                }
                iprot.readListEnd();
              }
              struct.setIncludesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Include struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.association != null) {
        oprot.writeFieldBegin(ASSOCIATION_FIELD_DESC);
        oprot.writeString(struct.association);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_REQUIRED_FIELD_DESC);
      oprot.writeBool(struct.isRequired);
      oprot.writeFieldEnd();
      if (struct.where != null) {
        oprot.writeFieldBegin(WHERE_FIELD_DESC);
        struct.where.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.includes != null) {
        oprot.writeFieldBegin(INCLUDES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.includes.size()));
          for (Include _iter67 : struct.includes)
          {
            _iter67.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IncludeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public IncludeTupleScheme getScheme() {
      return new IncludeTupleScheme();
    }
  }

  private static class IncludeTupleScheme extends org.apache.thrift.scheme.TupleScheme<Include> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Include struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAssociation()) {
        optionals.set(0);
      }
      if (struct.isSetIsRequired()) {
        optionals.set(1);
      }
      if (struct.isSetWhere()) {
        optionals.set(2);
      }
      if (struct.isSetIncludes()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetAssociation()) {
        oprot.writeString(struct.association);
      }
      if (struct.isSetIsRequired()) {
        oprot.writeBool(struct.isRequired);
      }
      if (struct.isSetWhere()) {
        struct.where.write(oprot);
      }
      if (struct.isSetIncludes()) {
        {
          oprot.writeI32(struct.includes.size());
          for (Include _iter68 : struct.includes)
          {
            _iter68.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Include struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.association = iprot.readString();
        struct.setAssociationIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isRequired = iprot.readBool();
        struct.setIsRequiredIsSet(true);
      }
      if (incoming.get(2)) {
        struct.where = new Where();
        struct.where.read(iprot);
        struct.setWhereIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.includes = new java.util.ArrayList<Include>(_list69.size);
          Include _elem70;
          for (int _i71 = 0; _i71 < _list69.size; ++_i71)
          {
            _elem70 = new Include();
            _elem70.read(iprot);
            struct.includes.add(_elem70);
          }
        }
        struct.setIncludesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

