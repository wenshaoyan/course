/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-25")
public class Where implements org.apache.thrift.TBase<Where, Where._Fields>, java.io.Serializable, Cloneable, Comparable<Where> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Where");

  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EQ_FIELD_DESC = new org.apache.thrift.protocol.TField("eq", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NE_FIELD_DESC = new org.apache.thrift.protocol.TField("ne", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField GT_FIELD_DESC = new org.apache.thrift.protocol.TField("gt", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField GTE_FIELD_DESC = new org.apache.thrift.protocol.TField("gte", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LT_FIELD_DESC = new org.apache.thrift.protocol.TField("lt", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField LTE_FIELD_DESC = new org.apache.thrift.protocol.TField("lte", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField BETWEEN_FIELD_DESC = new org.apache.thrift.protocol.TField("between", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField NOT_BETWEEN_FIELD_DESC = new org.apache.thrift.protocol.TField("notBetween", org.apache.thrift.protocol.TType.LIST, (short)9);
  private static final org.apache.thrift.protocol.TField ANY_FIELD_DESC = new org.apache.thrift.protocol.TField("any", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField NOT_ANY_FIELD_DESC = new org.apache.thrift.protocol.TField("notAny", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("like", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField NOT_LIKE_FIELD_DESC = new org.apache.thrift.protocol.TField("notLike", org.apache.thrift.protocol.TType.STRING, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new WhereStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new WhereTupleSchemeFactory();

  public java.lang.String type; // required
  public java.lang.String eq; // required
  public java.lang.String ne; // required
  public java.lang.String gt; // required
  public java.lang.String gte; // required
  public java.lang.String lt; // required
  public java.lang.String lte; // required
  public java.util.List<java.lang.String> between; // required
  public java.util.List<java.lang.String> notBetween; // required
  public java.util.List<java.lang.String> any; // required
  public java.util.List<java.lang.String> notAny; // required
  public java.lang.String like; // required
  public java.lang.String notLike; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TYPE((short)1, "type"),
    EQ((short)2, "eq"),
    NE((short)3, "ne"),
    GT((short)4, "gt"),
    GTE((short)5, "gte"),
    LT((short)6, "lt"),
    LTE((short)7, "lte"),
    BETWEEN((short)8, "between"),
    NOT_BETWEEN((short)9, "notBetween"),
    ANY((short)10, "any"),
    NOT_ANY((short)11, "notAny"),
    LIKE((short)12, "like"),
    NOT_LIKE((short)13, "notLike");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TYPE
          return TYPE;
        case 2: // EQ
          return EQ;
        case 3: // NE
          return NE;
        case 4: // GT
          return GT;
        case 5: // GTE
          return GTE;
        case 6: // LT
          return LT;
        case 7: // LTE
          return LTE;
        case 8: // BETWEEN
          return BETWEEN;
        case 9: // NOT_BETWEEN
          return NOT_BETWEEN;
        case 10: // ANY
          return ANY;
        case 11: // NOT_ANY
          return NOT_ANY;
        case 12: // LIKE
          return LIKE;
        case 13: // NOT_LIKE
          return NOT_LIKE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EQ, new org.apache.thrift.meta_data.FieldMetaData("eq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NE, new org.apache.thrift.meta_data.FieldMetaData("ne", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GT, new org.apache.thrift.meta_data.FieldMetaData("gt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GTE, new org.apache.thrift.meta_data.FieldMetaData("gte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LT, new org.apache.thrift.meta_data.FieldMetaData("lt", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LTE, new org.apache.thrift.meta_data.FieldMetaData("lte", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BETWEEN, new org.apache.thrift.meta_data.FieldMetaData("between", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NOT_BETWEEN, new org.apache.thrift.meta_data.FieldMetaData("notBetween", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ANY, new org.apache.thrift.meta_data.FieldMetaData("any", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NOT_ANY, new org.apache.thrift.meta_data.FieldMetaData("notAny", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LIKE, new org.apache.thrift.meta_data.FieldMetaData("like", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOT_LIKE, new org.apache.thrift.meta_data.FieldMetaData("notLike", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Where.class, metaDataMap);
  }

  public Where() {
  }

  public Where(
    java.lang.String type,
    java.lang.String eq,
    java.lang.String ne,
    java.lang.String gt,
    java.lang.String gte,
    java.lang.String lt,
    java.lang.String lte,
    java.util.List<java.lang.String> between,
    java.util.List<java.lang.String> notBetween,
    java.util.List<java.lang.String> any,
    java.util.List<java.lang.String> notAny,
    java.lang.String like,
    java.lang.String notLike)
  {
    this();
    this.type = type;
    this.eq = eq;
    this.ne = ne;
    this.gt = gt;
    this.gte = gte;
    this.lt = lt;
    this.lte = lte;
    this.between = between;
    this.notBetween = notBetween;
    this.any = any;
    this.notAny = notAny;
    this.like = like;
    this.notLike = notLike;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Where(Where other) {
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetEq()) {
      this.eq = other.eq;
    }
    if (other.isSetNe()) {
      this.ne = other.ne;
    }
    if (other.isSetGt()) {
      this.gt = other.gt;
    }
    if (other.isSetGte()) {
      this.gte = other.gte;
    }
    if (other.isSetLt()) {
      this.lt = other.lt;
    }
    if (other.isSetLte()) {
      this.lte = other.lte;
    }
    if (other.isSetBetween()) {
      java.util.List<java.lang.String> __this__between = new java.util.ArrayList<java.lang.String>(other.between);
      this.between = __this__between;
    }
    if (other.isSetNotBetween()) {
      java.util.List<java.lang.String> __this__notBetween = new java.util.ArrayList<java.lang.String>(other.notBetween);
      this.notBetween = __this__notBetween;
    }
    if (other.isSetAny()) {
      java.util.List<java.lang.String> __this__any = new java.util.ArrayList<java.lang.String>(other.any);
      this.any = __this__any;
    }
    if (other.isSetNotAny()) {
      java.util.List<java.lang.String> __this__notAny = new java.util.ArrayList<java.lang.String>(other.notAny);
      this.notAny = __this__notAny;
    }
    if (other.isSetLike()) {
      this.like = other.like;
    }
    if (other.isSetNotLike()) {
      this.notLike = other.notLike;
    }
  }

  public Where deepCopy() {
    return new Where(this);
  }

  @Override
  public void clear() {
    this.type = null;
    this.eq = null;
    this.ne = null;
    this.gt = null;
    this.gte = null;
    this.lt = null;
    this.lte = null;
    this.between = null;
    this.notBetween = null;
    this.any = null;
    this.notAny = null;
    this.like = null;
    this.notLike = null;
  }

  public java.lang.String getType() {
    return this.type;
  }

  public Where setType(java.lang.String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public java.lang.String getEq() {
    return this.eq;
  }

  public Where setEq(java.lang.String eq) {
    this.eq = eq;
    return this;
  }

  public void unsetEq() {
    this.eq = null;
  }

  /** Returns true if field eq is set (has been assigned a value) and false otherwise */
  public boolean isSetEq() {
    return this.eq != null;
  }

  public void setEqIsSet(boolean value) {
    if (!value) {
      this.eq = null;
    }
  }

  public java.lang.String getNe() {
    return this.ne;
  }

  public Where setNe(java.lang.String ne) {
    this.ne = ne;
    return this;
  }

  public void unsetNe() {
    this.ne = null;
  }

  /** Returns true if field ne is set (has been assigned a value) and false otherwise */
  public boolean isSetNe() {
    return this.ne != null;
  }

  public void setNeIsSet(boolean value) {
    if (!value) {
      this.ne = null;
    }
  }

  public java.lang.String getGt() {
    return this.gt;
  }

  public Where setGt(java.lang.String gt) {
    this.gt = gt;
    return this;
  }

  public void unsetGt() {
    this.gt = null;
  }

  /** Returns true if field gt is set (has been assigned a value) and false otherwise */
  public boolean isSetGt() {
    return this.gt != null;
  }

  public void setGtIsSet(boolean value) {
    if (!value) {
      this.gt = null;
    }
  }

  public java.lang.String getGte() {
    return this.gte;
  }

  public Where setGte(java.lang.String gte) {
    this.gte = gte;
    return this;
  }

  public void unsetGte() {
    this.gte = null;
  }

  /** Returns true if field gte is set (has been assigned a value) and false otherwise */
  public boolean isSetGte() {
    return this.gte != null;
  }

  public void setGteIsSet(boolean value) {
    if (!value) {
      this.gte = null;
    }
  }

  public java.lang.String getLt() {
    return this.lt;
  }

  public Where setLt(java.lang.String lt) {
    this.lt = lt;
    return this;
  }

  public void unsetLt() {
    this.lt = null;
  }

  /** Returns true if field lt is set (has been assigned a value) and false otherwise */
  public boolean isSetLt() {
    return this.lt != null;
  }

  public void setLtIsSet(boolean value) {
    if (!value) {
      this.lt = null;
    }
  }

  public java.lang.String getLte() {
    return this.lte;
  }

  public Where setLte(java.lang.String lte) {
    this.lte = lte;
    return this;
  }

  public void unsetLte() {
    this.lte = null;
  }

  /** Returns true if field lte is set (has been assigned a value) and false otherwise */
  public boolean isSetLte() {
    return this.lte != null;
  }

  public void setLteIsSet(boolean value) {
    if (!value) {
      this.lte = null;
    }
  }

  public int getBetweenSize() {
    return (this.between == null) ? 0 : this.between.size();
  }

  public java.util.Iterator<java.lang.String> getBetweenIterator() {
    return (this.between == null) ? null : this.between.iterator();
  }

  public void addToBetween(java.lang.String elem) {
    if (this.between == null) {
      this.between = new java.util.ArrayList<java.lang.String>();
    }
    this.between.add(elem);
  }

  public java.util.List<java.lang.String> getBetween() {
    return this.between;
  }

  public Where setBetween(java.util.List<java.lang.String> between) {
    this.between = between;
    return this;
  }

  public void unsetBetween() {
    this.between = null;
  }

  /** Returns true if field between is set (has been assigned a value) and false otherwise */
  public boolean isSetBetween() {
    return this.between != null;
  }

  public void setBetweenIsSet(boolean value) {
    if (!value) {
      this.between = null;
    }
  }

  public int getNotBetweenSize() {
    return (this.notBetween == null) ? 0 : this.notBetween.size();
  }

  public java.util.Iterator<java.lang.String> getNotBetweenIterator() {
    return (this.notBetween == null) ? null : this.notBetween.iterator();
  }

  public void addToNotBetween(java.lang.String elem) {
    if (this.notBetween == null) {
      this.notBetween = new java.util.ArrayList<java.lang.String>();
    }
    this.notBetween.add(elem);
  }

  public java.util.List<java.lang.String> getNotBetween() {
    return this.notBetween;
  }

  public Where setNotBetween(java.util.List<java.lang.String> notBetween) {
    this.notBetween = notBetween;
    return this;
  }

  public void unsetNotBetween() {
    this.notBetween = null;
  }

  /** Returns true if field notBetween is set (has been assigned a value) and false otherwise */
  public boolean isSetNotBetween() {
    return this.notBetween != null;
  }

  public void setNotBetweenIsSet(boolean value) {
    if (!value) {
      this.notBetween = null;
    }
  }

  public int getAnySize() {
    return (this.any == null) ? 0 : this.any.size();
  }

  public java.util.Iterator<java.lang.String> getAnyIterator() {
    return (this.any == null) ? null : this.any.iterator();
  }

  public void addToAny(java.lang.String elem) {
    if (this.any == null) {
      this.any = new java.util.ArrayList<java.lang.String>();
    }
    this.any.add(elem);
  }

  public java.util.List<java.lang.String> getAny() {
    return this.any;
  }

  public Where setAny(java.util.List<java.lang.String> any) {
    this.any = any;
    return this;
  }

  public void unsetAny() {
    this.any = null;
  }

  /** Returns true if field any is set (has been assigned a value) and false otherwise */
  public boolean isSetAny() {
    return this.any != null;
  }

  public void setAnyIsSet(boolean value) {
    if (!value) {
      this.any = null;
    }
  }

  public int getNotAnySize() {
    return (this.notAny == null) ? 0 : this.notAny.size();
  }

  public java.util.Iterator<java.lang.String> getNotAnyIterator() {
    return (this.notAny == null) ? null : this.notAny.iterator();
  }

  public void addToNotAny(java.lang.String elem) {
    if (this.notAny == null) {
      this.notAny = new java.util.ArrayList<java.lang.String>();
    }
    this.notAny.add(elem);
  }

  public java.util.List<java.lang.String> getNotAny() {
    return this.notAny;
  }

  public Where setNotAny(java.util.List<java.lang.String> notAny) {
    this.notAny = notAny;
    return this;
  }

  public void unsetNotAny() {
    this.notAny = null;
  }

  /** Returns true if field notAny is set (has been assigned a value) and false otherwise */
  public boolean isSetNotAny() {
    return this.notAny != null;
  }

  public void setNotAnyIsSet(boolean value) {
    if (!value) {
      this.notAny = null;
    }
  }

  public java.lang.String getLike() {
    return this.like;
  }

  public Where setLike(java.lang.String like) {
    this.like = like;
    return this;
  }

  public void unsetLike() {
    this.like = null;
  }

  /** Returns true if field like is set (has been assigned a value) and false otherwise */
  public boolean isSetLike() {
    return this.like != null;
  }

  public void setLikeIsSet(boolean value) {
    if (!value) {
      this.like = null;
    }
  }

  public java.lang.String getNotLike() {
    return this.notLike;
  }

  public Where setNotLike(java.lang.String notLike) {
    this.notLike = notLike;
    return this;
  }

  public void unsetNotLike() {
    this.notLike = null;
  }

  /** Returns true if field notLike is set (has been assigned a value) and false otherwise */
  public boolean isSetNotLike() {
    return this.notLike != null;
  }

  public void setNotLikeIsSet(boolean value) {
    if (!value) {
      this.notLike = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((java.lang.String)value);
      }
      break;

    case EQ:
      if (value == null) {
        unsetEq();
      } else {
        setEq((java.lang.String)value);
      }
      break;

    case NE:
      if (value == null) {
        unsetNe();
      } else {
        setNe((java.lang.String)value);
      }
      break;

    case GT:
      if (value == null) {
        unsetGt();
      } else {
        setGt((java.lang.String)value);
      }
      break;

    case GTE:
      if (value == null) {
        unsetGte();
      } else {
        setGte((java.lang.String)value);
      }
      break;

    case LT:
      if (value == null) {
        unsetLt();
      } else {
        setLt((java.lang.String)value);
      }
      break;

    case LTE:
      if (value == null) {
        unsetLte();
      } else {
        setLte((java.lang.String)value);
      }
      break;

    case BETWEEN:
      if (value == null) {
        unsetBetween();
      } else {
        setBetween((java.util.List<java.lang.String>)value);
      }
      break;

    case NOT_BETWEEN:
      if (value == null) {
        unsetNotBetween();
      } else {
        setNotBetween((java.util.List<java.lang.String>)value);
      }
      break;

    case ANY:
      if (value == null) {
        unsetAny();
      } else {
        setAny((java.util.List<java.lang.String>)value);
      }
      break;

    case NOT_ANY:
      if (value == null) {
        unsetNotAny();
      } else {
        setNotAny((java.util.List<java.lang.String>)value);
      }
      break;

    case LIKE:
      if (value == null) {
        unsetLike();
      } else {
        setLike((java.lang.String)value);
      }
      break;

    case NOT_LIKE:
      if (value == null) {
        unsetNotLike();
      } else {
        setNotLike((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TYPE:
      return getType();

    case EQ:
      return getEq();

    case NE:
      return getNe();

    case GT:
      return getGt();

    case GTE:
      return getGte();

    case LT:
      return getLt();

    case LTE:
      return getLte();

    case BETWEEN:
      return getBetween();

    case NOT_BETWEEN:
      return getNotBetween();

    case ANY:
      return getAny();

    case NOT_ANY:
      return getNotAny();

    case LIKE:
      return getLike();

    case NOT_LIKE:
      return getNotLike();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TYPE:
      return isSetType();
    case EQ:
      return isSetEq();
    case NE:
      return isSetNe();
    case GT:
      return isSetGt();
    case GTE:
      return isSetGte();
    case LT:
      return isSetLt();
    case LTE:
      return isSetLte();
    case BETWEEN:
      return isSetBetween();
    case NOT_BETWEEN:
      return isSetNotBetween();
    case ANY:
      return isSetAny();
    case NOT_ANY:
      return isSetNotAny();
    case LIKE:
      return isSetLike();
    case NOT_LIKE:
      return isSetNotLike();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof Where)
      return this.equals((Where)that);
    return false;
  }

  public boolean equals(Where that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_eq = true && this.isSetEq();
    boolean that_present_eq = true && that.isSetEq();
    if (this_present_eq || that_present_eq) {
      if (!(this_present_eq && that_present_eq))
        return false;
      if (!this.eq.equals(that.eq))
        return false;
    }

    boolean this_present_ne = true && this.isSetNe();
    boolean that_present_ne = true && that.isSetNe();
    if (this_present_ne || that_present_ne) {
      if (!(this_present_ne && that_present_ne))
        return false;
      if (!this.ne.equals(that.ne))
        return false;
    }

    boolean this_present_gt = true && this.isSetGt();
    boolean that_present_gt = true && that.isSetGt();
    if (this_present_gt || that_present_gt) {
      if (!(this_present_gt && that_present_gt))
        return false;
      if (!this.gt.equals(that.gt))
        return false;
    }

    boolean this_present_gte = true && this.isSetGte();
    boolean that_present_gte = true && that.isSetGte();
    if (this_present_gte || that_present_gte) {
      if (!(this_present_gte && that_present_gte))
        return false;
      if (!this.gte.equals(that.gte))
        return false;
    }

    boolean this_present_lt = true && this.isSetLt();
    boolean that_present_lt = true && that.isSetLt();
    if (this_present_lt || that_present_lt) {
      if (!(this_present_lt && that_present_lt))
        return false;
      if (!this.lt.equals(that.lt))
        return false;
    }

    boolean this_present_lte = true && this.isSetLte();
    boolean that_present_lte = true && that.isSetLte();
    if (this_present_lte || that_present_lte) {
      if (!(this_present_lte && that_present_lte))
        return false;
      if (!this.lte.equals(that.lte))
        return false;
    }

    boolean this_present_between = true && this.isSetBetween();
    boolean that_present_between = true && that.isSetBetween();
    if (this_present_between || that_present_between) {
      if (!(this_present_between && that_present_between))
        return false;
      if (!this.between.equals(that.between))
        return false;
    }

    boolean this_present_notBetween = true && this.isSetNotBetween();
    boolean that_present_notBetween = true && that.isSetNotBetween();
    if (this_present_notBetween || that_present_notBetween) {
      if (!(this_present_notBetween && that_present_notBetween))
        return false;
      if (!this.notBetween.equals(that.notBetween))
        return false;
    }

    boolean this_present_any = true && this.isSetAny();
    boolean that_present_any = true && that.isSetAny();
    if (this_present_any || that_present_any) {
      if (!(this_present_any && that_present_any))
        return false;
      if (!this.any.equals(that.any))
        return false;
    }

    boolean this_present_notAny = true && this.isSetNotAny();
    boolean that_present_notAny = true && that.isSetNotAny();
    if (this_present_notAny || that_present_notAny) {
      if (!(this_present_notAny && that_present_notAny))
        return false;
      if (!this.notAny.equals(that.notAny))
        return false;
    }

    boolean this_present_like = true && this.isSetLike();
    boolean that_present_like = true && that.isSetLike();
    if (this_present_like || that_present_like) {
      if (!(this_present_like && that_present_like))
        return false;
      if (!this.like.equals(that.like))
        return false;
    }

    boolean this_present_notLike = true && this.isSetNotLike();
    boolean that_present_notLike = true && that.isSetNotLike();
    if (this_present_notLike || that_present_notLike) {
      if (!(this_present_notLike && that_present_notLike))
        return false;
      if (!this.notLike.equals(that.notLike))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.hashCode();

    hashCode = hashCode * 8191 + ((isSetEq()) ? 131071 : 524287);
    if (isSetEq())
      hashCode = hashCode * 8191 + eq.hashCode();

    hashCode = hashCode * 8191 + ((isSetNe()) ? 131071 : 524287);
    if (isSetNe())
      hashCode = hashCode * 8191 + ne.hashCode();

    hashCode = hashCode * 8191 + ((isSetGt()) ? 131071 : 524287);
    if (isSetGt())
      hashCode = hashCode * 8191 + gt.hashCode();

    hashCode = hashCode * 8191 + ((isSetGte()) ? 131071 : 524287);
    if (isSetGte())
      hashCode = hashCode * 8191 + gte.hashCode();

    hashCode = hashCode * 8191 + ((isSetLt()) ? 131071 : 524287);
    if (isSetLt())
      hashCode = hashCode * 8191 + lt.hashCode();

    hashCode = hashCode * 8191 + ((isSetLte()) ? 131071 : 524287);
    if (isSetLte())
      hashCode = hashCode * 8191 + lte.hashCode();

    hashCode = hashCode * 8191 + ((isSetBetween()) ? 131071 : 524287);
    if (isSetBetween())
      hashCode = hashCode * 8191 + between.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotBetween()) ? 131071 : 524287);
    if (isSetNotBetween())
      hashCode = hashCode * 8191 + notBetween.hashCode();

    hashCode = hashCode * 8191 + ((isSetAny()) ? 131071 : 524287);
    if (isSetAny())
      hashCode = hashCode * 8191 + any.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotAny()) ? 131071 : 524287);
    if (isSetNotAny())
      hashCode = hashCode * 8191 + notAny.hashCode();

    hashCode = hashCode * 8191 + ((isSetLike()) ? 131071 : 524287);
    if (isSetLike())
      hashCode = hashCode * 8191 + like.hashCode();

    hashCode = hashCode * 8191 + ((isSetNotLike()) ? 131071 : 524287);
    if (isSetNotLike())
      hashCode = hashCode * 8191 + notLike.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Where other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEq()).compareTo(other.isSetEq());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEq()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eq, other.eq);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNe()).compareTo(other.isSetNe());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNe()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ne, other.ne);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGt()).compareTo(other.isSetGt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gt, other.gt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGte()).compareTo(other.isSetGte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gte, other.gte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLt()).compareTo(other.isSetLt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lt, other.lt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLte()).compareTo(other.isSetLte());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLte()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lte, other.lte);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBetween()).compareTo(other.isSetBetween());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBetween()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.between, other.between);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotBetween()).compareTo(other.isSetNotBetween());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotBetween()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notBetween, other.notBetween);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAny()).compareTo(other.isSetAny());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAny()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.any, other.any);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotAny()).compareTo(other.isSetNotAny());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotAny()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notAny, other.notAny);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLike()).compareTo(other.isSetLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.like, other.like);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNotLike()).compareTo(other.isSetNotLike());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNotLike()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.notLike, other.notLike);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Where(");
    boolean first = true;

    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("eq:");
    if (this.eq == null) {
      sb.append("null");
    } else {
      sb.append(this.eq);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ne:");
    if (this.ne == null) {
      sb.append("null");
    } else {
      sb.append(this.ne);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gt:");
    if (this.gt == null) {
      sb.append("null");
    } else {
      sb.append(this.gt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("gte:");
    if (this.gte == null) {
      sb.append("null");
    } else {
      sb.append(this.gte);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lt:");
    if (this.lt == null) {
      sb.append("null");
    } else {
      sb.append(this.lt);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lte:");
    if (this.lte == null) {
      sb.append("null");
    } else {
      sb.append(this.lte);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("between:");
    if (this.between == null) {
      sb.append("null");
    } else {
      sb.append(this.between);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notBetween:");
    if (this.notBetween == null) {
      sb.append("null");
    } else {
      sb.append(this.notBetween);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("any:");
    if (this.any == null) {
      sb.append("null");
    } else {
      sb.append(this.any);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notAny:");
    if (this.notAny == null) {
      sb.append("null");
    } else {
      sb.append(this.notAny);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("like:");
    if (this.like == null) {
      sb.append("null");
    } else {
      sb.append(this.like);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("notLike:");
    if (this.notLike == null) {
      sb.append("null");
    } else {
      sb.append(this.notLike);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WhereStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WhereStandardScheme getScheme() {
      return new WhereStandardScheme();
    }
  }

  private static class WhereStandardScheme extends org.apache.thrift.scheme.StandardScheme<Where> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Where struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EQ
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.eq = iprot.readString();
              struct.setEqIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ne = iprot.readString();
              struct.setNeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // GT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gt = iprot.readString();
              struct.setGtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gte = iprot.readString();
              struct.setGteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lt = iprot.readString();
              struct.setLtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LTE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lte = iprot.readString();
              struct.setLteIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // BETWEEN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                struct.between = new java.util.ArrayList<java.lang.String>(_list32.size);
                java.lang.String _elem33;
                for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                {
                  _elem33 = iprot.readString();
                  struct.between.add(_elem33);
                }
                iprot.readListEnd();
              }
              struct.setBetweenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NOT_BETWEEN
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list35 = iprot.readListBegin();
                struct.notBetween = new java.util.ArrayList<java.lang.String>(_list35.size);
                java.lang.String _elem36;
                for (int _i37 = 0; _i37 < _list35.size; ++_i37)
                {
                  _elem36 = iprot.readString();
                  struct.notBetween.add(_elem36);
                }
                iprot.readListEnd();
              }
              struct.setNotBetweenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ANY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list38 = iprot.readListBegin();
                struct.any = new java.util.ArrayList<java.lang.String>(_list38.size);
                java.lang.String _elem39;
                for (int _i40 = 0; _i40 < _list38.size; ++_i40)
                {
                  _elem39 = iprot.readString();
                  struct.any.add(_elem39);
                }
                iprot.readListEnd();
              }
              struct.setAnyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NOT_ANY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list41 = iprot.readListBegin();
                struct.notAny = new java.util.ArrayList<java.lang.String>(_list41.size);
                java.lang.String _elem42;
                for (int _i43 = 0; _i43 < _list41.size; ++_i43)
                {
                  _elem42 = iprot.readString();
                  struct.notAny.add(_elem42);
                }
                iprot.readListEnd();
              }
              struct.setNotAnyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.like = iprot.readString();
              struct.setLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NOT_LIKE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.notLike = iprot.readString();
              struct.setNotLikeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Where struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      if (struct.eq != null) {
        oprot.writeFieldBegin(EQ_FIELD_DESC);
        oprot.writeString(struct.eq);
        oprot.writeFieldEnd();
      }
      if (struct.ne != null) {
        oprot.writeFieldBegin(NE_FIELD_DESC);
        oprot.writeString(struct.ne);
        oprot.writeFieldEnd();
      }
      if (struct.gt != null) {
        oprot.writeFieldBegin(GT_FIELD_DESC);
        oprot.writeString(struct.gt);
        oprot.writeFieldEnd();
      }
      if (struct.gte != null) {
        oprot.writeFieldBegin(GTE_FIELD_DESC);
        oprot.writeString(struct.gte);
        oprot.writeFieldEnd();
      }
      if (struct.lt != null) {
        oprot.writeFieldBegin(LT_FIELD_DESC);
        oprot.writeString(struct.lt);
        oprot.writeFieldEnd();
      }
      if (struct.lte != null) {
        oprot.writeFieldBegin(LTE_FIELD_DESC);
        oprot.writeString(struct.lte);
        oprot.writeFieldEnd();
      }
      if (struct.between != null) {
        oprot.writeFieldBegin(BETWEEN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.between.size()));
          for (java.lang.String _iter44 : struct.between)
          {
            oprot.writeString(_iter44);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.notBetween != null) {
        oprot.writeFieldBegin(NOT_BETWEEN_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notBetween.size()));
          for (java.lang.String _iter45 : struct.notBetween)
          {
            oprot.writeString(_iter45);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.any != null) {
        oprot.writeFieldBegin(ANY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.any.size()));
          for (java.lang.String _iter46 : struct.any)
          {
            oprot.writeString(_iter46);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.notAny != null) {
        oprot.writeFieldBegin(NOT_ANY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.notAny.size()));
          for (java.lang.String _iter47 : struct.notAny)
          {
            oprot.writeString(_iter47);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.like != null) {
        oprot.writeFieldBegin(LIKE_FIELD_DESC);
        oprot.writeString(struct.like);
        oprot.writeFieldEnd();
      }
      if (struct.notLike != null) {
        oprot.writeFieldBegin(NOT_LIKE_FIELD_DESC);
        oprot.writeString(struct.notLike);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WhereTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public WhereTupleScheme getScheme() {
      return new WhereTupleScheme();
    }
  }

  private static class WhereTupleScheme extends org.apache.thrift.scheme.TupleScheme<Where> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Where struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetType()) {
        optionals.set(0);
      }
      if (struct.isSetEq()) {
        optionals.set(1);
      }
      if (struct.isSetNe()) {
        optionals.set(2);
      }
      if (struct.isSetGt()) {
        optionals.set(3);
      }
      if (struct.isSetGte()) {
        optionals.set(4);
      }
      if (struct.isSetLt()) {
        optionals.set(5);
      }
      if (struct.isSetLte()) {
        optionals.set(6);
      }
      if (struct.isSetBetween()) {
        optionals.set(7);
      }
      if (struct.isSetNotBetween()) {
        optionals.set(8);
      }
      if (struct.isSetAny()) {
        optionals.set(9);
      }
      if (struct.isSetNotAny()) {
        optionals.set(10);
      }
      if (struct.isSetLike()) {
        optionals.set(11);
      }
      if (struct.isSetNotLike()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetEq()) {
        oprot.writeString(struct.eq);
      }
      if (struct.isSetNe()) {
        oprot.writeString(struct.ne);
      }
      if (struct.isSetGt()) {
        oprot.writeString(struct.gt);
      }
      if (struct.isSetGte()) {
        oprot.writeString(struct.gte);
      }
      if (struct.isSetLt()) {
        oprot.writeString(struct.lt);
      }
      if (struct.isSetLte()) {
        oprot.writeString(struct.lte);
      }
      if (struct.isSetBetween()) {
        {
          oprot.writeI32(struct.between.size());
          for (java.lang.String _iter48 : struct.between)
          {
            oprot.writeString(_iter48);
          }
        }
      }
      if (struct.isSetNotBetween()) {
        {
          oprot.writeI32(struct.notBetween.size());
          for (java.lang.String _iter49 : struct.notBetween)
          {
            oprot.writeString(_iter49);
          }
        }
      }
      if (struct.isSetAny()) {
        {
          oprot.writeI32(struct.any.size());
          for (java.lang.String _iter50 : struct.any)
          {
            oprot.writeString(_iter50);
          }
        }
      }
      if (struct.isSetNotAny()) {
        {
          oprot.writeI32(struct.notAny.size());
          for (java.lang.String _iter51 : struct.notAny)
          {
            oprot.writeString(_iter51);
          }
        }
      }
      if (struct.isSetLike()) {
        oprot.writeString(struct.like);
      }
      if (struct.isSetNotLike()) {
        oprot.writeString(struct.notLike);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Where struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.eq = iprot.readString();
        struct.setEqIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ne = iprot.readString();
        struct.setNeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.gt = iprot.readString();
        struct.setGtIsSet(true);
      }
      if (incoming.get(4)) {
        struct.gte = iprot.readString();
        struct.setGteIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lt = iprot.readString();
        struct.setLtIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lte = iprot.readString();
        struct.setLteIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.between = new java.util.ArrayList<java.lang.String>(_list52.size);
          java.lang.String _elem53;
          for (int _i54 = 0; _i54 < _list52.size; ++_i54)
          {
            _elem53 = iprot.readString();
            struct.between.add(_elem53);
          }
        }
        struct.setBetweenIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.notBetween = new java.util.ArrayList<java.lang.String>(_list55.size);
          java.lang.String _elem56;
          for (int _i57 = 0; _i57 < _list55.size; ++_i57)
          {
            _elem56 = iprot.readString();
            struct.notBetween.add(_elem56);
          }
        }
        struct.setNotBetweenIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.any = new java.util.ArrayList<java.lang.String>(_list58.size);
          java.lang.String _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = iprot.readString();
            struct.any.add(_elem59);
          }
        }
        struct.setAnyIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.notAny = new java.util.ArrayList<java.lang.String>(_list61.size);
          java.lang.String _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = iprot.readString();
            struct.notAny.add(_elem62);
          }
        }
        struct.setNotAnyIsSet(true);
      }
      if (incoming.get(11)) {
        struct.like = iprot.readString();
        struct.setLikeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.notLike = iprot.readString();
        struct.setNotLikeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

