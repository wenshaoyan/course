/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.wenshao.dal.thriftgen;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2018-01-27")
public class TopicBank implements org.apache.thrift.TBase<TopicBank, TopicBank._Fields>, java.io.Serializable, Cloneable, Comparable<TopicBank> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TopicBank");

  private static final org.apache.thrift.protocol.TField TB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_id", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField TB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TB_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_type", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TB_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_create_time", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TB_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("tb_update_time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("topics", org.apache.thrift.protocol.TType.LIST, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TopicBankStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TopicBankTupleSchemeFactory();

  public int tb_id; // required
  public java.lang.String tb_name; // required
  public java.lang.String tb_type; // required
  public java.lang.String tb_create_time; // required
  public java.lang.String tb_update_time; // required
  public java.util.List<Topic> topics; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TB_ID((short)1, "tb_id"),
    TB_NAME((short)2, "tb_name"),
    TB_TYPE((short)3, "tb_type"),
    TB_CREATE_TIME((short)4, "tb_create_time"),
    TB_UPDATE_TIME((short)5, "tb_update_time"),
    TOPICS((short)6, "topics");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TB_ID
          return TB_ID;
        case 2: // TB_NAME
          return TB_NAME;
        case 3: // TB_TYPE
          return TB_TYPE;
        case 4: // TB_CREATE_TIME
          return TB_CREATE_TIME;
        case 5: // TB_UPDATE_TIME
          return TB_UPDATE_TIME;
        case 6: // TOPICS
          return TOPICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TB_ID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TB_ID, new org.apache.thrift.meta_data.FieldMetaData("tb_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TB_NAME, new org.apache.thrift.meta_data.FieldMetaData("tb_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TB_TYPE, new org.apache.thrift.meta_data.FieldMetaData("tb_type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TB_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tb_create_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TB_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("tb_update_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOPICS, new org.apache.thrift.meta_data.FieldMetaData("topics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Topic.class))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TopicBank.class, metaDataMap);
  }

  public TopicBank() {
  }

  public TopicBank(
    int tb_id,
    java.lang.String tb_name,
    java.lang.String tb_type,
    java.lang.String tb_create_time,
    java.lang.String tb_update_time,
    java.util.List<Topic> topics)
  {
    this();
    this.tb_id = tb_id;
    setTb_idIsSet(true);
    this.tb_name = tb_name;
    this.tb_type = tb_type;
    this.tb_create_time = tb_create_time;
    this.tb_update_time = tb_update_time;
    this.topics = topics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TopicBank(TopicBank other) {
    __isset_bitfield = other.__isset_bitfield;
    this.tb_id = other.tb_id;
    if (other.isSetTb_name()) {
      this.tb_name = other.tb_name;
    }
    if (other.isSetTb_type()) {
      this.tb_type = other.tb_type;
    }
    if (other.isSetTb_create_time()) {
      this.tb_create_time = other.tb_create_time;
    }
    if (other.isSetTb_update_time()) {
      this.tb_update_time = other.tb_update_time;
    }
    if (other.isSetTopics()) {
      java.util.List<Topic> __this__topics = new java.util.ArrayList<Topic>(other.topics.size());
      for (Topic other_element : other.topics) {
        __this__topics.add(new Topic(other_element));
      }
      this.topics = __this__topics;
    }
  }

  public TopicBank deepCopy() {
    return new TopicBank(this);
  }

  @Override
  public void clear() {
    setTb_idIsSet(false);
    this.tb_id = 0;
    this.tb_name = null;
    this.tb_type = null;
    this.tb_create_time = null;
    this.tb_update_time = null;
    this.topics = null;
  }

  public int getTb_id() {
    return this.tb_id;
  }

  public TopicBank setTb_id(int tb_id) {
    this.tb_id = tb_id;
    setTb_idIsSet(true);
    return this;
  }

  public void unsetTb_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TB_ID_ISSET_ID);
  }

  /** Returns true if field tb_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTb_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TB_ID_ISSET_ID);
  }

  public void setTb_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TB_ID_ISSET_ID, value);
  }

  public java.lang.String getTb_name() {
    return this.tb_name;
  }

  public TopicBank setTb_name(java.lang.String tb_name) {
    this.tb_name = tb_name;
    return this;
  }

  public void unsetTb_name() {
    this.tb_name = null;
  }

  /** Returns true if field tb_name is set (has been assigned a value) and false otherwise */
  public boolean isSetTb_name() {
    return this.tb_name != null;
  }

  public void setTb_nameIsSet(boolean value) {
    if (!value) {
      this.tb_name = null;
    }
  }

  public java.lang.String getTb_type() {
    return this.tb_type;
  }

  public TopicBank setTb_type(java.lang.String tb_type) {
    this.tb_type = tb_type;
    return this;
  }

  public void unsetTb_type() {
    this.tb_type = null;
  }

  /** Returns true if field tb_type is set (has been assigned a value) and false otherwise */
  public boolean isSetTb_type() {
    return this.tb_type != null;
  }

  public void setTb_typeIsSet(boolean value) {
    if (!value) {
      this.tb_type = null;
    }
  }

  public java.lang.String getTb_create_time() {
    return this.tb_create_time;
  }

  public TopicBank setTb_create_time(java.lang.String tb_create_time) {
    this.tb_create_time = tb_create_time;
    return this;
  }

  public void unsetTb_create_time() {
    this.tb_create_time = null;
  }

  /** Returns true if field tb_create_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTb_create_time() {
    return this.tb_create_time != null;
  }

  public void setTb_create_timeIsSet(boolean value) {
    if (!value) {
      this.tb_create_time = null;
    }
  }

  public java.lang.String getTb_update_time() {
    return this.tb_update_time;
  }

  public TopicBank setTb_update_time(java.lang.String tb_update_time) {
    this.tb_update_time = tb_update_time;
    return this;
  }

  public void unsetTb_update_time() {
    this.tb_update_time = null;
  }

  /** Returns true if field tb_update_time is set (has been assigned a value) and false otherwise */
  public boolean isSetTb_update_time() {
    return this.tb_update_time != null;
  }

  public void setTb_update_timeIsSet(boolean value) {
    if (!value) {
      this.tb_update_time = null;
    }
  }

  public int getTopicsSize() {
    return (this.topics == null) ? 0 : this.topics.size();
  }

  public java.util.Iterator<Topic> getTopicsIterator() {
    return (this.topics == null) ? null : this.topics.iterator();
  }

  public void addToTopics(Topic elem) {
    if (this.topics == null) {
      this.topics = new java.util.ArrayList<Topic>();
    }
    this.topics.add(elem);
  }

  public java.util.List<Topic> getTopics() {
    return this.topics;
  }

  public TopicBank setTopics(java.util.List<Topic> topics) {
    this.topics = topics;
    return this;
  }

  public void unsetTopics() {
    this.topics = null;
  }

  /** Returns true if field topics is set (has been assigned a value) and false otherwise */
  public boolean isSetTopics() {
    return this.topics != null;
  }

  public void setTopicsIsSet(boolean value) {
    if (!value) {
      this.topics = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TB_ID:
      if (value == null) {
        unsetTb_id();
      } else {
        setTb_id((java.lang.Integer)value);
      }
      break;

    case TB_NAME:
      if (value == null) {
        unsetTb_name();
      } else {
        setTb_name((java.lang.String)value);
      }
      break;

    case TB_TYPE:
      if (value == null) {
        unsetTb_type();
      } else {
        setTb_type((java.lang.String)value);
      }
      break;

    case TB_CREATE_TIME:
      if (value == null) {
        unsetTb_create_time();
      } else {
        setTb_create_time((java.lang.String)value);
      }
      break;

    case TB_UPDATE_TIME:
      if (value == null) {
        unsetTb_update_time();
      } else {
        setTb_update_time((java.lang.String)value);
      }
      break;

    case TOPICS:
      if (value == null) {
        unsetTopics();
      } else {
        setTopics((java.util.List<Topic>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TB_ID:
      return getTb_id();

    case TB_NAME:
      return getTb_name();

    case TB_TYPE:
      return getTb_type();

    case TB_CREATE_TIME:
      return getTb_create_time();

    case TB_UPDATE_TIME:
      return getTb_update_time();

    case TOPICS:
      return getTopics();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TB_ID:
      return isSetTb_id();
    case TB_NAME:
      return isSetTb_name();
    case TB_TYPE:
      return isSetTb_type();
    case TB_CREATE_TIME:
      return isSetTb_create_time();
    case TB_UPDATE_TIME:
      return isSetTb_update_time();
    case TOPICS:
      return isSetTopics();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TopicBank)
      return this.equals((TopicBank)that);
    return false;
  }

  public boolean equals(TopicBank that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_tb_id = true;
    boolean that_present_tb_id = true;
    if (this_present_tb_id || that_present_tb_id) {
      if (!(this_present_tb_id && that_present_tb_id))
        return false;
      if (this.tb_id != that.tb_id)
        return false;
    }

    boolean this_present_tb_name = true && this.isSetTb_name();
    boolean that_present_tb_name = true && that.isSetTb_name();
    if (this_present_tb_name || that_present_tb_name) {
      if (!(this_present_tb_name && that_present_tb_name))
        return false;
      if (!this.tb_name.equals(that.tb_name))
        return false;
    }

    boolean this_present_tb_type = true && this.isSetTb_type();
    boolean that_present_tb_type = true && that.isSetTb_type();
    if (this_present_tb_type || that_present_tb_type) {
      if (!(this_present_tb_type && that_present_tb_type))
        return false;
      if (!this.tb_type.equals(that.tb_type))
        return false;
    }

    boolean this_present_tb_create_time = true && this.isSetTb_create_time();
    boolean that_present_tb_create_time = true && that.isSetTb_create_time();
    if (this_present_tb_create_time || that_present_tb_create_time) {
      if (!(this_present_tb_create_time && that_present_tb_create_time))
        return false;
      if (!this.tb_create_time.equals(that.tb_create_time))
        return false;
    }

    boolean this_present_tb_update_time = true && this.isSetTb_update_time();
    boolean that_present_tb_update_time = true && that.isSetTb_update_time();
    if (this_present_tb_update_time || that_present_tb_update_time) {
      if (!(this_present_tb_update_time && that_present_tb_update_time))
        return false;
      if (!this.tb_update_time.equals(that.tb_update_time))
        return false;
    }

    boolean this_present_topics = true && this.isSetTopics();
    boolean that_present_topics = true && that.isSetTopics();
    if (this_present_topics || that_present_topics) {
      if (!(this_present_topics && that_present_topics))
        return false;
      if (!this.topics.equals(that.topics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + tb_id;

    hashCode = hashCode * 8191 + ((isSetTb_name()) ? 131071 : 524287);
    if (isSetTb_name())
      hashCode = hashCode * 8191 + tb_name.hashCode();

    hashCode = hashCode * 8191 + ((isSetTb_type()) ? 131071 : 524287);
    if (isSetTb_type())
      hashCode = hashCode * 8191 + tb_type.hashCode();

    hashCode = hashCode * 8191 + ((isSetTb_create_time()) ? 131071 : 524287);
    if (isSetTb_create_time())
      hashCode = hashCode * 8191 + tb_create_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTb_update_time()) ? 131071 : 524287);
    if (isSetTb_update_time())
      hashCode = hashCode * 8191 + tb_update_time.hashCode();

    hashCode = hashCode * 8191 + ((isSetTopics()) ? 131071 : 524287);
    if (isSetTopics())
      hashCode = hashCode * 8191 + topics.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TopicBank other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTb_id()).compareTo(other.isSetTb_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTb_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_id, other.tb_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTb_name()).compareTo(other.isSetTb_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTb_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_name, other.tb_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTb_type()).compareTo(other.isSetTb_type());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTb_type()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_type, other.tb_type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTb_create_time()).compareTo(other.isSetTb_create_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTb_create_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_create_time, other.tb_create_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTb_update_time()).compareTo(other.isSetTb_update_time());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTb_update_time()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tb_update_time, other.tb_update_time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTopics()).compareTo(other.isSetTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.topics, other.topics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TopicBank(");
    boolean first = true;

    sb.append("tb_id:");
    sb.append(this.tb_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("tb_name:");
    if (this.tb_name == null) {
      sb.append("null");
    } else {
      sb.append(this.tb_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tb_type:");
    if (this.tb_type == null) {
      sb.append("null");
    } else {
      sb.append(this.tb_type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tb_create_time:");
    if (this.tb_create_time == null) {
      sb.append("null");
    } else {
      sb.append(this.tb_create_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tb_update_time:");
    if (this.tb_update_time == null) {
      sb.append("null");
    } else {
      sb.append(this.tb_update_time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("topics:");
    if (this.topics == null) {
      sb.append("null");
    } else {
      sb.append(this.topics);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TopicBankStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicBankStandardScheme getScheme() {
      return new TopicBankStandardScheme();
    }
  }

  private static class TopicBankStandardScheme extends org.apache.thrift.scheme.StandardScheme<TopicBank> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TopicBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TB_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tb_id = iprot.readI32();
              struct.setTb_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tb_name = iprot.readString();
              struct.setTb_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TB_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tb_type = iprot.readString();
              struct.setTb_typeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TB_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tb_create_time = iprot.readString();
              struct.setTb_create_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TB_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tb_update_time = iprot.readString();
              struct.setTb_update_timeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list114 = iprot.readListBegin();
                struct.topics = new java.util.ArrayList<Topic>(_list114.size);
                Topic _elem115;
                for (int _i116 = 0; _i116 < _list114.size; ++_i116)
                {
                  _elem115 = new Topic();
                  _elem115.read(iprot);
                  struct.topics.add(_elem115);
                }
                iprot.readListEnd();
              }
              struct.setTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TopicBank struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TB_ID_FIELD_DESC);
      oprot.writeI32(struct.tb_id);
      oprot.writeFieldEnd();
      if (struct.tb_name != null) {
        oprot.writeFieldBegin(TB_NAME_FIELD_DESC);
        oprot.writeString(struct.tb_name);
        oprot.writeFieldEnd();
      }
      if (struct.tb_type != null) {
        oprot.writeFieldBegin(TB_TYPE_FIELD_DESC);
        oprot.writeString(struct.tb_type);
        oprot.writeFieldEnd();
      }
      if (struct.tb_create_time != null) {
        oprot.writeFieldBegin(TB_CREATE_TIME_FIELD_DESC);
        oprot.writeString(struct.tb_create_time);
        oprot.writeFieldEnd();
      }
      if (struct.tb_update_time != null) {
        oprot.writeFieldBegin(TB_UPDATE_TIME_FIELD_DESC);
        oprot.writeString(struct.tb_update_time);
        oprot.writeFieldEnd();
      }
      if (struct.topics != null) {
        oprot.writeFieldBegin(TOPICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.topics.size()));
          for (Topic _iter117 : struct.topics)
          {
            _iter117.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TopicBankTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TopicBankTupleScheme getScheme() {
      return new TopicBankTupleScheme();
    }
  }

  private static class TopicBankTupleScheme extends org.apache.thrift.scheme.TupleScheme<TopicBank> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TopicBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTb_id()) {
        optionals.set(0);
      }
      if (struct.isSetTb_name()) {
        optionals.set(1);
      }
      if (struct.isSetTb_type()) {
        optionals.set(2);
      }
      if (struct.isSetTb_create_time()) {
        optionals.set(3);
      }
      if (struct.isSetTb_update_time()) {
        optionals.set(4);
      }
      if (struct.isSetTopics()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetTb_id()) {
        oprot.writeI32(struct.tb_id);
      }
      if (struct.isSetTb_name()) {
        oprot.writeString(struct.tb_name);
      }
      if (struct.isSetTb_type()) {
        oprot.writeString(struct.tb_type);
      }
      if (struct.isSetTb_create_time()) {
        oprot.writeString(struct.tb_create_time);
      }
      if (struct.isSetTb_update_time()) {
        oprot.writeString(struct.tb_update_time);
      }
      if (struct.isSetTopics()) {
        {
          oprot.writeI32(struct.topics.size());
          for (Topic _iter118 : struct.topics)
          {
            _iter118.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TopicBank struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.tb_id = iprot.readI32();
        struct.setTb_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tb_name = iprot.readString();
        struct.setTb_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.tb_type = iprot.readString();
        struct.setTb_typeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.tb_create_time = iprot.readString();
        struct.setTb_create_timeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.tb_update_time = iprot.readString();
        struct.setTb_update_timeIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list119 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.topics = new java.util.ArrayList<Topic>(_list119.size);
          Topic _elem120;
          for (int _i121 = 0; _i121 < _list119.size; ++_i121)
          {
            _elem120 = new Topic();
            _elem120.read(iprot);
            struct.topics.add(_elem120);
          }
        }
        struct.setTopicsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

